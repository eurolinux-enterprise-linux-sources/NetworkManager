From 4f86997faa3a129d5259953150e1f7aed4983e85 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ji=C5=99=C3=AD=20Klime=C5=A1?= <jklimes@redhat.com>
Date: Fri, 18 Oct 2013 14:30:38 +0200
Subject: [PATCH 1/1] Do not store empty labels as NULLs (rh #1020310)

User connections do not go through D-Bus that would replace NULLs by ""s.
That causes crashes in nm-applet or nm-connection-editor in
gconf_client_set_list(). GConf expects that passed string list doesn't contain
NULLs.

Test case:
* nm-connection-editor
* create/edit a connection
* uncheck "Available to all users"
* set IPv4 method to Manual and add an address
* click "Apply"
* ... boom ... in GConf (g_utf8_validate)

https://bugzilla.redhat.com/show_bug.cgi?id=1020310
---
 libnm-util/nm-setting-ip4-config.c | 16 ++++++----------
 1 file changed, 6 insertions(+), 10 deletions(-)

diff --git a/libnm-util/nm-setting-ip4-config.c b/libnm-util/nm-setting-ip4-config.c
index 4faf0f3..75bde60 100644
--- a/libnm-util/nm-setting-ip4-config.c
+++ b/libnm-util/nm-setting-ip4-config.c
@@ -268,27 +268,30 @@ nm_setting_ip4_config_get_address (NMSettingIP4Config *setting, guint32 i)
 	priv = NM_SETTING_IP4_CONFIG_GET_PRIVATE (setting);
 	g_return_val_if_fail (i <= g_slist_length (priv->addresses), NULL);
 
 	return (NMIP4Address *) g_slist_nth_data (priv->addresses, i);
 }
 
 const char *
 nm_setting_ip4_config_get_address_label (NMSettingIP4Config *setting, guint32 i)
 {
 	NMSettingIP4ConfigPrivate *priv;
+	const char *label;
 
 	g_return_val_if_fail (NM_IS_SETTING_IP4_CONFIG (setting), NULL);
 
 	priv = NM_SETTING_IP4_CONFIG_GET_PRIVATE (setting);
 	g_return_val_if_fail (i <= g_slist_length (priv->address_labels), NULL);
 
-	return (const char *) g_slist_nth_data (priv->address_labels, i);
+	label = (const char *) g_slist_nth_data (priv->address_labels, i);
+
+	return (label && *label) ? label : NULL;
 }
 
 gboolean
 nm_setting_ip4_config_add_address (NMSettingIP4Config *setting,
                                    NMIP4Address *address)
 {
 	return nm_setting_ip4_config_add_address_with_label (setting, address, NULL);
 }
 
 gboolean
@@ -306,21 +309,21 @@ nm_setting_ip4_config_add_address_with_label (NMSettingIP4Config *setting,
 	priv = NM_SETTING_IP4_CONFIG_GET_PRIVATE (setting);
 	for (iter = priv->addresses; iter; iter = g_slist_next (iter)) {
 		if (nm_ip4_address_compare ((NMIP4Address *) iter->data, address))
 			return FALSE;
 	}
 
 	copy = nm_ip4_address_dup (address);
 	g_return_val_if_fail (copy != NULL, FALSE);
 
 	priv->addresses = g_slist_append (priv->addresses, copy);
-	priv->address_labels = g_slist_append (priv->address_labels, g_strdup (label));
+	priv->address_labels = g_slist_append (priv->address_labels, g_strdup (label ? label : ""));
 	return TRUE;
 }
 
 void
 nm_setting_ip4_config_remove_address (NMSettingIP4Config *setting, guint32 i)
 {
 	NMSettingIP4ConfigPrivate *priv;
 	GSList *addr, *label;
 
 	g_return_if_fail (NM_IS_SETTING_IP4_CONFIG (setting));
@@ -659,33 +662,26 @@ set_property (GObject *object, guint prop_id,
 		priv->dns_search = g_value_dup_boxed (value);
 		break;
 	case PROP_ADDRESSES:
 		nm_utils_slist_free (priv->addresses, (GDestroyNotify) nm_ip4_address_unref);
 		priv->addresses = nm_utils_ip4_addresses_from_gvalue (value);
 
 		if (g_slist_length (priv->addresses) != g_slist_length (priv->address_labels)) {
 			nm_utils_slist_free (priv->address_labels, g_free);
 			priv->address_labels = NULL;
 			for (iter = priv->addresses; iter; iter = iter->next)
-				priv->address_labels = g_slist_prepend (priv->address_labels, NULL);
+				priv->address_labels = g_slist_prepend (priv->address_labels, g_strdup (""));
 		}
 		break;
 	case PROP_ADDRESS_LABELS:
 		nm_utils_slist_free (priv->address_labels, g_free);
 		priv->address_labels = g_value_dup_boxed (value);
-		/* NULLs get converted to "" when this is sent over D-Bus. */
-		for (iter = priv->address_labels; iter; iter = iter->next) {
-			if (!g_strcmp0 (iter->data, "")) {
-				g_free (iter->data);
-				iter->data = NULL;
-			}
-		}
 		break;
 	case PROP_ROUTES:
 		nm_utils_slist_free (priv->routes, (GDestroyNotify) nm_ip4_route_unref);
 		priv->routes = nm_utils_ip4_routes_from_gvalue (value);
 		break;
 	case PROP_IGNORE_AUTO_ROUTES:
 		priv->ignore_auto_routes = g_value_get_boolean (value);
 		break;
 	case PROP_IGNORE_AUTO_DNS:
 		priv->ignore_auto_dns = g_value_get_boolean (value);
-- 
1.7.11.7

