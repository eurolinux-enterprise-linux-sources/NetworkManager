diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/po/POTFILES.in NetworkManager-0.8.1-b/network-manager-applet-0.8.1/po/POTFILES.in
index 5d5788c..80cc3cb 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/po/POTFILES.in
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/po/POTFILES.in
@@ -16,6 +16,7 @@ src/applet.glade
 src/applet.h
 src/connection-editor/ce-page.c
 [type: gettext/glade]src/connection-editor/ce-page-dsl.ui
+[type: gettext/glade]src/connection-editor/ce-page-infiniband.ui
 [type: gettext/glade]src/connection-editor/ce-page-ip4.ui
 [type: gettext/glade]src/connection-editor/ce-page-ip6.ui
 [type: gettext/glade]src/connection-editor/ce-page-mobile.ui
@@ -28,6 +29,7 @@ src/connection-editor/ip4-routes-dialog.c
 src/connection-editor/ip6-routes-dialog.c
 src/connection-editor/new-connection.c
 src/connection-editor/page-dsl.c
+src/connection-editor/page-infiniband.c
 src/connection-editor/page-ip4.c
 src/connection-editor/page-ip6.c
 src/connection-editor/page-mobile.c
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/Makefile.am NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/Makefile.am
index e9b263a..2145ba8 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/Makefile.am
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/Makefile.am
@@ -37,6 +37,8 @@ nm_connection_editor_SOURCES = \
 	page-wireless.c \
 	page-wireless-security.h \
 	page-wireless-security.c \
+	page-infiniband.h \
+	page-infiniband.c \
 	page-ip4.h \
 	page-ip4.c \
 	page-ip6.h \
@@ -85,6 +87,7 @@ ui_DATA = \
 	ce-page-wired.ui \
 	ce-page-wireless.ui \
 	ce-page-wireless-security.ui \
+	ce-page-infiniband.ui \
 	ce-page-ip4.ui \
 	ce-page-ip6.ui \
 	ce-page-dsl.ui \
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/ce-page-infiniband.ui NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/ce-page-infiniband.ui
new file mode 100644
index 0000000..423b902
--- /dev/null
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/ce-page-infiniband.ui
@@ -0,0 +1,150 @@
+<?xml version="1.0"?>
+<interface>
+  <requires lib="gtk+" version="2.16"/>
+  <!-- interface-naming-policy toplevel-contextual -->
+  <object class="GtkWindow" id="infiniband_page_widget">
+    <property name="title" translatable="yes">window1</property>
+    <child>
+      <object class="GtkTable" id="InfinibandPage">
+        <property name="visible">True</property>
+        <property name="border_width">12</property>
+        <property name="n_rows">3</property>
+        <property name="n_columns">2</property>
+        <property name="column_spacing">12</property>
+        <property name="row_spacing">6</property>
+        <child>
+          <object class="GtkLabel" id="infiniband_mode_label">
+            <property name="visible">True</property>
+            <property name="xalign">0</property>
+            <property name="label" translatable="yes">_Transport mode:</property>
+            <property name="use_underline">True</property>
+          </object>
+          <packing>
+            <property name="x_options">GTK_FILL</property>
+            <property name="y_options"></property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkLabel" id="infiniband_device_mac_label">
+            <property name="visible">True</property>
+            <property name="xalign">0</property>
+            <property name="label" translatable="yes">_Device MAC address:</property>
+            <property name="use_underline">True</property>
+            <property name="mnemonic_widget">infiniband_device_mac_entry</property>
+          </object>
+          <packing>
+            <property name="top_attach">1</property>
+            <property name="bottom_attach">2</property>
+            <property name="x_options">GTK_FILL</property>
+            <property name="y_options"></property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkComboBox" id="infiniband_mode">
+            <property name="visible">True</property>
+            <property name="model">infiniband_mode_model</property>
+            <child>
+              <object class="GtkCellRendererText" id="renderer1"/>
+              <attributes>
+                <attribute name="text">0</attribute>
+              </attributes>
+            </child>
+          </object>
+          <packing>
+            <property name="left_attach">1</property>
+            <property name="right_attach">2</property>
+            <property name="x_options">GTK_FILL</property>
+            <property name="y_options">GTK_FILL</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkHBox" id="hbox1">
+            <property name="visible">True</property>
+            <property name="spacing">6</property>
+            <child>
+              <object class="GtkSpinButton" id="infiniband_mtu">
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="invisible_char">&#x25CF;</property>
+                <property name="invisible_char_set">True</property>
+                <property name="adjustment">adjustment1</property>
+                <property name="climb_rate">1</property>
+              </object>
+              <packing>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkLabel" id="label29">
+                <property name="visible">True</property>
+                <property name="label" translatable="yes">bytes</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="left_attach">1</property>
+            <property name="right_attach">2</property>
+            <property name="top_attach">2</property>
+            <property name="bottom_attach">3</property>
+            <property name="x_options">GTK_FILL</property>
+            <property name="y_options">GTK_FILL</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkLabel" id="infiniband_mtu_label">
+            <property name="visible">True</property>
+            <property name="xalign">0</property>
+            <property name="label" translatable="yes">_MTU:</property>
+            <property name="use_underline">True</property>
+            <property name="mnemonic_widget">infiniband_mtu</property>
+          </object>
+          <packing>
+            <property name="top_attach">2</property>
+            <property name="bottom_attach">3</property>
+            <property name="x_options">GTK_FILL</property>
+            <property name="y_options"></property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkEntry" id="infiniband_device_mac_entry">
+            <property name="visible">True</property>
+            <property name="can_focus">True</property>
+            <property name="invisible_char">&#x25CF;</property>
+            <property name="tooltip_text" translatable="yes">This option locks this connection to the network device specified by its permanent MAC address entered here.  Example: 00:11:22:33:44:55</property>
+          </object>
+          <packing>
+            <property name="left_attach">1</property>
+            <property name="right_attach">2</property>
+            <property name="top_attach">1</property>
+            <property name="bottom_attach">2</property>
+            <property name="y_options">GTK_FILL</property>
+          </packing>
+        </child>
+      </object>
+    </child>
+  </object>
+  <object class="GtkAdjustment" id="adjustment1">
+    <property name="upper">65520</property>
+    <property name="step_increment">1</property>
+    <property name="page_increment">10</property>
+  </object>
+  <object class="GtkListStore" id="infiniband_mode_model">
+    <columns>
+      <!-- column-name mode -->
+      <column type="gchararray"/>
+    </columns>
+    <data>
+      <row>
+        <col id="0" translatable="yes" comments="IP-over-InfiniBand &quot;datagram mode&quot;">Datagram</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes" comments="IP-over-InfiniBand &quot;connected mode&quot;">Connected</col>
+      </row>
+    </data>
+  </object>
+</interface>
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/ce-page.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/ce-page.c
index 5e4805a..b5a350d 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/ce-page.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/ce-page.c
@@ -122,9 +122,8 @@ ce_page_validate (CEPage *self, NMConnection *connection, GError **error)
 }
 
 void
-ce_page_mac_to_entry (const GByteArray *mac, GtkEntry *entry)
+ce_page_mac_to_entry (const GByteArray *mac, int type, GtkEntry *entry)
 {
-	struct ether_addr addr;
 	char *str_addr;
 
 	g_return_if_fail (entry != NULL);
@@ -133,17 +132,19 @@ ce_page_mac_to_entry (const GByteArray *mac, GtkEntry *entry)
 	if (!mac || !mac->len)
 		return;
 
-	memcpy (addr.ether_addr_octet, mac->data, ETH_ALEN);
-	str_addr = utils_ether_ntop (&addr);
+	if (mac->len != nm_utils_hwaddr_len (type))
+		return;
+
+	str_addr = nm_utils_hwaddr_ntoa (mac->data, type);
 	gtk_entry_set_text (entry, str_addr);
 	g_free (str_addr);
 }
 
 GByteArray *
-ce_page_entry_to_mac (GtkEntry *entry, gboolean *invalid)
+ce_page_entry_to_mac (GtkEntry *entry, int type, gboolean *invalid)
 {
-	struct ether_addr *ether;
-	const char *temp;
+	const char *temp, *sp;
+	char *buf = NULL;
 	GByteArray *mac;
 
 	g_return_val_if_fail (entry != NULL, NULL);
@@ -156,15 +157,25 @@ ce_page_entry_to_mac (GtkEntry *entry, gboolean *invalid)
 	if (!temp || !strlen (temp))
 		return NULL;
 
-	ether = ether_aton (temp);
-	if (!ether || !utils_mac_valid (ether)) {
+	sp = strchr (temp, ' ');
+	if (sp)
+		temp = buf = g_strndup (temp, sp - temp);
+
+	mac = nm_utils_hwaddr_atoba (temp, type);
+	g_free (buf);
+	if (!mac) {
+		if (invalid)
+			*invalid = TRUE;
+		return NULL;
+	}
+
+	if (type == ARPHRD_ETHER && !utils_ether_addr_valid ((struct ether_addr *)mac->data)) {
+		g_byte_array_free (mac, TRUE);
 		if (invalid)
 			*invalid = TRUE;
 		return NULL;
 	}
 
-	mac = g_byte_array_sized_new (ETH_ALEN);
-	g_byte_array_append (mac, (const guint8 *) ether->ether_addr_octet, ETH_ALEN);
 	return mac;
 }
 
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/ce-page.h NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/ce-page.h
index 7500623..a1e0bc3 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/ce-page.h
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/ce-page.h
@@ -34,6 +34,9 @@
 #include "nma-gconf-settings.h"
 #include "utils.h"
 
+/* for ARPHRD_ETHER / ARPHRD_INFINIBAND for MAC utilies */
+#include <net/if_arp.h>
+
 #if !GTK_CHECK_VERSION(2,18,0)
 #define gtk_widget_is_toplevel GTK_WIDGET_TOPLEVEL
 #endif
@@ -108,9 +111,9 @@ gboolean ce_page_validate (CEPage *self, NMConnection *connection, GError **erro
 
 void ce_page_changed (CEPage *self);
 
-void ce_page_mac_to_entry (const GByteArray *mac, GtkEntry *entry);
+void ce_page_mac_to_entry (const GByteArray *mac, int type, GtkEntry *entry);
 
-GByteArray *ce_page_entry_to_mac (GtkEntry *entry, gboolean *invalid);
+GByteArray *ce_page_entry_to_mac (GtkEntry *entry, int type, gboolean *invalid);
 
 gint ce_spin_output_with_default (GtkSpinButton *spin, gpointer user_data);
 
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/new-connection.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/new-connection.c
index 00a4db1..db4b9ec 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/new-connection.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/new-connection.c
@@ -28,6 +28,7 @@
 #include "page-wireless.h"
 #include "page-mobile.h"
 #include "page-dsl.h"
+#include "page-infiniband.h"
 #include "page-vpn.h"
 #include "vpn-helpers.h"
 
@@ -35,6 +36,7 @@
 #include <nm-setting-wireless.h>
 #include <nm-setting-gsm.h>
 #include <nm-setting-pppoe.h>
+#include <nm-setting-infiniband.h>
 #include <nm-setting-vpn.h>
 
 static GSList *vpn_plugins;
@@ -122,6 +124,12 @@ get_connection_type_list (void)
 	data.virtual = FALSE;
 	g_array_append_val (array, data);
 
+	data.name = _("InfiniBand");
+	data.new_connection_func = infiniband_connection_new;
+	data.setting_type = NM_TYPE_SETTING_INFINIBAND;
+	data.virtual = FALSE;
+	g_array_append_val (array, data);
+
 	/* Add "VPN" only if there are plugins */
 	vpn_plugins_hash = vpn_get_plugins (NULL);
 	have_vpn_plugins  = vpn_plugins_hash && g_hash_table_size (vpn_plugins_hash);
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.c
index a4b38a1..945df75 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.c
@@ -45,6 +45,7 @@
 #include <nm-setting-ppp.h>
 #include <nm-setting-gsm.h>
 #include <nm-setting-cdma.h>
+#include <nm-setting-infiniband.h>
 #include <nm-utils.h>
 
 #include "nm-connection-editor.h"
@@ -62,6 +63,7 @@
 #include "page-mobile.h"
 #include "page-ppp.h"
 #include "page-vpn.h"
+#include "page-infiniband.h"
 #include "ce-polkit-button.h"
 #include "vpn-helpers.h"
 
@@ -782,6 +784,13 @@ nm_connection_editor_set_connection (NMConnectionEditor *editor,
 			goto out;
 		if (!add_page (editor, ce_page_ip4_new, editor->connection, error))
 			goto out;
+	} else if (!strcmp (connection_type, NM_SETTING_INFINIBAND_SETTING_NAME)) {
+		if (!add_page (editor, ce_page_infiniband_new, editor->connection, error))
+			goto out;
+		if (!add_page (editor, ce_page_ip4_new, editor->connection, error))
+			goto out;
+		if (!add_page (editor, ce_page_ip6_new, editor->connection, error))
+			goto out;
 	} else {
 		g_warning ("Unhandled setting type '%s'", connection_type);
 	}
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/nm-connection-list.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/nm-connection-list.c
index 3d742cf..bdcd87a 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/nm-connection-list.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/nm-connection-list.c
@@ -42,6 +42,7 @@
 #include <nm-setting-pppoe.h>
 #include <nm-setting-ppp.h>
 #include <nm-setting-serial.h>
+#include <nm-setting-infiniband.h>
 #include <nm-utils.h>
 #include <nm-settings-system-interface.h>
 
@@ -51,6 +52,7 @@
 #include "page-mobile.h"
 #include "page-dsl.h"
 #include "page-vpn.h"
+#include "page-infiniband.h"
 #include "nm-connection-editor.h"
 #include "nm-connection-list.h"
 #include "gconf-helpers.h"
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-infiniband.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-infiniband.c
new file mode 100644
index 0000000..793b4ae
--- /dev/null
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-infiniband.c
@@ -0,0 +1,247 @@
+/* -*- Mode: C; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
+/* NetworkManager Connection editor -- Connection editor for NetworkManager
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Copyright 2012 Red Hat, Inc.
+ */
+
+#include "config.h"
+
+#include <gtk/gtk.h>
+#include <glib/gi18n.h>
+
+#include <nm-setting-connection.h>
+#include <nm-setting-infiniband.h>
+#include <nm-device-infiniband.h>
+#include <nm-utils.h>
+
+#include <net/if_arp.h>
+#include <linux/if_infiniband.h>
+
+#include "page-infiniband.h"
+
+G_DEFINE_TYPE (CEPageInfiniband, ce_page_infiniband, CE_TYPE_PAGE)
+
+#define CE_PAGE_INFINIBAND_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), CE_TYPE_PAGE_INFINIBAND, CEPageInfinibandPrivate))
+
+typedef struct {
+	NMSettingInfiniband *setting;
+
+	GtkEntry *device_mac;
+	GtkComboBox *transport_mode;
+	GtkSpinButton *mtu;
+} CEPageInfinibandPrivate;
+
+#define TRANSPORT_MODE_DATAGRAM  0
+#define TRANSPORT_MODE_CONNECTED 1
+
+static void
+infiniband_private_init (CEPageInfiniband *self)
+{
+	CEPageInfinibandPrivate *priv = CE_PAGE_INFINIBAND_GET_PRIVATE (self);
+	GtkBuilder *builder;
+
+	builder = CE_PAGE (self)->builder;
+
+	priv->device_mac = GTK_ENTRY (gtk_builder_get_object (builder, "infiniband_device_mac_entry"));
+	priv->transport_mode = GTK_COMBO_BOX (gtk_builder_get_object (builder, "infiniband_mode"));
+	priv->mtu = GTK_SPIN_BUTTON (GTK_WIDGET (gtk_builder_get_object (builder, "infiniband_mtu")));
+}
+
+static void
+stuff_changed (GtkWidget *w, gpointer user_data)
+{
+	ce_page_changed (CE_PAGE (user_data));
+}
+
+static void
+populate_ui (CEPageInfiniband *self)
+{
+	CEPageInfinibandPrivate *priv = CE_PAGE_INFINIBAND_GET_PRIVATE (self);
+	NMSettingInfiniband *setting = priv->setting;
+	const char *mode;
+	int mode_idx = TRANSPORT_MODE_DATAGRAM;
+	int mtu_def;
+
+	/* Port */
+	mode = nm_setting_infiniband_get_transport_mode (setting);
+	if (mode) {
+		if (!strcmp (mode, "datagram"))
+			mode_idx = TRANSPORT_MODE_DATAGRAM;
+		else if (!strcmp (mode, "connected"))
+			mode_idx = TRANSPORT_MODE_CONNECTED;
+	}
+	gtk_combo_box_set_active (priv->transport_mode, mode_idx);
+
+	/* Device MAC address */
+	ce_page_mac_to_entry (nm_setting_infiniband_get_mac_address (setting), 
+	                      ARPHRD_INFINIBAND, priv->device_mac);
+	g_signal_connect (priv->device_mac, "changed", G_CALLBACK (stuff_changed), self);
+
+	/* MTU */
+	mtu_def = ce_get_property_default (NM_SETTING (setting), NM_SETTING_INFINIBAND_MTU);
+	g_signal_connect (priv->mtu, "output",
+	                  G_CALLBACK (ce_spin_output_with_default),
+	                  GINT_TO_POINTER (mtu_def));
+
+	gtk_spin_button_set_value (priv->mtu, (gdouble) nm_setting_infiniband_get_mtu (setting));
+}
+
+static void
+finish_setup (CEPageInfiniband *self, gpointer unused, GError *error, gpointer user_data)
+{
+	CEPageInfinibandPrivate *priv = CE_PAGE_INFINIBAND_GET_PRIVATE (self);
+
+	if (error)
+		return;
+
+	populate_ui (self);
+
+	g_signal_connect (priv->transport_mode, "changed", G_CALLBACK (stuff_changed), self);
+	g_signal_connect (priv->mtu, "value-changed", G_CALLBACK (stuff_changed), self);
+}
+
+CEPage *
+ce_page_infiniband_new (NMConnection *connection,
+                        GtkWindow *parent_window,
+                        const char **out_secrets_setting_name,
+                        GError **error)
+{
+	CEPageInfiniband *self;
+	CEPageInfinibandPrivate *priv;
+	CEPage *parent;
+
+	self = CE_PAGE_INFINIBAND (g_object_new (CE_TYPE_PAGE_INFINIBAND,
+	                           CE_PAGE_CONNECTION, connection,
+	                           CE_PAGE_PARENT_WINDOW, parent_window,
+	                           NULL));
+
+	parent = CE_PAGE (self);
+
+	parent->builder = gtk_builder_new ();
+
+	if (!gtk_builder_add_from_file (parent->builder, UIDIR "/ce-page-infiniband.ui", error)) {
+		g_warning ("Couldn't load builder file: %s", (*error)->message);
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load InfiniBand user interface."));
+		g_object_unref (self);
+		return NULL;
+	}
+
+	parent->page = GTK_WIDGET (gtk_builder_get_object (parent->builder, "InfinibandPage"));
+	if (!parent->page) {
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load InfiniBand user interface."));
+		g_object_unref (self);
+		return NULL;
+	}
+	g_object_ref_sink (parent->page);
+
+	parent->title = g_strdup (_("InfiniBand"));
+
+	infiniband_private_init (self);
+	priv = CE_PAGE_INFINIBAND_GET_PRIVATE (self);
+
+	priv->setting = (NMSettingInfiniband *)nm_connection_get_setting (connection, NM_TYPE_SETTING_INFINIBAND);
+	if (!priv->setting) {
+		priv->setting = NM_SETTING_INFINIBAND (nm_setting_infiniband_new ());
+		nm_connection_add_setting (connection, NM_SETTING (priv->setting));
+	}
+
+	g_signal_connect (self, "initialized", G_CALLBACK (finish_setup), NULL);
+
+	return CE_PAGE (self);
+}
+
+static void
+ui_to_setting (CEPageInfiniband *self)
+{
+	CEPageInfinibandPrivate *priv = CE_PAGE_INFINIBAND_GET_PRIVATE (self);
+	const char *mode;
+	GByteArray *device_mac = NULL;
+
+	/* Transport mode */
+	if (gtk_combo_box_get_active (priv->transport_mode) == TRANSPORT_MODE_CONNECTED)
+		mode = "connected";
+	else
+		mode = "datagram";
+
+	device_mac = nm_utils_hwaddr_atoba (gtk_entry_get_text (priv->device_mac),
+										ARPHRD_INFINIBAND);
+
+	g_object_set (priv->setting,
+	              NM_SETTING_INFINIBAND_MAC_ADDRESS, device_mac,
+	              NM_SETTING_INFINIBAND_MTU, (guint32) gtk_spin_button_get_value_as_int (priv->mtu),
+	              NM_SETTING_INFINIBAND_TRANSPORT_MODE, mode,
+	              NULL);
+
+	if (device_mac)
+		g_byte_array_free (device_mac, TRUE);
+}
+
+static gboolean
+validate (CEPage *page, NMConnection *connection, GError **error)
+{
+	CEPageInfiniband *self = CE_PAGE_INFINIBAND (page);
+	CEPageInfinibandPrivate *priv = CE_PAGE_INFINIBAND_GET_PRIVATE (self);
+	char buf[INFINIBAND_ALEN];
+	const char *hwaddr;
+
+	hwaddr = gtk_entry_get_text (priv->device_mac);
+	if (hwaddr && *hwaddr && !nm_utils_hwaddr_aton (hwaddr, ARPHRD_INFINIBAND, buf))
+		return FALSE;
+
+	ui_to_setting (self);
+	return nm_setting_verify (NM_SETTING (priv->setting), NULL, error);
+}
+
+static void
+ce_page_infiniband_init (CEPageInfiniband *self)
+{
+}
+
+static void
+ce_page_infiniband_class_init (CEPageInfinibandClass *infiniband_class)
+{
+	GObjectClass *object_class = G_OBJECT_CLASS (infiniband_class);
+	CEPageClass *parent_class = CE_PAGE_CLASS (infiniband_class);
+
+	g_type_class_add_private (object_class, sizeof (CEPageInfinibandPrivate));
+
+	/* virtual methods */
+	parent_class->validate = validate;
+}
+
+
+void
+infiniband_connection_new (GtkWindow *parent,
+                           const char *detail,
+                           NMRemoteSettingsSystem *system_settings,
+                           NMAGConfSettings *gconf_settings,
+                           PageNewConnectionResultFunc result_func,
+                           gpointer user_data)
+{
+	NMConnection *connection;
+
+	connection = ce_page_new_connection (_("InfiniBand connection %d"),
+	                                     NM_SETTING_INFINIBAND_SETTING_NAME,
+	                                     TRUE,
+	                                     system_settings,
+	                                     gconf_settings,
+	                                     user_data);
+	nm_connection_add_setting (connection, nm_setting_infiniband_new ());
+
+	(*result_func) (connection, FALSE, NULL, user_data);
+}
+
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-infiniband.h NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-infiniband.h
new file mode 100644
index 0000000..95379d7
--- /dev/null
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-infiniband.h
@@ -0,0 +1,61 @@
+/* -*- Mode: C; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
+/* NetworkManager Connection editor -- Connection editor for NetworkManager
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Copyright 2012 Red Hat, Inc.
+ */
+
+#ifndef __PAGE_INFINIBAND_H__
+#define __PAGE_INFINIBAND_H__
+
+#include <nm-connection.h>
+
+#include <glib.h>
+#include <glib-object.h>
+
+#include "ce-page.h"
+
+#define CE_TYPE_PAGE_INFINIBAND            (ce_page_infiniband_get_type ())
+#define CE_PAGE_INFINIBAND(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), CE_TYPE_PAGE_INFINIBAND, CEPageInfiniband))
+#define CE_PAGE_INFINIBAND_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), CE_TYPE_PAGE_INFINIBAND, CEPageInfinibandClass))
+#define CE_IS_PAGE_INFINIBAND(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CE_TYPE_PAGE_INFINIBAND))
+#define CE_IS_PAGE_INFINIBAND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((obj), CE_TYPE_PAGE_INFINIBAND))
+#define CE_PAGE_INFINIBAND_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), CE_TYPE_PAGE_INFINIBAND, CEPageInfinibandClass))
+
+typedef struct {
+	CEPage parent;
+} CEPageInfiniband;
+
+typedef struct {
+	CEPageClass parent;
+} CEPageInfinibandClass;
+
+GType ce_page_infiniband_get_type (void);
+
+CEPage *ce_page_infiniband_new (NMConnection *connection,
+                                GtkWindow *parent,
+                                const char **out_secrets_setting_name,
+                                GError **error);
+
+void infiniband_connection_new (GtkWindow *parent,
+                                const char *detail,
+                                NMRemoteSettingsSystem *system_settings,
+                                NMAGConfSettings *gconf_settings,
+                                PageNewConnectionResultFunc result_func,
+                                gpointer user_data);
+
+#endif  /* __PAGE_INFINIBAND_H__ */
+
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wired.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wired.c
index 221cc2c..97d4317 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wired.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wired.c
@@ -141,11 +141,13 @@ populate_ui (CEPageWired *self)
 	                              nm_setting_wired_get_auto_negotiate (setting));
 
 	/* Device MAC address */
-	ce_page_mac_to_entry (nm_setting_wired_get_mac_address (setting), priv->device_mac);
+	ce_page_mac_to_entry (nm_setting_wired_get_mac_address (setting), 
+	                      ARPHRD_ETHER, priv->device_mac);
 	g_signal_connect (priv->device_mac, "changed", G_CALLBACK (stuff_changed), self);
 
 	/* Cloned MAC address */
-	ce_page_mac_to_entry (nm_setting_wired_get_cloned_mac_address (setting), priv->cloned_mac);
+	ce_page_mac_to_entry (nm_setting_wired_get_cloned_mac_address (setting),
+	                      ARPHRD_ETHER, priv->cloned_mac);
 	g_signal_connect (priv->cloned_mac, "changed", G_CALLBACK (stuff_changed), self);
 
 	/* MTU */
@@ -288,8 +290,8 @@ ui_to_setting (CEPageWired *self)
 		break;
 	}
 
-	device_mac = ce_page_entry_to_mac (priv->device_mac, NULL);
-	cloned_mac = ce_page_entry_to_mac (priv->cloned_mac, NULL);
+	device_mac = ce_page_entry_to_mac (priv->device_mac, ARPHRD_ETHER, NULL);
+	cloned_mac = ce_page_entry_to_mac (priv->cloned_mac, ARPHRD_ETHER, NULL);
 
 	g_object_set (priv->setting,
 				  NM_SETTING_WIRED_MAC_ADDRESS, device_mac,
@@ -316,13 +318,13 @@ validate (CEPage *page, NMConnection *connection, GError **error)
 	gboolean invalid = FALSE;
 	GByteArray *ignore;
 
-	ignore = ce_page_entry_to_mac (priv->device_mac, &invalid);
+	ignore = ce_page_entry_to_mac (priv->device_mac, ARPHRD_ETHER, &invalid);
 	if (invalid)
 		return FALSE;
 	if (ignore)
 		g_byte_array_free (ignore, TRUE);
 
-	ignore = ce_page_entry_to_mac (priv->cloned_mac, &invalid);
+	ignore = ce_page_entry_to_mac (priv->cloned_mac, ARPHRD_ETHER, &invalid);
 	if (invalid)
 		return FALSE;
 	if (ignore)
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wireless.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wireless.c
index 21fc2be..fdd0349 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wireless.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wireless.c
@@ -338,15 +338,18 @@ populate_ui (CEPageWireless *self)
 	g_signal_connect_swapped (priv->channel, "value-changed", G_CALLBACK (ce_page_changed), self);
 
 	/* BSSID */
-	ce_page_mac_to_entry (nm_setting_wireless_get_bssid (setting), priv->bssid);
+	ce_page_mac_to_entry (nm_setting_wireless_get_bssid (setting),
+	                      ARPHRD_ETHER, priv->bssid);
 	g_signal_connect_swapped (priv->bssid, "changed", G_CALLBACK (ce_page_changed), self);
 
 	/* Device MAC address */
-	ce_page_mac_to_entry (nm_setting_wireless_get_mac_address (setting), priv->device_mac);
+	ce_page_mac_to_entry (nm_setting_wireless_get_mac_address (setting),
+	                      ARPHRD_ETHER, priv->device_mac);
 	g_signal_connect_swapped (priv->device_mac, "changed", G_CALLBACK (ce_page_changed), self);
 
 	/* Cloned MAC address */
-	ce_page_mac_to_entry (nm_setting_wireless_get_cloned_mac_address (setting), priv->cloned_mac);
+	ce_page_mac_to_entry (nm_setting_wireless_get_cloned_mac_address (setting),
+	                      ARPHRD_ETHER, priv->cloned_mac);
 	g_signal_connect_swapped (priv->cloned_mac, "changed", G_CALLBACK (ce_page_changed), self);
 
 	gtk_spin_button_set_value (priv->rate, (gdouble) nm_setting_wireless_get_rate (setting));
@@ -478,9 +481,9 @@ ui_to_setting (CEPageWireless *self)
 		break;
 	}
 
-	bssid = ce_page_entry_to_mac (priv->bssid, NULL);
-	device_mac = ce_page_entry_to_mac (priv->device_mac, NULL);
-	cloned_mac = ce_page_entry_to_mac (priv->cloned_mac, NULL);
+	bssid = ce_page_entry_to_mac (priv->bssid, ARPHRD_ETHER, NULL);
+	device_mac = ce_page_entry_to_mac (priv->device_mac, ARPHRD_ETHER, NULL);
+	cloned_mac = ce_page_entry_to_mac (priv->cloned_mac, ARPHRD_ETHER, NULL);
 
 	g_object_set (priv->setting,
 				  NM_SETTING_WIRELESS_SSID, ssid,
@@ -515,19 +518,19 @@ validate (CEPage *page, NMConnection *connection, GError **error)
 	gboolean invalid = FALSE;
 	GByteArray *ignore;
 
-	ignore = ce_page_entry_to_mac (priv->bssid, &invalid);
+	ignore = ce_page_entry_to_mac (priv->bssid, ARPHRD_ETHER, &invalid);
 	if (invalid)
 		return FALSE;
 	if (ignore)
 		g_byte_array_free (ignore, TRUE);
 
-	ignore = ce_page_entry_to_mac (priv->device_mac, &invalid);
+	ignore = ce_page_entry_to_mac (priv->device_mac, ARPHRD_ETHER, &invalid);
 	if (invalid)
 		return FALSE;
 	if (ignore)
 		g_byte_array_free (ignore, TRUE);
 
-	ignore = ce_page_entry_to_mac (priv->cloned_mac, &invalid);
+	ignore = ce_page_entry_to_mac (priv->cloned_mac, ARPHRD_ETHER, &invalid);
 	if (invalid)
 		return FALSE;
 	if (ignore)
