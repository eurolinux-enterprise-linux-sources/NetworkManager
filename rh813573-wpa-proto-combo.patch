diff -up NetworkManager-0.8.1/network-manager-applet-0.8.1/nm-applet.schemas.in.foo NetworkManager-0.8.1/network-manager-applet-0.8.1/nm-applet.schemas.in
--- NetworkManager-0.8.1/network-manager-applet-0.8.1/nm-applet.schemas.in.foo	2012-06-21 16:28:53.310196065 -0500
+++ NetworkManager-0.8.1/network-manager-applet-0.8.1/nm-applet.schemas.in	2012-06-21 16:28:53.965961256 -0500
@@ -70,6 +70,19 @@
         </long>
       </locale>
     </schema>
+    <schema>
+      <key>/schemas/apps/nm-applet/wifi-show-wpa-protocol-combo</key>
+      <applyto>/apps/nm-applet/wifi-show-wpa-protocol-combo</applyto>
+      <owner>nm-applet</owner>
+      <type>bool</type>
+      <default>FALSE</default>
+      <locale name="C">
+        <short>Show WPA protocol chooser widget</short>
+        <long>
+          Set to TRUE to show the WPA protocol chooser when editing connections.
+        </long>
+      </locale>
+    </schema>
 
   </schemalist>
 </gconfschemafile>
diff -up NetworkManager-0.8.1/network-manager-applet-0.8.1/src/applet.glade.wpa-proto-combo NetworkManager-0.8.1/network-manager-applet-0.8.1/src/applet.glade
--- NetworkManager-0.8.1/network-manager-applet-0.8.1/src/applet.glade.wpa-proto-combo	2012-06-21 17:27:31.435043808 -0500
+++ NetworkManager-0.8.1/network-manager-applet-0.8.1/src/applet.glade	2012-06-21 19:02:54.415300940 -0500
@@ -697,12 +697,12 @@ Shared Key</property>
               </packing>
             </child>
             <child>
-              <widget class="GtkLabel" id="wpa_psk_type_label">
+              <widget class="GtkLabel" id="wpa_psk_proto_label">
                 <property name="visible">True</property>
                 <property name="xalign">0</property>
-                <property name="label" translatable="yes">_Type:</property>
+                <property name="label" translatable="yes">WPA Protocol:</property>
                 <property name="use_underline">True</property>
-                <property name="mnemonic_widget">wpa_psk_type_combo</property>
+                <property name="mnemonic_widget">wpa_psk_proto_combo</property>
               </widget>
               <packing>
                 <property name="top_attach">2</property>
@@ -742,7 +742,7 @@ Shared Key</property>
               </packing>
             </child>
             <child>
-              <widget class="GtkComboBox" id="wpa_psk_type_combo">
+              <widget class="GtkComboBox" id="wpa_psk_proto_combo">
                 <property name="visible">True</property>
                 <property name="items" translatable="yes"></property>
               </widget>
@@ -779,7 +779,7 @@ Shared Key</property>
         <child>
           <widget class="GtkTable" id="wpa_eap_table">
             <property name="visible">True</property>
-            <property name="n_rows">2</property>
+            <property name="n_rows">3</property>
             <property name="n_columns">2</property>
             <property name="column_spacing">12</property>
             <property name="row_spacing">6</property>
@@ -817,9 +817,36 @@ Shared Key</property>
               </widget>
               <packing>
                 <property name="right_attach">2</property>
+                <property name="top_attach">2</property>
+                <property name="bottom_attach">3</property>
+                <property name="x_options">GTK_FILL</property>
+              </packing>
+            </child>
+            <child>
+              <widget class="GtkLabel" id="wpa_eap_proto_label">
+                <property name="visible">True</property>
+                <property name="xalign">0</property>
+                <property name="label" translatable="yes">WPA Protocol:</property>
+                <property name="mnemonic_widget">wpa_eap_proto_combo</property>
+              </widget>
+              <packing>
                 <property name="top_attach">1</property>
                 <property name="bottom_attach">2</property>
                 <property name="x_options">GTK_FILL</property>
+                <property name="y_options"></property>
+              </packing>
+            </child>
+            <child>
+              <widget class="GtkComboBox" id="wpa_eap_proto_combo">
+                <property name="visible">True</property>
+                <property name="items" translatable="yes"></property>
+              </widget>
+              <packing>
+                <property name="left_attach">1</property>
+                <property name="right_attach">2</property>
+                <property name="top_attach">1</property>
+                <property name="bottom_attach">2</property>
+                <property name="y_options">GTK_FILL</property>
               </packing>
             </child>
           </widget>
diff -up NetworkManager-0.8.1/network-manager-applet-0.8.1/src/gconf-helpers/gconf-helpers.c.foo NetworkManager-0.8.1/network-manager-applet-0.8.1/src/gconf-helpers/gconf-helpers.c
--- NetworkManager-0.8.1/network-manager-applet-0.8.1/src/gconf-helpers/gconf-helpers.c.foo	2012-06-21 16:28:53.531961046 -0500
+++ NetworkManager-0.8.1/network-manager-applet-0.8.1/src/gconf-helpers/gconf-helpers.c	2012-06-21 16:28:53.968961046 -0500
@@ -2815,3 +2815,15 @@ nm_gconf_set_8021x_password_always_ask (
 	g_object_unref (client);
 }
 
+gboolean
+nm_gconf_get_wpa_show_proto (void)
+{
+	GConfClient *client;
+	gboolean show = FALSE;
+
+	client = gconf_client_get_default ();
+	show = gconf_client_get_bool (client, "/apps/nm-applet/wifi-show-wpa-protocol-combo", NULL);
+	g_object_unref (client);
+	return show;
+}
+
diff -up NetworkManager-0.8.1/network-manager-applet-0.8.1/src/gconf-helpers/gconf-helpers.h.foo NetworkManager-0.8.1/network-manager-applet-0.8.1/src/gconf-helpers/gconf-helpers.h
--- NetworkManager-0.8.1/network-manager-applet-0.8.1/src/gconf-helpers/gconf-helpers.h.foo	2010-08-09 10:35:41.000000000 -0500
+++ NetworkManager-0.8.1/network-manager-applet-0.8.1/src/gconf-helpers/gconf-helpers.h	2012-06-21 16:28:53.969960418 -0500
@@ -277,5 +277,7 @@ void nm_gconf_set_ignore_ca_cert (const 
 gboolean nm_gconf_get_8021x_password_always_ask (const char *uuid);
 void nm_gconf_set_8021x_password_always_ask (const char *uuid, gboolean always_ask);
 
+gboolean nm_gconf_get_wpa_show_proto (void);
+
 #endif	/* GCONF_HELPERS_H */
 
diff -up NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/wireless-security.c.foo NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/wireless-security.c
--- NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/wireless-security.c.foo	2012-06-21 16:28:53.959946798 -0500
+++ NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/wireless-security.c	2012-06-21 16:56:12.612952666 -0500
@@ -34,6 +34,7 @@
 
 #include "wireless-security.h"
 #include "eap-method.h"
+#include "gconf-helpers.h"
 
 GType
 wireless_security_get_g_type (void)
@@ -194,30 +195,6 @@ wireless_security_clear_ciphers (NMConne
 }
 
 void
-wireless_security_copy_proto_and_ciphers (NMSettingWirelessSecurity *src,
-                                          NMSettingWirelessSecurity *dst)
-{
-	guint32 i;
-
-	g_return_if_fail (dst != NULL);
-
-	if (!src)
-		return;
-
-	/* Protocol: WPA or WPA2/RSN */
-	for (i = 0; i < nm_setting_wireless_security_get_num_protos (src); i++)
-		nm_setting_wireless_security_add_proto (dst, nm_setting_wireless_security_get_proto (src, i));
-
-	/* Pairwise ciphers */
-	for (i = 0; i < nm_setting_wireless_security_get_num_pairwise (src); i++)
-		nm_setting_wireless_security_add_pairwise (dst, nm_setting_wireless_security_get_pairwise (src, i));
-
-	/* Group ciphers */
-	for (i = 0; i < nm_setting_wireless_security_get_num_groups (src); i++)
-		nm_setting_wireless_security_add_group (dst, nm_setting_wireless_security_get_group (src, i));
-}
-
-void
 ws_802_1x_add_to_size_group (WirelessSecurity *sec,
                              GtkSizeGroup *size_group,
                              const char *label_name,
@@ -501,3 +478,129 @@ ws_802_1x_nag_user (WirelessSecurity *se
 	return eap_method_nag_user (eap);
 }
 
+#define PROTO_NAME_COLUMN 0
+#define PROTO_VAL_COLUMN  1
+
+#define PROTO_AUTO 0
+#define PROTO_WPA  1
+#define PROTO_RSN  2
+
+GtkWidget *
+ws_wpa_proto_combo_init (WirelessSecurity *sec,
+                         const char *label_name,
+                         const char *combo_name,
+                         GCallback combo_changed_cb,
+                         NMConnection *connection)
+{
+	GtkWidget *combo, *label;
+	GtkListStore *model;
+	GtkTreeIter iter;
+	int active = -1, item = 0;
+	gboolean wpa = TRUE, rsn = TRUE, visible;
+
+	if (connection) {
+		NMSettingWirelessSecurity *s_wsec;
+		guint32 num, i;
+
+		/* check for existing WPA protocols */
+		s_wsec = (NMSettingWirelessSecurity *) nm_connection_get_setting (connection, NM_TYPE_SETTING_WIRELESS_SECURITY);
+		if (s_wsec) {
+			num = nm_setting_wireless_security_get_num_protos (s_wsec);
+			if (num) {
+				for (i = 0, wpa = FALSE, rsn = FALSE; i < num; i++) {
+					const char *proto = nm_setting_wireless_security_get_proto (s_wsec, i);
+
+					if (g_strcmp0 (proto, "wpa") == 0)
+						wpa = TRUE;
+					else if (g_strcmp0 (proto, "rsn") == 0)
+						rsn = TRUE;
+				}
+			}
+		}
+	}
+	g_assert (wpa || rsn);
+
+	model = gtk_list_store_new (2, G_TYPE_STRING, G_TYPE_UINT);
+
+	gtk_list_store_append (model, &iter);
+	gtk_list_store_set (model, &iter,
+	                    PROTO_NAME_COLUMN, "Auto",
+	                    PROTO_VAL_COLUMN, PROTO_AUTO,
+	                    -1);
+	if (wpa && rsn)
+		active = item;
+	item++;
+
+	gtk_list_store_append (model, &iter);
+	gtk_list_store_set (model, &iter,
+	                    PROTO_NAME_COLUMN, _("WPA Only"),
+	                    PROTO_VAL_COLUMN, PROTO_WPA,
+	                    -1);
+	if (wpa && !rsn)
+		active = item;
+	item++;
+
+	gtk_list_store_append (model, &iter);
+	gtk_list_store_set (model, &iter,
+	                    PROTO_NAME_COLUMN, _("WPA2/RSN Only"),
+	                    PROTO_VAL_COLUMN, PROTO_RSN,
+	                    -1);
+	if (rsn && !wpa)
+		active = item;
+
+	visible = nm_gconf_get_wpa_show_proto ();
+
+	combo = glade_xml_get_widget (sec->xml, combo_name);
+	g_assert (combo);
+
+	gtk_combo_box_set_model (GTK_COMBO_BOX (combo), GTK_TREE_MODEL (model));
+	g_object_unref (G_OBJECT (model));
+	gtk_combo_box_set_active (GTK_COMBO_BOX (combo), active < 0 ? 0 : (guint32) active);
+
+	g_signal_connect (G_OBJECT (combo), "changed", combo_changed_cb, sec);
+
+	label = glade_xml_get_widget (sec->xml, label_name);
+	g_assert (label);
+	gtk_widget_set_visible (label, visible);
+
+	return combo;
+}
+
+void
+ws_wpa_proto_fill_connection (WirelessSecurity *sec,
+                              const char *combo_name,
+                              NMConnection *connection,
+                              NMSettingWirelessSecurity *src)
+{
+	GtkWidget *widget;
+	NMSettingWirelessSecurity *s_wsec;
+	GtkTreeModel *model;
+	GtkTreeIter iter;
+	guint32 proto = PROTO_AUTO, i;
+
+	s_wsec = (NMSettingWirelessSecurity *) nm_connection_get_setting (connection, NM_TYPE_SETTING_WIRELESS_SECURITY);
+	g_return_if_fail (s_wsec != NULL);
+
+	widget = glade_xml_get_widget (sec->xml, combo_name);
+	model = gtk_combo_box_get_model (GTK_COMBO_BOX (widget));
+	gtk_combo_box_get_active_iter (GTK_COMBO_BOX (widget), &iter);
+	gtk_tree_model_get (model, &iter, PROTO_VAL_COLUMN, &proto, -1);
+
+	nm_setting_wireless_security_clear_protos (s_wsec);
+	if (proto == PROTO_WPA)
+		nm_setting_wireless_security_add_proto (s_wsec, "wpa");
+	else if (proto == PROTO_RSN)
+		nm_setting_wireless_security_add_proto (s_wsec, "rsn");
+
+	/* Copy ciphers from an original setting to the current one */
+	if (src) {
+		/* Pairwise ciphers */
+		for (i = 0; i < nm_setting_wireless_security_get_num_pairwise (src); i++)
+			nm_setting_wireless_security_add_pairwise (s_wsec, nm_setting_wireless_security_get_pairwise (src, i));
+
+		/* Group ciphers */
+		for (i = 0; i < nm_setting_wireless_security_get_num_groups (src); i++)
+			nm_setting_wireless_security_add_group (s_wsec, nm_setting_wireless_security_get_group (src, i));
+	}
+}
+
diff -up NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/wireless-security.h.foo NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/wireless-security.h
--- NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/wireless-security.h.foo	2012-06-21 16:28:53.960946589 -0500
+++ NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/wireless-security.h	2012-06-21 16:28:53.970960906 -0500
@@ -107,8 +107,16 @@ void wireless_security_changed_cb (GtkWi
 
 void wireless_security_clear_ciphers (NMConnection *connection);
 
-void wireless_security_copy_proto_and_ciphers (NMSettingWirelessSecurity *src,
-                                               NMSettingWirelessSecurity *dst);
+GtkWidget *ws_wpa_proto_combo_init (WirelessSecurity *sec,
+                                    const char *label_name,
+                                    const char *combo_name,
+                                    GCallback auth_combo_changed_cb,
+                                    NMConnection *connection);
+
+void ws_wpa_proto_fill_connection (WirelessSecurity *sec,
+                                   const char *combo_name,
+                                   NMConnection *connection,
+                                   NMSettingWirelessSecurity *src);
 
 #define AUTH_NAME_COLUMN   0
 #define AUTH_METHOD_COLUMN 1
diff -up NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/ws-wpa-eap.c.foo NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/ws-wpa-eap.c
--- NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/ws-wpa-eap.c.foo	2012-06-21 16:28:53.960946589 -0500
+++ NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/ws-wpa-eap.c	2012-06-21 16:28:53.971960348 -0500
@@ -76,11 +76,7 @@ fill_connection (WirelessSecurity *paren
 
 	g_object_set (s_wireless_sec, NM_SETTING_WIRELESS_SECURITY_KEY_MGMT, "wpa-eap", NULL);
 
-	/* Re-apply protocols and ciphers from original connection since
-	 * ws_802_1x_fill_connection() clears them when recreating the wireless
-	 * security setting.
-	 */
-	wireless_security_copy_proto_and_ciphers (sec->orig_wsec, s_wireless_sec);
+	ws_wpa_proto_fill_connection (parent, "wpa_eap_proto_combo", connection, sec->orig_wsec);
 }
 
 static void
@@ -160,6 +156,13 @@ ws_wpa_eap_new (const char *glade_file,
 	if (s_wsec)
 		sec->orig_wsec = (NMSettingWirelessSecurity *) nm_setting_duplicate (NM_SETTING (s_wsec));
 
+	widget = ws_wpa_proto_combo_init (WIRELESS_SECURITY (sec),
+	                                  "wpa_eap_proto_label",
+	                                  "wpa_eap_proto_combo",
+	                                  (GCallback) wireless_security_changed_cb,
+	                                  connection);
+	wireless_security_changed_cb (widget, (gpointer) sec);
+
 	return sec;
 }
 
diff -up NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/ws-wpa-psk.c.foo NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/ws-wpa-psk.c
--- NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/ws-wpa-psk.c.foo	2012-06-21 16:28:53.961945890 -0500
+++ NetworkManager-0.8.1/network-manager-applet-0.8.1/src/wireless-security/ws-wpa-psk.c	2012-06-21 16:28:53.971960348 -0500
@@ -137,12 +137,7 @@ fill_connection (WirelessSecurity *paren
 		nm_setting_wireless_security_add_group (s_wireless_sec, "tkip");
 	} else {
 		g_object_set (s_wireless_sec, NM_SETTING_WIRELESS_SECURITY_KEY_MGMT, "wpa-psk", NULL);
-
-		/* Re-apply protocols and ciphers from original connection since
-		 * ws_802_1x_fill_connection() clears them when recreating the wireless
-		 * security setting.
-		 */
-		wireless_security_copy_proto_and_ciphers (sec->orig_wsec, s_wireless_sec);
+		ws_wpa_proto_fill_connection (parent, "wpa_psk_proto_combo", connection, sec->orig_wsec);
 	}
 }
 
@@ -209,13 +204,12 @@ ws_wpa_psk_new (const char *glade_file, 
 	                  (GCallback) show_toggled_cb,
 	                  sec);
 
-	widget = glade_xml_get_widget (xml, "wpa_psk_type_combo");
-	g_assert (widget);
-	gtk_widget_hide (widget);
-
-	widget = glade_xml_get_widget (xml, "wpa_psk_type_label");
-	g_assert (widget);
-	gtk_widget_hide (widget);
+	widget = ws_wpa_proto_combo_init (WIRELESS_SECURITY (sec),
+	                                  "wpa_psk_proto_label",
+	                                  "wpa_psk_proto_combo",
+	                                  (GCallback) wireless_security_changed_cb,
+	                                  connection);
+	wireless_security_changed_cb (widget, (gpointer) sec);
 
 	return sec;
 }

diff -up NetworkManager-0.8.1/network-manager-applet-0.8.1/src/applet-device-wifi.c.foo NetworkManager-0.8.1/network-manager-applet-0.8.1/src/applet-device-wifi.c
--- NetworkManager-0.8.1/network-manager-applet-0.8.1/src/applet-device-wifi.c.foo	2012-06-21 22:34:36.482228915 -0500
+++ NetworkManager-0.8.1/network-manager-applet-0.8.1/src/applet-device-wifi.c	2012-06-21 22:34:39.692479418 -0500
@@ -182,28 +182,6 @@ is_manufacturer_default_ssid (const GByt
 	return FALSE;
 }
 
-static void
-add_ciphers_from_flags (NMSettingWirelessSecurity *sec,
-                        guint32 flags,
-                        gboolean pairwise)
-{
-	if (pairwise) {
-		if (flags & NM_802_11_AP_SEC_PAIR_TKIP)
-			nm_setting_wireless_security_add_pairwise (sec, "tkip");
-		if (flags & NM_802_11_AP_SEC_PAIR_CCMP)
-			nm_setting_wireless_security_add_pairwise (sec, "ccmp");
-	} else {
-		if (flags & NM_802_11_AP_SEC_GROUP_WEP40)
-			nm_setting_wireless_security_add_group (sec, "wep40");
-		if (flags & NM_802_11_AP_SEC_GROUP_WEP104)
-			nm_setting_wireless_security_add_group (sec, "wep104");
-		if (flags & NM_802_11_AP_SEC_GROUP_TKIP)
-			nm_setting_wireless_security_add_group (sec, "tkip");
-		if (flags & NM_802_11_AP_SEC_GROUP_CCMP)
-			nm_setting_wireless_security_add_group (sec, "ccmp");
-	}
-}
-
 static NMSettingWirelessSecurity *
 get_security_for_ap (NMAccessPoint *ap,
                      guint32 dev_caps,
@@ -215,6 +193,7 @@ get_security_for_ap (NMAccessPoint *ap,
 	guint32 flags;
 	guint32 wpa_flags;
 	guint32 rsn_flags;
+	gboolean rsn_psk, wpa_psk, rsn_eap, wpa_eap;
 
 	g_return_val_if_fail (NM_IS_ACCESS_POINT (ap), NULL);
 	g_return_val_if_fail (supported != NULL, NULL);
@@ -268,48 +247,37 @@ get_security_for_ap (NMAccessPoint *ap,
 		goto none;
 	}
 
-	/* WPA2 PSK first */
-	if (   (rsn_flags & NM_802_11_AP_SEC_KEY_MGMT_PSK)
-	    && (dev_caps & NM_WIFI_DEVICE_CAP_RSN)) {
+	/* WPA & RSN PSK */
+	rsn_psk = ((rsn_flags & NM_802_11_AP_SEC_KEY_MGMT_PSK) && (dev_caps & NM_WIFI_DEVICE_CAP_RSN));
+	wpa_psk = ((wpa_flags & NM_802_11_AP_SEC_KEY_MGMT_PSK) && (dev_caps & NM_WIFI_DEVICE_CAP_WPA));
+	if (rsn_psk || wpa_psk) {
 		g_object_set (sec, NM_SETTING_WIRELESS_SECURITY_KEY_MGMT, "wpa-psk", NULL);
-		nm_setting_wireless_security_add_proto (sec, "rsn");
-		add_ciphers_from_flags (sec, rsn_flags, TRUE);
-		add_ciphers_from_flags (sec, rsn_flags, FALSE);
-		return sec;
-	}
 
-	/* WPA PSK */
-	if (   (wpa_flags & NM_802_11_AP_SEC_KEY_MGMT_PSK)
-	    && (dev_caps & NM_WIFI_DEVICE_CAP_WPA)) {
-		g_object_set (sec, NM_SETTING_WIRELESS_SECURITY_KEY_MGMT, "wpa-psk", NULL);
-		nm_setting_wireless_security_add_proto (sec, "wpa");
-		add_ciphers_from_flags (sec, wpa_flags, TRUE);
-		add_ciphers_from_flags (sec, wpa_flags, FALSE);
+		/* Leave default protocol and ciphers unless RSN is supported, in
+		 * which case we refuse WEP.
+		 */
+		if (rsn_psk) {
+			nm_setting_wireless_security_add_group (sec, "tkip");
+			nm_setting_wireless_security_add_group (sec, "ccmp");
+		}
 		return sec;
 	}
 
-	/* WPA2 Enterprise */
-	if (   (rsn_flags & NM_802_11_AP_SEC_KEY_MGMT_802_1X)
-	    && (dev_caps & NM_WIFI_DEVICE_CAP_RSN)) {
+	/* WPA & RSN Enterprise */
+	rsn_eap = ((rsn_flags & NM_802_11_AP_SEC_KEY_MGMT_802_1X) && (dev_caps & NM_WIFI_DEVICE_CAP_RSN));
+	wpa_eap = ((wpa_flags & NM_802_11_AP_SEC_KEY_MGMT_802_1X) && (dev_caps & NM_WIFI_DEVICE_CAP_WPA));
+	if (rsn_eap || wpa_eap) {
 		g_object_set (sec, NM_SETTING_WIRELESS_SECURITY_KEY_MGMT, "wpa-eap", NULL);
-		nm_setting_wireless_security_add_proto (sec, "rsn");
-		add_ciphers_from_flags (sec, rsn_flags, TRUE);
-		add_ciphers_from_flags (sec, rsn_flags, FALSE);
-
-		*s_8021x = NM_SETTING_802_1X (nm_setting_802_1x_new ());
-		nm_setting_802_1x_add_eap_method (*s_8021x, "ttls");
-		g_object_set (*s_8021x, NM_SETTING_802_1X_PHASE2_AUTH, "mschapv2", NULL);
-		return sec;
-	}
 
-	/* WPA Enterprise */
-	if (   (wpa_flags & NM_802_11_AP_SEC_KEY_MGMT_802_1X)
-	    && (dev_caps & NM_WIFI_DEVICE_CAP_WPA)) {
-		g_object_set (sec, NM_SETTING_WIRELESS_SECURITY_KEY_MGMT, "wpa-eap", NULL);
-		nm_setting_wireless_security_add_proto (sec, "wpa");
-		add_ciphers_from_flags (sec, wpa_flags, TRUE);
-		add_ciphers_from_flags (sec, wpa_flags, FALSE);
+		/* Leave default protocol and ciphers unless RSN is supported, in
+		 * which case we refuse WEP.
+		 */
+		if (rsn_eap) {
+			nm_setting_wireless_security_add_group (sec, "tkip");
+			nm_setting_wireless_security_add_group (sec, "ccmp");
+		}
 
+		/* Default to TTLS/MSCHAPv2 */
 		*s_8021x = NM_SETTING_802_1X (nm_setting_802_1x_new ());
 		nm_setting_802_1x_add_eap_method (*s_8021x, "ttls");
 		g_object_set (*s_8021x, NM_SETTING_802_1X_PHASE2_AUTH, "mschapv2", NULL);
