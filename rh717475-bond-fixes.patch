--- NetworkManager-0.8.1/system-settings/plugins/ifcfg-rh/reader.c.bond-fixes	2012-09-14 09:00:39.171928827 -0400
+++ NetworkManager-0.8.1/system-settings/plugins/ifcfg-rh/reader.c	2012-09-14 09:51:08.592899279 -0400
@@ -3382,6 +3382,7 @@
 	NMConnection *connection = NULL;
 	NMSetting *con_setting = NULL;
 	NMSetting *infiniband_setting = NULL;
+	char *value;
 
 	g_return_val_if_fail (file != NULL, NULL);
 	g_return_val_if_fail (ifcfg != NULL, NULL);
@@ -3402,6 +3403,15 @@
 	}
 	nm_connection_add_setting (connection, con_setting);
 
+	/* Might be a bond slave; handle master device or connection */
+	value = svGetValue (ifcfg, "MASTER", FALSE);
+	if (value) {
+		g_object_set (con_setting, NM_SETTING_CONNECTION_MASTER, value, NULL);
+		g_object_set (con_setting, NM_SETTING_CONNECTION_SLAVE_TYPE,
+		              NM_SETTING_BOND_SETTING_NAME, NULL);
+		g_free (value);
+	}
+
 	infiniband_setting = make_infiniband_setting (ifcfg, file, nm_controlled, unmanaged, error);
 	if (!infiniband_setting) {
 		g_object_unref (connection);
@@ -3583,21 +3593,6 @@
 }
 
 static gboolean
-disabling_ip4_config_allowed (NMConnection *connection)
-{
-	NMSettingConnection *s_con;
-
-	s_con = nm_connection_get_setting_connection (connection);
-	g_assert (s_con);
-
-	/* bonding slaves are allowed to have no ip configuration */
-	if (nm_setting_connection_is_slave_type (s_con, NM_SETTING_BOND_SETTING_NAME))
-		return TRUE;
-
-	return FALSE;
-}
-
-static gboolean
 is_bond_device (const char *name, shvarFile *parsed)
 {
 	g_return_val_if_fail (name != NULL, FALSE);
@@ -4003,6 +3998,9 @@
 		g_object_unref (connection);
 		connection = NULL;
 		goto done;
+	} else if (s_ip6 && utils_ignore_ip_config (connection)) {
+		PLUGIN_WARN (IFCFG_PLUGIN_NAME, "    warning: ignoring IP6 configuration");
+		g_object_unref (s_ip6);
 	} else if (s_ip6) {
 		const char *method;
 
@@ -4012,14 +4010,14 @@
 			can_disable_ip4 = TRUE;
 	}
 
-	if (disabling_ip4_config_allowed (connection))
-		can_disable_ip4 = TRUE;
-
 	s_ip4 = make_ip4_setting (parsed, network_file, iscsiadm_path, can_disable_ip4, &error);
 	if (error) {
 		g_object_unref (connection);
 		connection = NULL;
 		goto done;
+	} else if (s_ip4 && utils_ignore_ip_config (connection)) {
+		PLUGIN_WARN (IFCFG_PLUGIN_NAME, "    warning: ignoring IP4 configuration");
+		g_object_unref (s_ip4);
 	} else if (s_ip4)
 		nm_connection_add_setting (connection, s_ip4);
 
--- NetworkManager-0.8.1/system-settings/plugins/ifcfg-rh/tests/network-scripts/ifcfg-test-bond-slave.bond-fixes	2012-09-13 11:22:34.528881710 -0400
+++ NetworkManager-0.8.1/system-settings/plugins/ifcfg-rh/tests/network-scripts/ifcfg-test-bond-slave	2012-09-13 15:56:35.231721278 -0400
@@ -2,3 +2,5 @@
 HWADDR=00:22:15:59:62:97
 ONBOOT=no
 MASTER=bond0
+# This should be ignored
+BOOTPROTO=dhcp
--- NetworkManager-0.8.1/system-settings/plugins/ifcfg-rh/tests/test-ifcfg-rh.c.bond-fixes	2012-09-13 11:22:34.692881709 -0400
+++ NetworkManager-0.8.1/system-settings/plugins/ifcfg-rh/tests/test-ifcfg-rh.c	2012-09-13 15:56:41.753721215 -0400
@@ -10604,8 +10604,6 @@
 	NMConnection *reread;
 	NMSettingConnection *s_con;
 	NMSettingWired *s_wired;
-	NMSettingIP4Config *s_ip4;
-	NMSettingIP6Config *s_ip6;
 	static unsigned char tmpmac[] = { 0x31, 0x33, 0x33, 0x37, 0xbe, 0xcd };
 	GByteArray *mac;
 	guint32 mtu = 1492;
@@ -10657,29 +10655,6 @@
 	              NULL);
 	g_byte_array_free (mac, TRUE);
 
-	/* IP4 setting */
-	s_ip4 = (NMSettingIP4Config *) nm_setting_ip4_config_new ();
-	ASSERT (s_ip4 != NULL,
-			"bond-slave-write", "failed to allocate new %s setting",
-			NM_SETTING_IP4_CONFIG_SETTING_NAME);
-	nm_connection_add_setting (connection, NM_SETTING (s_ip4));
-
-	g_object_set (s_ip4,
-	              NM_SETTING_IP4_CONFIG_METHOD, NM_SETTING_IP4_CONFIG_METHOD_DISABLED,
-	              NULL);
-
-	/* IP6 setting */
-	s_ip6 = (NMSettingIP6Config *) nm_setting_ip6_config_new ();
-	ASSERT (s_ip6 != NULL,
-	        "bond-slave-write", "failed to allocate new %s setting",
-	        NM_SETTING_IP6_CONFIG_SETTING_NAME);
-	nm_connection_add_setting (connection, NM_SETTING (s_ip6));
-
-	g_object_set (s_ip6,
-	              NM_SETTING_IP6_CONFIG_METHOD, NM_SETTING_IP6_CONFIG_METHOD_IGNORE,
-	              NM_SETTING_IP6_CONFIG_MAY_FAIL, TRUE,
-	              NULL);
-
 	ASSERT (nm_connection_verify (connection, &error) == TRUE,
 	        "bond-slave-write", "failed to verify connection: %s",
 	        (error && error->message) ? error->message : "(unknown)");
--- NetworkManager-0.8.1/system-settings/plugins/ifcfg-rh/utils.c.bond-fixes	2010-08-09 14:22:51.000000000 -0400
+++ NetworkManager-0.8.1/system-settings/plugins/ifcfg-rh/utils.c	2012-09-13 15:59:55.065719329 -0400
@@ -338,3 +338,19 @@
 	return ret;
 }
 
+gboolean
+utils_ignore_ip_config (NMConnection *connection)
+{
+	NMSettingConnection *s_con;
+
+	s_con = nm_connection_get_setting_connection (connection);
+	g_assert (s_con);
+
+	/* bonding slaves have no IP configuration, and the system
+	 * scripts just ignore it if it's there.
+	 */
+	if (nm_setting_connection_is_slave_type (s_con, NM_SETTING_BOND_SETTING_NAME))
+		return TRUE;
+
+	return FALSE;
+}
--- NetworkManager-0.8.1/system-settings/plugins/ifcfg-rh/utils.h.bond-fixes	2010-08-06 14:59:06.000000000 -0400
+++ NetworkManager-0.8.1/system-settings/plugins/ifcfg-rh/utils.h	2012-09-13 16:02:31.247717804 -0400
@@ -22,6 +22,7 @@
 #define _UTILS_H_
 
 #include <glib.h>
+#include <nm-connection.h>
 #include "shvar.h"
 #include "common.h"
 
@@ -47,5 +48,7 @@
 
 gboolean utils_has_route_file_new_syntax (const char *filename);
 
+gboolean utils_ignore_ip_config (NMConnection *connection);
+
 #endif  /* _UTILS_H_ */
 
--- NetworkManager-0.8.1/system-settings/plugins/ifcfg-rh/writer.c.bond-fixes	2012-09-13 11:22:34.000000000 -0400
+++ NetworkManager-0.8.1/system-settings/plugins/ifcfg-rh/writer.c	2012-09-13 16:02:12.165717991 -0400
@@ -1813,13 +1813,15 @@
 			goto out;
 	}
 
-	if (!write_ip4_setting (connection, ifcfg, error))
-		goto out;
-
-	s_ip6 = (NMSettingIP6Config *) nm_connection_get_setting (connection, NM_TYPE_SETTING_IP6_CONFIG);
-	if (s_ip6) {
-		if (!write_ip6_setting (connection, ifcfg, error))
+	if (!utils_ignore_ip_config (connection)) {
+		if (!write_ip4_setting (connection, ifcfg, error))
 			goto out;
+
+		s_ip6 = (NMSettingIP6Config *) nm_connection_get_setting (connection, NM_TYPE_SETTING_IP6_CONFIG);
+		if (s_ip6) {
+			if (!write_ip6_setting (connection, ifcfg, error))
+				goto out;
+		}
 	}
 
 	write_connection_setting (s_con, ifcfg);
