diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/po/POTFILES.in NetworkManager-0.8.1-b/network-manager-applet-0.8.1/po/POTFILES.in
index 0d6f39b..5d5788c 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/po/POTFILES.in
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/po/POTFILES.in
@@ -26,6 +26,7 @@ src/connection-editor/ce-page.c
 [type: gettext/glade]src/connection-editor/ce-vpn-wizard.ui
 src/connection-editor/ip4-routes-dialog.c
 src/connection-editor/ip6-routes-dialog.c
+src/connection-editor/new-connection.c
 src/connection-editor/page-dsl.c
 src/connection-editor/page-ip4.c
 src/connection-editor/page-ip6.c
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/Makefile.am NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/Makefile.am
index 71928c8..e9b263a 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/Makefile.am
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/Makefile.am
@@ -58,7 +58,9 @@ nm_connection_editor_SOURCES = \
 	ppp-auth-methods-dialog.c \
 	ppp-auth-methods-dialog.h \
 	ce-polkit-button.c \
-	ce-polkit-button.h
+	ce-polkit-button.h \
+	new-connection.c \
+	new-connection.h
 
 nm-connection-editor-service-glue.h: $(top_srcdir)/src/connection-editor/nm-connection-editor-service.xml
 	$(AM_V_GEN) dbus-binding-tool --prefix=nm_connection_editor_service --mode=glib-server --output=$@ $<
@@ -79,6 +81,7 @@ gladedir = $(datadir)/nm-applet
 uidir = $(datadir)/nm-applet
 ui_DATA = \
 	nm-connection-editor.ui \
+	ce-new-connection.ui \
 	ce-page-wired.ui \
 	ce-page-wireless.ui \
 	ce-page-wireless-security.ui \
@@ -86,8 +89,7 @@ ui_DATA = \
 	ce-page-ip6.ui \
 	ce-page-dsl.ui \
 	ce-page-mobile.ui \
-	ce-page-ppp.ui \
-	ce-vpn-wizard.ui
+	ce-page-ppp.ui
 
 BUILT_SOURCES = nm-connection-editor-service-glue.h
 
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/ce-new-connection.ui NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/ce-new-connection.ui
new file mode 100644
index 0000000..8322671
--- /dev/null
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/ce-new-connection.ui
@@ -0,0 +1,183 @@
+<?xml version="1.0"?>
+<interface>
+  <requires lib="gtk+" version="2.16"/>
+  <!-- interface-naming-policy toplevel-contextual -->
+  <object class="GtkDialog" id="new_connection_type_dialog">
+    <property name="border_width">5</property>
+    <property name="title" translatable="yes"> </property>
+    <property name="resizable">False</property>
+    <property name="modal">True</property>
+    <property name="window_position">center-always</property>
+    <property name="icon_name">gtk-dialog-question</property>
+    <property name="type_hint">dialog</property>
+    <property name="has_separator">False</property>
+    <child internal-child="vbox">
+      <object class="GtkVBox" id="vbox2">
+        <property name="visible">True</property>
+        <property name="orientation">vertical</property>
+        <property name="spacing">2</property>
+        <child>
+          <object class="GtkHBox" id="hbox2">
+            <property name="visible">True</property>
+            <property name="border_width">5</property>
+            <property name="spacing">12</property>
+            <child>
+              <object class="GtkImage" id="image2">
+                <property name="visible">True</property>
+                <property name="yalign">0</property>
+                <property name="stock">gtk-dialog-question</property>
+                <property name="icon-size">6</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkVBox" id="vbox3">
+                <property name="visible">True</property>
+                <property name="orientation">vertical</property>
+                <property name="spacing">12</property>
+                <child>
+                  <object class="GtkLabel" id="new_connection_primary_label">
+                    <property name="visible">True</property>
+                    <property name="xalign">0</property>
+                    <property name="label" translatable="yes">Choose a Connection Type</property>
+                    <attributes>
+                      <attribute name="weight" value="bold"/>
+                      <attribute name="scale" value="1.200000"/>
+                    </attributes>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">False</property>
+                    <property name="position">0</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkLabel" id="new_connection_secondary_label">
+                    <property name="visible">True</property>
+                    <property name="xalign">0</property>
+                    <property name="label" translatable="yes">Select the type of connection you wish to create.
+
+If you are creating a VPN, and the VPN connection you wish to create does not appear in the list, you may not have the correct VPN plugin installed.</property>
+                    <property name="wrap">True</property>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">False</property>
+                    <property name="position">2</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkVBox" id="new_connection_vbox">
+                    <property name="visible">True</property>
+                    <property name="orientation">vertical</property>
+                    <property name="spacing">6</property>
+                    <child>
+                      <object class="GtkComboBox" id="new_connection_type_combo">
+                        <property name="visible">True</property>
+                        <property name="model">new_connection_combo_model</property>
+			<child>
+			  <object class="GtkCellRendererText" id="renderer2"/>
+			  <attributes>
+			    <attribute name="markup">0</attribute>
+			    <attribute name="sensitive">1</attribute>
+			  </attributes>
+			</child>
+                      </object>
+                      <packing>
+                        <property name="position">0</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkLabel" id="new_connection_desc_label">
+                        <property name="visible">True</property>
+                        <property name="xalign">0</property>
+                        <property name="use_markup">True</property>
+                        <property name="wrap">True</property>
+                      </object>
+                      <packing>
+                        <property name="position">1</property>
+                      </packing>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">False</property>
+                    <property name="padding">6</property>
+                    <property name="position">3</property>
+                  </packing>
+                </child>
+              </object>
+              <packing>
+                <property name="position">1</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="position">1</property>
+          </packing>
+        </child>
+        <child internal-child="action_area">
+          <object class="GtkHButtonBox" id="hbuttonbox1">
+            <property name="visible">True</property>
+            <property name="layout_style">end</property>
+            <child>
+              <object class="GtkButton" id="cancel_button">
+                <property name="label">gtk-cancel</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="can_default">True</property>
+                <property name="has_default">True</property>
+                <property name="receives_default">False</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="create_button">
+                <property name="label" translatable="yes">Create&#x2026;</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="can_default">True</property>
+                <property name="receives_default">False</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="pack_type">end</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
+      </object>
+    </child>
+    <action-widgets>
+      <action-widget response="-6">cancel_button</action-widget>
+      <action-widget response="-5">create_button</action-widget>
+    </action-widgets>
+  </object>
+  <object class="GtkListStore" id="new_connection_combo_model">
+    <columns>
+      <!-- column-name name -->
+      <column type="gchararray"/>
+      <!-- column-name sensitive -->
+      <column type="gboolean"/>
+      <!-- column-name new_func -->
+      <column type="gpointer"/>
+      <!-- column-name vpn_plugin -->
+      <column type="GObject"/>
+    </columns>
+  </object>
+</interface>
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/ce-page.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/ce-page.c
index 4180484..5e4805a 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/ce-page.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/ce-page.c
@@ -218,7 +218,7 @@ ce_page_complete_init (CEPage *self,
 	}
 
 	if (!update_error) {
-		g_set_error_literal (&update_error, 0, 0,
+		g_set_error_literal (&update_error, NMA_ERROR, NMA_ERROR_GENERIC,
 		                     _("Failed to update connection secrets due to an unknown error."));
 	}
 
@@ -398,7 +398,8 @@ NMConnection *
 ce_page_new_connection (const char *format,
                         const char *ctype,
                         gboolean autoconnect,
-                        PageGetConnectionsFunc get_connections_func,
+                        NMRemoteSettingsSystem *system_settings,
+                        NMAGConfSettings *gconf_settings,
                         gpointer user_data)
 {
 	NMConnection *connection;
@@ -414,7 +415,7 @@ ce_page_new_connection (const char *format,
 
 	uuid = nm_utils_uuid_generate ();
 
-	connections = (*get_connections_func) (user_data);
+	connections = ce_page_list_connections (system_settings, gconf_settings);
 	id = utils_next_available_name (connections, format);
 	g_slist_free (connections);
 
@@ -431,3 +432,11 @@ ce_page_new_connection (const char *format,
 	return connection;
 }
 
+GSList *
+ce_page_list_connections (NMRemoteSettingsSystem *system_settings,
+                          NMAGConfSettings *gconf_settings)
+{
+	return g_slist_concat (nm_settings_interface_list_connections (NM_SETTINGS_INTERFACE (system_settings)),
+	                       nm_settings_interface_list_connections (NM_SETTINGS_INTERFACE (gconf_settings)));
+}
+
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/ce-page.h NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/ce-page.h
index 53c6ac5..7500623 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/ce-page.h
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/ce-page.h
@@ -30,6 +30,9 @@
 
 #include <dbus/dbus-glib.h>
 #include <nm-connection.h>
+#include <nm-remote-settings-system.h>
+#include "nma-gconf-settings.h"
+#include "utils.h"
 
 #if !GTK_CHECK_VERSION(2,18,0)
 #define gtk_widget_is_toplevel GTK_WIDGET_TOPLEVEL
@@ -43,8 +46,10 @@ typedef void (*PageNewConnectionResultFunc) (NMConnection *connection,
 typedef GSList * (*PageGetConnectionsFunc) (gpointer user_data);
 
 typedef void (*PageNewConnectionFunc) (GtkWindow *parent,
+                                       const char *detail,
+                                       NMRemoteSettingsSystem *system_settings,
+                                       NMAGConfSettings *gconf_settings,
                                        PageNewConnectionResultFunc result_func,
-                                       PageGetConnectionsFunc get_connections_func,
                                        gpointer user_data);
 
 #define CE_TYPE_PAGE            (ce_page_get_type ())
@@ -122,8 +127,12 @@ gboolean ce_page_get_initialized (CEPage *self);
 NMConnection *ce_page_new_connection (const char *format,
                                       const char *ctype,
                                       gboolean autoconnect,
-                                      PageGetConnectionsFunc get_connections_func,
+                                      NMRemoteSettingsSystem *system_settings,
+                                      NMAGConfSettings *gconf_settings,
                                       gpointer user_data);
 
+GSList *ce_page_list_connections (NMRemoteSettingsSystem *system_settings,
+								  NMAGConfSettings *gconf_settings);
+
 #endif  /* __CE_PAGE_H__ */
 
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/ce-vpn-wizard.ui NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/ce-vpn-wizard.ui
deleted file mode 100644
index 59fc3b8..0000000
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/ce-vpn-wizard.ui
+++ /dev/null
@@ -1,163 +0,0 @@
-<?xml version="1.0"?>
-<interface>
-  <requires lib="gtk+" version="2.16"/>
-  <!-- interface-naming-policy toplevel-contextual -->
-  <object class="GtkListStore" id="model1">
-    <columns>
-      <!-- column-name gchararray -->
-      <column type="gchararray"/>
-    </columns>
-    <data>
-      <row>
-        <col id="0" translatable="yes"> </col>
-      </row>
-    </data>
-  </object>
-  <object class="GtkDialog" id="vpn_type_dialog">
-    <property name="border_width">5</property>
-    <property name="title" translatable="yes"> </property>
-    <property name="resizable">False</property>
-    <property name="modal">True</property>
-    <property name="window_position">center-always</property>
-    <property name="icon_name">gtk-dialog-question</property>
-    <property name="type_hint">dialog</property>
-    <property name="has_separator">False</property>
-    <child internal-child="vbox">
-      <object class="GtkVBox" id="vbox2">
-        <property name="visible">True</property>
-        <property name="spacing">2</property>
-        <child>
-          <object class="GtkHBox" id="hbox2">
-            <property name="visible">True</property>
-            <property name="border_width">5</property>
-            <property name="spacing">12</property>
-            <child>
-              <object class="GtkImage" id="image2">
-                <property name="visible">True</property>
-                <property name="yalign">0</property>
-                <property name="stock">gtk-dialog-question</property>
-                <property name="icon-size">6</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkVBox" id="vbox3">
-                <property name="visible">True</property>
-                <property name="spacing">12</property>
-                <child>
-                  <object class="GtkLabel" id="label1">
-                    <property name="visible">True</property>
-                    <property name="xalign">0</property>
-                    <property name="label" translatable="yes">&lt;span weight="bold" size="larger"&gt;Choose a VPN Connection Type&lt;/span&gt;
-
-Select the type of VPN you wish to use for the new connection.  If the type of VPN connection you wish to create does not appear in the list, you may not have the correct VPN plugin installed.</property>
-                    <property name="use_markup">True</property>
-                    <property name="wrap">True</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkVBox" id="vpn_vbox">
-                    <property name="visible">True</property>
-                    <property name="spacing">6</property>
-                    <child>
-                      <object class="GtkComboBox" id="vpn_type_combo">
-                        <property name="visible">True</property>
-                        <property name="model">model1</property>
-                        <child>
-                          <object class="GtkCellRendererText" id="renderer1"/>
-                          <attributes>
-                            <attribute name="text">0</attribute>
-                          </attributes>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="vpn_desc_label">
-                        <property name="visible">True</property>
-                        <property name="xalign">0</property>
-                        <property name="use_markup">True</property>
-                        <property name="wrap">True</property>
-                      </object>
-                      <packing>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="padding">6</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-        <child internal-child="action_area">
-          <object class="GtkHButtonBox" id="hbuttonbox1">
-            <property name="visible">True</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkButton" id="cancel_button">
-                <property name="label">gtk-cancel</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="can_default">True</property>
-                <property name="has_default">True</property>
-                <property name="receives_default">False</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="create_button">
-                <property name="label" translatable="yes">Create&#x2026;</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="can_default">True</property>
-                <property name="receives_default">False</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="pack_type">end</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-    <action-widgets>
-      <action-widget response="-6">cancel_button</action-widget>
-      <action-widget response="-5">create_button</action-widget>
-    </action-widgets>
-  </object>
-</interface>
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/new-connection.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/new-connection.c
new file mode 100644
index 0000000..00a4db1
--- /dev/null
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/new-connection.c
@@ -0,0 +1,460 @@
+/* -*- Mode: C; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
+/* NetworkManager Connection editor -- Connection editor for NetworkManager
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Copyright 2012 Red Hat, Inc.
+ */
+
+#include <config.h>
+
+#include <glib/gi18n.h>
+
+#include "new-connection.h"
+#include "nm-connection-list.h"
+#include "page-wired.h"
+#include "page-wireless.h"
+#include "page-mobile.h"
+#include "page-dsl.h"
+#include "page-vpn.h"
+#include "vpn-helpers.h"
+
+#include <nm-setting-wired.h>
+#include <nm-setting-wireless.h>
+#include <nm-setting-gsm.h>
+#include <nm-setting-pppoe.h>
+#include <nm-setting-vpn.h>
+
+static GSList *vpn_plugins;
+
+#define COL_MARKUP     0
+#define COL_SENSITIVE  1
+#define COL_NEW_FUNC   2
+#define COL_VPN_PLUGIN 3
+
+static gint
+sort_vpn_plugins (gconstpointer a, gconstpointer b)
+{
+	NMVpnPluginUiInterface *aa = NM_VPN_PLUGIN_UI_INTERFACE (a);
+	NMVpnPluginUiInterface *bb = NM_VPN_PLUGIN_UI_INTERFACE (b);
+	char *aa_desc = NULL, *bb_desc = NULL;
+	int ret;
+
+	g_object_get (aa, NM_VPN_PLUGIN_UI_INTERFACE_NAME, &aa_desc, NULL);
+	g_object_get (bb, NM_VPN_PLUGIN_UI_INTERFACE_NAME, &bb_desc, NULL);
+
+	ret = g_strcmp0 (aa_desc, bb_desc);
+
+	g_free (aa_desc);
+	g_free (bb_desc);
+
+	return ret;
+}
+
+static gint
+sort_types (gconstpointer a, gconstpointer b)
+{
+	ConnectionTypeData *typea = (ConnectionTypeData *)a;
+	ConnectionTypeData *typeb = (ConnectionTypeData *)b;
+
+	if (typea->virtual && !typeb->virtual)
+		return 1;
+	else if (typeb->virtual && !typea->virtual)
+		return -1;
+
+	if (typea->setting_type == NM_TYPE_SETTING_VPN &&
+	    typeb->setting_type != NM_TYPE_SETTING_VPN)
+		return 1;
+	else if (typeb->setting_type == NM_TYPE_SETTING_VPN &&
+	         typea->setting_type != NM_TYPE_SETTING_VPN)
+		return -1;
+
+	return g_utf8_collate (typea->name, typeb->name);
+}
+
+ConnectionTypeData *
+get_connection_type_list (void)
+{
+	GArray *array;
+	ConnectionTypeData data;
+	static ConnectionTypeData *list;
+	GHashTable *vpn_plugins_hash;
+	gboolean have_vpn_plugins;
+
+	if (list)
+		return list;
+
+	array = g_array_new (TRUE, FALSE, sizeof (ConnectionTypeData));
+
+	data.name = _("Wired");
+	data.new_connection_func = wired_connection_new;
+	data.setting_type = NM_TYPE_SETTING_WIRED;
+	data.virtual = FALSE;
+	g_array_append_val (array, data);
+
+	data.name = _("Wireless");
+	data.new_connection_func = wifi_connection_new;
+	data.setting_type = NM_TYPE_SETTING_WIRELESS;
+	data.virtual = FALSE;
+	g_array_append_val (array, data);
+
+	data.name = _("Mobile Broadband");
+	data.new_connection_func = mobile_connection_new;
+	data.setting_type = NM_TYPE_SETTING_GSM;
+	data.virtual = FALSE;
+	g_array_append_val (array, data);
+
+	data.name = _("DSL");
+	data.new_connection_func = dsl_connection_new;
+	data.setting_type = NM_TYPE_SETTING_PPPOE;
+	data.virtual = FALSE;
+	g_array_append_val (array, data);
+
+	/* Add "VPN" only if there are plugins */
+	vpn_plugins_hash = vpn_get_plugins (NULL);
+	have_vpn_plugins  = vpn_plugins_hash && g_hash_table_size (vpn_plugins_hash);
+	if (have_vpn_plugins) {
+		GHashTableIter iter;
+		gpointer name, plugin;
+
+		data.name = _("VPN");
+		data.new_connection_func = vpn_connection_new;
+		data.setting_type = NM_TYPE_SETTING_VPN;
+		data.virtual = TRUE;
+		g_array_append_val (array, data);
+
+		vpn_plugins = NULL;
+		g_hash_table_iter_init (&iter, vpn_plugins_hash);
+		while (g_hash_table_iter_next (&iter, &name, &plugin))
+			vpn_plugins = g_slist_prepend (vpn_plugins, plugin);
+		vpn_plugins = g_slist_sort (vpn_plugins, sort_vpn_plugins);
+	}
+
+	g_array_sort (array, sort_types);
+
+	return (ConnectionTypeData *)g_array_free (array, FALSE);
+}
+
+static gboolean
+combo_row_separator_func (GtkTreeModel *model,
+                          GtkTreeIter  *iter,
+                          gpointer      data)
+{
+	char *label;
+
+	gtk_tree_model_get (model, iter,
+	                    COL_MARKUP, &label,
+	                    -1);
+	if (label) {
+		g_free (label);
+		return FALSE;
+	} else
+		return TRUE;
+}
+
+static void
+combo_changed_cb (GtkComboBox *combo, gpointer user_data)
+{
+	GtkLabel *label = GTK_LABEL (user_data);
+	GtkTreeModel *model;
+	GtkTreeIter iter;
+	NMVpnPluginUiInterface *plugin = NULL;
+	char *description, *markup;
+
+	if (!gtk_combo_box_get_active_iter (combo, &iter))
+		goto error;
+
+	model = gtk_combo_box_get_model (combo);
+	if (!model)
+		goto error;
+
+	gtk_tree_model_get (model, &iter, COL_VPN_PLUGIN, &plugin, -1);
+	if (!plugin)
+		goto error;
+
+	g_object_get (G_OBJECT (plugin), NM_VPN_PLUGIN_UI_INTERFACE_DESC, &description, NULL);
+	g_object_unref (plugin);
+	if (!description)
+		goto error;
+
+	markup = g_markup_printf_escaped ("<i>%s</i>", description);
+	gtk_label_set_markup (label, markup);
+	g_free (markup);
+	g_free (description);
+	return;
+
+error:
+	gtk_label_set_text (label, "");
+}
+
+static void
+set_up_connection_type_combo (GtkComboBox *combo,
+                              GtkLabel *description_label,
+                              NewConnectionTypeFilterFunc type_filter_func,
+                              gpointer user_data)
+{
+	GtkListStore *model = GTK_LIST_STORE (gtk_combo_box_get_model (combo));
+	ConnectionTypeData *list = get_connection_type_list ();
+	GtkTreeIter iter;
+	GSList *p;
+	int i, vpn_index = -1, active = 0, added = 0;
+	gboolean import_supported = FALSE;
+	gboolean added_virtual_header = FALSE;
+	gboolean show_headers = (type_filter_func == NULL);
+	char *markup;
+
+	gtk_combo_box_set_row_separator_func (combo, combo_row_separator_func, NULL, NULL);
+	g_signal_connect (G_OBJECT (combo), "changed", G_CALLBACK (combo_changed_cb), description_label);
+
+	if (show_headers) {
+		markup = g_strdup_printf ("<b><big>%s</big></b>", _("Hardware"));
+		gtk_list_store_append (model, &iter);
+		gtk_list_store_set (model, &iter,
+		                    COL_MARKUP, markup,
+		                    COL_SENSITIVE, FALSE,
+		                    -1);
+		g_free (markup);
+	}
+
+	for (i = 0; list[i].name; i++) {
+		if (type_filter_func && !type_filter_func (list[i].setting_type, user_data))
+			continue;
+
+		if (list[i].setting_type == NM_TYPE_SETTING_VPN) {
+			vpn_index = i;
+			continue;
+		} else if (list[i].setting_type == NM_TYPE_SETTING_WIRED)
+			active = added;
+
+		if (list[i].virtual && !added_virtual_header) {
+			markup = g_strdup_printf ("<b><big>%s</big></b>", _("Virtual"));
+			gtk_list_store_append (model, &iter);
+			gtk_list_store_set (model, &iter,
+			                    COL_MARKUP, markup,
+			                    COL_SENSITIVE, FALSE,
+			                    -1);
+			g_free (markup);
+			added_virtual_header = TRUE;
+		}
+
+		if (show_headers)
+			markup = g_markup_printf_escaped ("    %s", list[i].name);
+		else
+			markup = g_markup_escape_text (list[i].name, -1);
+		gtk_list_store_append (model, &iter);
+		gtk_list_store_set (model, &iter,
+		                    COL_MARKUP, markup,
+		                    COL_SENSITIVE, TRUE,
+		                    COL_NEW_FUNC, list[i].new_connection_func,
+		                    -1);
+		g_free (markup);
+		added++;
+	}
+
+	if (!vpn_plugins || vpn_index == -1) {
+		gtk_combo_box_set_active (combo, show_headers ? active + 1 : active);
+		return;
+	}
+
+	if (show_headers) {
+		markup = g_strdup_printf ("<b><big>%s</big></b>", _("VPN"));
+		gtk_list_store_append (model, &iter);
+		gtk_list_store_set (model, &iter,
+		                    COL_MARKUP, markup,
+		                    COL_SENSITIVE, FALSE,
+		                    -1);
+		g_free (markup);
+	}
+
+	for (p = vpn_plugins; p; p = p->next) {
+		NMVpnPluginUiInterface *plugin = NM_VPN_PLUGIN_UI_INTERFACE (p->data);
+		char *desc;
+
+		g_object_get (plugin, NM_VPN_PLUGIN_UI_INTERFACE_NAME, &desc, NULL);
+
+		if (show_headers)
+			markup = g_markup_printf_escaped ("    %s", desc);
+		else
+			markup = g_markup_escape_text (desc, -1);
+		gtk_list_store_append (model, &iter);
+		gtk_list_store_set (model, &iter,
+		                    COL_MARKUP, markup,
+		                    COL_SENSITIVE, TRUE,
+		                    COL_NEW_FUNC, list[vpn_index].new_connection_func,
+		                    COL_VPN_PLUGIN, plugin,
+		                    -1);
+		g_free (markup);
+		g_free (desc);
+
+		if (nm_vpn_plugin_ui_interface_get_capabilities (plugin) & NM_VPN_PLUGIN_UI_CAPABILITY_IMPORT)
+			import_supported = TRUE;
+	}
+
+	if (import_supported) {
+		/* Separator */
+		gtk_list_store_append (model, &iter);
+
+		if (show_headers)
+			markup = g_strdup_printf ("    %s", _("Import a saved VPN configuration..."));
+		else
+			markup = g_strdup (_("Import a saved VPN configuration..."));
+		gtk_list_store_append (model, &iter);
+		gtk_list_store_set (model, &iter,
+		                    COL_MARKUP, markup,
+		                    COL_SENSITIVE, TRUE,
+		                    COL_NEW_FUNC, vpn_connection_import,
+		                    -1);
+		g_free (markup);
+	}
+
+	gtk_combo_box_set_active (combo, show_headers ? active + 1 : active);
+}
+
+typedef struct {
+	GtkWindow *parent_window;
+	PageNewConnectionResultFunc result_func;
+	gpointer user_data;
+} NewConnectionData;
+
+static void
+new_connection_result (NMConnection *connection,
+                       gboolean canceled,
+                       GError *error,
+                       gpointer user_data)
+{
+	NewConnectionData *ncd = user_data;
+	PageNewConnectionResultFunc result_func;
+
+	result_func = ncd->result_func;
+	user_data = ncd->user_data;
+	g_slice_free (NewConnectionData, ncd);
+
+	result_func (connection, canceled, error, user_data);
+}
+
+void
+new_connection_of_type (GtkWindow *parent_window,
+                        const char *detail,
+                        NMRemoteSettingsSystem *system_settings,
+                        NMAGConfSettings *gconf_settings,
+                        PageNewConnectionFunc new_func,
+                        PageNewConnectionResultFunc result_func,
+                        gpointer user_data)
+{
+	NewConnectionData *ncd;
+
+	ncd = g_slice_new (NewConnectionData);
+	ncd->parent_window = parent_window;
+	ncd->result_func = result_func;
+	ncd->user_data = user_data;
+
+	new_func (parent_window,
+	          detail,
+	          system_settings,
+	          gconf_settings,
+	          new_connection_result,
+	          ncd);
+}
+
+void
+new_connection_dialog (GtkWindow *parent_window,
+                       NMRemoteSettingsSystem *system_settings,
+                       NMAGConfSettings *gconf_settings,
+                       NewConnectionTypeFilterFunc type_filter_func,
+                       PageNewConnectionResultFunc result_func,
+                       gpointer user_data)
+{
+	new_connection_dialog_full (parent_window,
+	                            system_settings, gconf_settings,
+	                            NULL, NULL,
+	                            type_filter_func,
+	                            result_func,
+	                            user_data);
+}
+
+
+void
+new_connection_dialog_full (GtkWindow *parent_window,
+                            NMRemoteSettingsSystem *system_settings,
+                            NMAGConfSettings *gconf_settings,
+                            const char *primary_label,
+                            const char *secondary_label,
+                            NewConnectionTypeFilterFunc type_filter_func,
+                            PageNewConnectionResultFunc result_func,
+                            gpointer user_data)
+{
+	GtkBuilder *gui;
+	GtkDialog *type_dialog;
+	GtkComboBox *combo;
+	GtkLabel *label;
+	GtkTreeIter iter;
+	int response;
+	PageNewConnectionFunc new_func = NULL;
+	NMVpnPluginUiInterface *plugin = NULL;
+	char *vpn_type = NULL;
+	GError *error = NULL;
+
+	/* load GUI */
+	gui = gtk_builder_new ();
+	if (!gtk_builder_add_from_file (gui,
+	                                UIDIR "/ce-new-connection.ui",
+	                                &error)) {
+		g_warning ("Couldn't load builder file: %s", error->message);
+		g_error_free (error);
+		g_object_unref (gui);
+		return;
+	}
+
+	type_dialog = GTK_DIALOG (gtk_builder_get_object (gui, "new_connection_type_dialog"));
+	gtk_window_set_transient_for (GTK_WINDOW (type_dialog), parent_window);
+
+	combo = GTK_COMBO_BOX (gtk_builder_get_object (gui, "new_connection_type_combo"));
+	label = GTK_LABEL (gtk_builder_get_object (gui, "new_connection_desc_label"));
+	set_up_connection_type_combo (combo, label, type_filter_func, user_data);
+
+	if (primary_label) {
+		label = GTK_LABEL (gtk_builder_get_object (gui, "new_connection_primary_label"));
+		gtk_label_set_text (label, primary_label);
+	}
+	if (secondary_label) {
+		label = GTK_LABEL (gtk_builder_get_object (gui, "new_connection_secondary_label"));
+		gtk_label_set_text (label, secondary_label);
+	}
+
+	response = gtk_dialog_run (type_dialog);
+	if (response == GTK_RESPONSE_OK) {
+		gtk_combo_box_get_active_iter (combo, &iter);
+		gtk_tree_model_get (gtk_combo_box_get_model (combo), &iter,
+		                    COL_NEW_FUNC, &new_func,
+		                    COL_VPN_PLUGIN, &plugin,
+		                    -1);
+
+		if (plugin) {
+			g_object_get (G_OBJECT (plugin), NM_VPN_PLUGIN_UI_INTERFACE_SERVICE, &vpn_type, NULL);
+			g_object_unref (plugin);
+		}
+	}
+
+	gtk_widget_destroy (GTK_WIDGET (type_dialog));
+	g_object_unref (gui);
+
+	if (new_func) {
+		new_connection_of_type (parent_window, vpn_type, system_settings, gconf_settings,
+		                        new_func, result_func, user_data);
+	} else
+		result_func (NULL, TRUE, NULL, user_data);
+
+	g_free (vpn_type);
+}
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/new-connection.h NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/new-connection.h
new file mode 100644
index 0000000..f5616de
--- /dev/null
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/new-connection.h
@@ -0,0 +1,63 @@
+/* -*- Mode: C; tab-width: 4; indent-tabs-mode: t; c-basic-offset: 4 -*- */
+/* NetworkManager Connection editor -- Connection editor for NetworkManager
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Copyright 2012 Red Hat, Inc.
+ */
+
+#ifndef __CONNECTION_HELPERS_H__
+#define __CONNECTION_HELPERS_H__
+
+#include "ce-page.h"
+
+typedef struct {
+	const char *name;
+	GType setting_type;
+	PageNewConnectionFunc new_connection_func;
+	gboolean virtual;
+} ConnectionTypeData;
+
+ConnectionTypeData *get_connection_type_list (void);
+
+typedef gboolean (*NewConnectionTypeFilterFunc) (GType type,
+                                                 gpointer user_data);
+
+void new_connection_dialog      (GtkWindow *parent_window,
+                                 NMRemoteSettingsSystem *system_settings,
+                                 NMAGConfSettings *gconf_settings,
+                                 NewConnectionTypeFilterFunc type_filter_func,
+                                 PageNewConnectionResultFunc result_func,
+                                 gpointer user_data);
+
+void new_connection_dialog_full (GtkWindow *parent_window,
+                                 NMRemoteSettingsSystem *system_settings,
+                                 NMAGConfSettings *gconf_settings,
+                                 const char *primary_label,
+                                 const char *secondary_label,
+                                 NewConnectionTypeFilterFunc type_filter_func,
+                                 PageNewConnectionResultFunc result_func,
+                                 gpointer user_data);
+
+void new_connection_of_type (GtkWindow *parent_window,
+                             const char *detail,
+                             NMRemoteSettingsSystem *system_settings,
+                             NMAGConfSettings *gconf_settings,
+                             PageNewConnectionFunc new_func,
+                             PageNewConnectionResultFunc result_func,
+                             gpointer user_data);
+
+#endif  /* __CONNECTION_HELPERS_H__ */
+
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.c
index 88c4e1a..a4b38a1 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.c
@@ -63,6 +63,7 @@
 #include "page-ppp.h"
 #include "page-vpn.h"
 #include "ce-polkit-button.h"
+#include "vpn-helpers.h"
 
 G_DEFINE_TYPE (NMConnectionEditor, nm_connection_editor, G_TYPE_OBJECT)
 
@@ -236,6 +237,7 @@ connection_editor_validate (NMConnectionEditor *editor)
 
 done:
 	ce_polkit_button_set_master_sensitive (CE_POLKIT_BUTTON (editor->ok_button), valid);
+	gtk_widget_set_sensitive (editor->export_button, valid);
 	update_sensitivity (editor);
 }
 
@@ -312,6 +314,7 @@ nm_connection_editor_init (NMConnectionEditor *editor)
 
 	editor->window = GTK_WIDGET (gtk_builder_get_object (editor->builder, "nm-connection-editor"));
 	editor->cancel_button = GTK_WIDGET (gtk_builder_get_object (editor->builder, "cancel_button"));
+	editor->export_button = GTK_WIDGET (gtk_builder_get_object (editor->builder, "export_button"));
 	editor->system_checkbutton = GTK_WIDGET (gtk_builder_get_object (editor->builder, "system_checkbutton"));
 }
 
@@ -401,7 +404,7 @@ nm_connection_editor_new (NMConnection *connection,
 
 	editor = g_object_new (NM_TYPE_CONNECTION_EDITOR, NULL);
 	if (!editor) {
-		g_set_error (error, 0, 0, "%s", _("Error creating connection editor dialog."));
+		g_set_error (error, NMA_ERROR, NMA_ERROR_GENERIC, "%s", _("Error creating connection editor dialog."));
 		return NULL;
 	}
 
@@ -562,6 +565,9 @@ page_initialized (CEPage *page, gpointer unused, GError *error, gpointer user_da
 		gtk_container_remove (GTK_CONTAINER (parent), widget);
 	gtk_notebook_append_page (notebook, widget, label);
 
+	if (CE_IS_PAGE_VPN (page) && ce_page_vpn_can_export (CE_PAGE_VPN (page)))
+		gtk_widget_show (editor->export_button);
+
 	/* Move the page from the initializing list to the main page list */
 	editor->initializing_pages = g_slist_remove (editor->initializing_pages, page);
 	editor->pages = g_slist_append (editor->pages, page);
@@ -622,7 +628,7 @@ request_secrets (GetSecretsInfo *info)
 	                                                        get_secrets_cb,
 	                                                        info);
 	if (!success) {
-		error = g_error_new_literal (0, 0, _("Failed to update connection secrets due to an unknown error."));
+		error = g_error_new_literal (NMA_ERROR, NMA_ERROR_GENERIC, _("Failed to update connection secrets due to an unknown error."));
 		get_secrets_cb (connection, NULL, error, info);
 		g_error_free (error);
 	}
@@ -818,6 +824,14 @@ ok_button_clicked_cb (GtkWidget *widget, gpointer user_data)
 	g_signal_emit (self, editor_signals[EDITOR_DONE], 0, GTK_RESPONSE_OK, NULL);
 }
 
+static void
+export_button_clicked_cb (GtkWidget *widget, gpointer user_data)
+{
+	NMConnectionEditor *self = NM_CONNECTION_EDITOR (user_data);
+
+	vpn_export (self->connection);
+}
+
 void
 nm_connection_editor_run (NMConnectionEditor *self)
 {
@@ -830,6 +844,8 @@ nm_connection_editor_run (NMConnectionEditor *self)
 	                  G_CALLBACK (ok_button_clicked_cb), self);
 	g_signal_connect (G_OBJECT (self->cancel_button), "clicked",
 	                  G_CALLBACK (cancel_button_clicked_cb), self);
+	g_signal_connect (G_OBJECT (self->export_button), "clicked",
+	                  G_CALLBACK (export_button_clicked_cb), self);
 
 	nm_connection_editor_present (self);
 }
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.h NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.h
index 0612af0..6580f8f 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.h
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.h
@@ -27,6 +27,7 @@
 #include <glib-object.h>
 
 #include "nm-remote-settings-system.h"
+#include "utils.h"
 
 #define NM_TYPE_CONNECTION_EDITOR    (nm_connection_editor_get_type ())
 #define NM_IS_CONNECTION_EDITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), NM_TYPE_CONNECTION_EDITOR))
@@ -56,6 +57,7 @@ typedef struct {
 	GtkWidget *window;
 	GtkWidget *ok_button;
 	GtkWidget *cancel_button;
+	GtkWidget *export_button;
 
 	gboolean busy;
 } NMConnectionEditor;
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.ui NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.ui
index b5966c4..46ed6bc 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.ui
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/nm-connection-editor.ui
@@ -46,460 +46,206 @@
           </packing>
         </child>
         <child>
-          <object class="GtkNotebook" id="list_notebook">
+          <object class="GtkHBox" id="hbox2">
             <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="border_width">5</property>
+            <property name="can_focus">False</property>
+            <property name="border_width">6</property>
+            <property name="spacing">6</property>
             <child>
-              <object class="GtkHBox" id="wired_child">
+              <object class="GtkScrolledWindow" id="scrolledwindow1">
                 <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="border_width">6</property>
-                <property name="spacing">6</property>
+                <property name="can_focus">True</property>
+                <property name="hscrollbar_policy">never</property>
+                <property name="shadow_type">in</property>
                 <child>
-                  <object class="GtkScrolledWindow" id="scrolledwindow1">
+                  <object class="GtkTreeView" id="connection_list">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="shadow_type">in</property>
-                    <child>
-                      <object class="GtkTreeView" id="wired_list">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="headers_visible">False</property>
-                        <property name="rules_hint">True</property>
-                      </object>
-                    </child>
+                    <property name="rules_hint">True</property>
                   </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
                 </child>
-                <child>
-                  <object class="GtkVButtonBox" id="wired_button_box">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="spacing">6</property>
-                    <property name="layout_style">start</property>
-                    <child>
-                      <object class="GtkButton" id="wired_add">
-                        <property name="label">gtk-add</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="can_default">True</property>
-                        <property name="receives_default">False</property>
-                        <property name="use_action_appearance">False</property>
-                        <property name="use_stock">True</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <placeholder/>
-                    </child>
-                    <child>
-                      <placeholder/>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-            </child>
-            <child type="tab">
-              <object class="GtkLabel" id="wired_label">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="label" translatable="yes">Wired</property>
               </object>
               <packing>
-                <property name="tab_fill">False</property>
+                <property name="expand">True</property>
+                <property name="fill">True</property>
+                <property name="position">0</property>
               </packing>
             </child>
             <child>
-              <object class="GtkHBox" id="wireless_child">
+              <object class="GtkVButtonBox" id="connection_button_box">
                 <property name="visible">True</property>
                 <property name="can_focus">False</property>
-                <property name="border_width">6</property>
                 <property name="spacing">6</property>
+                <property name="layout_style">start</property>
                 <child>
-                  <object class="GtkScrolledWindow" id="scrolledwindow2">
+                  <object class="GtkButton" id="connection_add">
+                    <property name="label">gtk-add</property>
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="shadow_type">in</property>
-                    <child>
-                      <object class="GtkTreeView" id="wireless_list">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="headers_visible">False</property>
-                        <property name="rules_hint">True</property>
-                      </object>
-                    </child>
+                    <property name="can_default">True</property>
+                    <property name="receives_default">True</property>
+                    <property name="use_action_appearance">False</property>
+                    <property name="use_stock">True</property>
                   </object>
                   <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
+                    <property name="expand">False</property>
+                    <property name="fill">False</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
                 <child>
-                  <object class="GtkVButtonBox" id="wireless_button_box">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="spacing">6</property>
-                    <property name="layout_style">start</property>
-                    <child>
-                      <object class="GtkButton" id="wireless_add">
-                        <property name="label">gtk-add</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="can_default">True</property>
-                        <property name="receives_default">False</property>
-                        <property name="use_action_appearance">False</property>
-                        <property name="use_stock">True</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <placeholder/>
-                    </child>
-                    <child>
-                      <placeholder/>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="position">1</property>
-              </packing>
-            </child>
-            <child type="tab">
-              <object class="GtkLabel" id="wireless_label">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="label" translatable="yes">Wireless</property>
-              </object>
-              <packing>
-                <property name="position">1</property>
-                <property name="tab_fill">False</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkHBox" id="wwan_child">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="border_width">6</property>
-                <property name="spacing">6</property>
-                <child>
-                  <object class="GtkScrolledWindow" id="scrolledwindow3">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="shadow_type">in</property>
-                    <child>
-                      <object class="GtkTreeView" id="wwan_list">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="headers_visible">False</property>
-                        <property name="rules_hint">True</property>
-                      </object>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
+                  <placeholder/>
                 </child>
                 <child>
-                  <object class="GtkVButtonBox" id="wwan_button_box">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="spacing">6</property>
-                    <property name="layout_style">start</property>
-                    <child>
-                      <object class="GtkButton" id="wwan_add">
-                        <property name="label">gtk-add</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="can_default">True</property>
-                        <property name="receives_default">False</property>
-                        <property name="use_action_appearance">False</property>
-                        <property name="use_stock">True</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <placeholder/>
-                    </child>
-                    <child>
-                      <placeholder/>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
+                  <placeholder/>
                 </child>
               </object>
               <packing>
-                <property name="position">2</property>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">1</property>
               </packing>
             </child>
-            <child type="tab">
-              <object class="GtkLabel" id="wwan_label">
+          </object>
+          <packing>
+            <property name="expand">True</property>
+            <property name="fill">True</property>
+            <property name="position">1</property>
+          </packing>
+        </child>
+      </object>
+    </child>
+    <action-widgets>
+      <action-widget response="-7">closebutton1</action-widget>
+    </action-widgets>
+  </object>
+  <object class="GtkListStore" id="new-connection-combo-model">
+    <columns>
+      <!-- column-name icon -->
+      <column type="GdkPixbuf"/>
+      <!-- column-name name -->
+      <column type="gchararray"/>
+      <!-- column-name new_func -->
+      <column type="gpointer"/>
+      <!-- column-name vpn_plugin -->
+      <column type="GObject"/>
+    </columns>
+  </object>
+  <object class="GtkDialog" id="new-connection-dialog">
+    <property name="can_focus">False</property>
+    <property name="border_width">5</property>
+    <property name="title" translatable="yes">Create New Connection</property>
+    <property name="modal">True</property>
+    <property name="window_position">center-on-parent</property>
+    <property name="type_hint">dialog</property>
+    <child internal-child="vbox">
+      <object class="GtkBox" id="dialog-vbox4">
+        <property name="can_focus">False</property>
+        <property name="orientation">vertical</property>
+        <property name="spacing">2</property>
+        <child internal-child="action_area">
+          <object class="GtkButtonBox" id="dialog-action_area4">
+            <property name="can_focus">False</property>
+            <property name="layout_style">end</property>
+            <child>
+              <object class="GtkButton" id="button1">
+                <property name="label">gtk-cancel</property>
                 <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="label" translatable="yes">Mobile Broadband</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_action_appearance">False</property>
+                <property name="use_stock">True</property>
               </object>
               <packing>
-                <property name="position">2</property>
-                <property name="tab_fill">False</property>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">0</property>
               </packing>
             </child>
             <child>
-              <object class="GtkHBox" id="vpn_child">
+              <object class="GtkButton" id="button2">
+                <property name="label">gtk-add</property>
                 <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="border_width">6</property>
-                <property name="spacing">6</property>
-                <child>
-                  <object class="GtkScrolledWindow" id="scrolledwindow4">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="shadow_type">in</property>
-                    <child>
-                      <object class="GtkTreeView" id="vpn_list">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="headers_visible">False</property>
-                        <property name="rules_hint">True</property>
-                      </object>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkVBox" id="vbox1">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="spacing">6</property>
-                    <child>
-                      <object class="GtkVButtonBox" id="vpn_button_box">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="spacing">6</property>
-                        <property name="layout_style">start</property>
-                        <child>
-                          <object class="GtkButton" id="vpn_add">
-                            <property name="label">gtk-add</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="can_default">True</property>
-                            <property name="receives_default">False</property>
-                            <property name="use_action_appearance">False</property>
-                            <property name="use_stock">True</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">False</property>
-                            <property name="position">0</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <placeholder/>
-                        </child>
-                        <child>
-                          <placeholder/>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkHSeparator" id="hseparator1">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkVButtonBox" id="vpn_ix_button_box">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="spacing">6</property>
-                        <property name="layout_style">end</property>
-                        <child>
-                          <object class="GtkButton" id="vpn_import">
-                            <property name="label" translatable="yes">_Import</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="receives_default">True</property>
-                            <property name="use_action_appearance">False</property>
-                            <property name="use_underline">True</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">False</property>
-                            <property name="position">0</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkButton" id="vpn_export">
-                            <property name="label" translatable="yes">E_xport</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="receives_default">True</property>
-                            <property name="use_action_appearance">False</property>
-                            <property name="use_underline">True</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">False</property>
-                            <property name="position">1</property>
-                          </packing>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">2</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_action_appearance">False</property>
+                <property name="use_stock">True</property>
               </object>
               <packing>
-                <property name="position">3</property>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">1</property>
               </packing>
             </child>
-            <child type="tab">
-              <object class="GtkLabel" id="vpn_label">
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
+            <property name="pack_type">end</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkVBox" id="box1">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="spacing">10</property>
+            <child>
+              <object class="GtkLabel" id="label1">
                 <property name="visible">True</property>
                 <property name="can_focus">False</property>
-                <property name="label" translatable="yes">VPN</property>
+                <property name="xalign">0</property>
+                <property name="label" translatable="yes">Select the type of connection to create:</property>
+                <attributes>
+                  <attribute name="weight" value="bold"/>
+                </attributes>
               </object>
               <packing>
-                <property name="position">3</property>
-                <property name="tab_fill">False</property>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">0</property>
               </packing>
             </child>
             <child>
-              <object class="GtkHBox" id="dsl_child">
+              <object class="GtkComboBox" id="new-connection-combo">
                 <property name="visible">True</property>
                 <property name="can_focus">False</property>
-                <property name="border_width">6</property>
-                <property name="spacing">6</property>
+                <property name="model">new-connection-combo-model</property>
                 <child>
-                  <object class="GtkScrolledWindow" id="scrolledwindow5">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="shadow_type">in</property>
-                    <child>
-                      <object class="GtkTreeView" id="dsl_list">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="headers_visible">False</property>
-                        <property name="rules_hint">True</property>
-                      </object>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
+                  <object class="GtkCellRendererPixbuf" id="renderer1"/>
+                  <attributes>
+                    <attribute name="pixbuf">0</attribute>
+                  </attributes>
                 </child>
                 <child>
-                  <object class="GtkVButtonBox" id="dsl_button_box">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="spacing">6</property>
-                    <property name="layout_style">start</property>
-                    <child>
-                      <object class="GtkButton" id="dsl_add">
-                        <property name="label">gtk-add</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="can_default">True</property>
-                        <property name="receives_default">False</property>
-                        <property name="use_action_appearance">False</property>
-                        <property name="use_stock">True</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <placeholder/>
-                    </child>
-                    <child>
-                      <placeholder/>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
+                  <object class="GtkCellRendererText" id="renderer2"/>
+                  <attributes>
+                    <attribute name="text">1</attribute>
+                  </attributes>
                 </child>
               </object>
               <packing>
-                <property name="position">4</property>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">1</property>
               </packing>
             </child>
-            <child type="tab">
-              <object class="GtkLabel" id="dsl_label">
+            <child>
+              <object class="GtkLabel" id="new-connection-description">
                 <property name="visible">True</property>
                 <property name="can_focus">False</property>
-                <property name="label" translatable="yes">DSL</property>
+                <property name="xalign">0</property>
+                <property name="max_width_chars">40</property>
               </object>
               <packing>
-                <property name="position">4</property>
-                <property name="tab_fill">False</property>
+                <property name="expand">True</property>
+                <property name="fill">True</property>
+                <property name="position">2</property>
               </packing>
             </child>
           </object>
           <packing>
-            <property name="expand">True</property>
+            <property name="expand">False</property>
             <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
@@ -507,7 +253,8 @@
       </object>
     </child>
     <action-widgets>
-      <action-widget response="-7">closebutton1</action-widget>
+      <action-widget response="-6">button1</action-widget>
+      <action-widget response="-5">button2</action-widget>
     </action-widgets>
   </object>
   <object class="GtkWindow" id="nm-connection-editor">
@@ -565,15 +312,43 @@
               </packing>
             </child>
             <child>
-              <object class="GtkCheckButton" id="connection_autoconnect">
-                <property name="label" translatable="yes">Connect _automatically</property>
+              <object class="GtkVBox" id="vbox1">
                 <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">False</property>
-                <property name="use_action_appearance">False</property>
-                <property name="use_underline">True</property>
-                <property name="active">True</property>
-                <property name="draw_indicator">True</property>
+                <property name="can_focus">False</property>
+                <child>
+                  <object class="GtkCheckButton" id="connection_autoconnect">
+                    <property name="label" translatable="yes">Connect _automatically</property>
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="receives_default">False</property>
+                    <property name="use_action_appearance">False</property>
+                    <property name="use_underline">True</property>
+                    <property name="xalign">0</property>
+                    <property name="active">True</property>
+                    <property name="draw_indicator">True</property>
+                  </object>
+                  <packing>
+                    <property name="expand">True</property>
+                    <property name="fill">True</property>
+                    <property name="position">0</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkCheckButton" id="system_checkbutton">
+                    <property name="label" translatable="yes">Available to all users</property>
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="receives_default">False</property>
+                    <property name="use_action_appearance">False</property>
+                    <property name="xalign">0</property>
+                    <property name="draw_indicator">True</property>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">False</property>
+                    <property name="position">1</property>
+                  </packing>
+                </child>
               </object>
               <packing>
                 <property name="expand">False</property>
@@ -610,17 +385,16 @@
                 <property name="can_focus">False</property>
                 <property name="spacing">6</property>
                 <child>
-                  <object class="GtkCheckButton" id="system_checkbutton">
-                    <property name="label" translatable="yes">Available to all users</property>
-                    <property name="visible">True</property>
+                  <object class="GtkButton" id="export_button">
+                    <property name="label" translatable="yes">_Export...</property>
                     <property name="can_focus">True</property>
-                    <property name="receives_default">False</property>
+                    <property name="receives_default">True</property>
                     <property name="use_action_appearance">False</property>
-                    <property name="draw_indicator">True</property>
+                    <property name="use_underline">True</property>
                   </object>
                   <packing>
                     <property name="expand">False</property>
-                    <property name="fill">False</property>
+                    <property name="fill">True</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/nm-connection-list.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/nm-connection-list.c
index e549bb2..3d742cf 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/nm-connection-list.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/nm-connection-list.c
@@ -42,7 +42,6 @@
 #include <nm-setting-pppoe.h>
 #include <nm-setting-ppp.h>
 #include <nm-setting-serial.h>
-#include <nm-vpn-plugin-ui-interface.h>
 #include <nm-utils.h>
 #include <nm-settings-system-interface.h>
 
@@ -58,6 +57,7 @@
 #include "utils.h"
 #include "vpn-helpers.h"
 #include "ce-polkit-button.h"
+#include "new-connection.h"
 
 G_DEFINE_TYPE (NMConnectionList, nm_connection_list, G_TYPE_OBJECT)
 
@@ -68,18 +68,12 @@ enum {
 
 static guint list_signals[LIST_LAST_SIGNAL] = { 0 };
 
-#define COL_ID 			0
-#define COL_LAST_USED	1
-#define COL_TIMESTAMP	2
-#define COL_CONNECTION	3
-
-typedef struct {
-	NMConnectionList *list;
-	GtkTreeView *treeview;
-	GtkWindow *list_window;
-	GtkWidget *button;
-	PageNewConnectionFunc new_func;
-} ActionInfo;
+#define COL_ID         0
+#define COL_LAST_USED  1
+#define COL_TIMESTAMP  2
+#define COL_CONNECTION 3
+#define COL_GTYPE      4
+#define COL_ORDER      5
 
 static void
 error_dialog (GtkWindow *parent, const char *heading, const char *format, ...)
@@ -131,79 +125,35 @@ get_active_connection (GtkTreeView *treeview)
 	return connection;
 }
 
-#define TV_TYPE_TAG "ctype"
-
-static GtkTreeView *
-get_treeview_for_type (NMConnectionList *list, GType ctype)
-{
-	GSList *iter;
-
-	for (iter = list->treeviews; iter; iter = g_slist_next (iter)) {
-		GtkTreeView *candidate = GTK_TREE_VIEW (iter->data);
-		GType candidate_type;
-
-		candidate_type = GPOINTER_TO_SIZE (g_object_get_data (G_OBJECT (candidate), TV_TYPE_TAG));
-		if (candidate_type == ctype)
-			return candidate;
-	}
-
-	return NULL;
-}
-
-static GtkListStore *
-get_model_for_connection (NMConnectionList *list, NMSettingsConnectionInterface *connection)
-{
-	NMSettingConnection *s_con;
-	GtkTreeView *treeview;
-	GtkTreeModel *model;
-	const char *str_type;
-
-	s_con = (NMSettingConnection *) nm_connection_get_setting (NM_CONNECTION (connection), NM_TYPE_SETTING_CONNECTION);
-	g_assert (s_con);
-	str_type = nm_setting_connection_get_connection_type (s_con);
-
-	if (!str_type) {
-		g_warning ("Ignoring incomplete connection");
-		return NULL;
-	}
-
-	if (!strcmp (str_type, NM_SETTING_CDMA_SETTING_NAME))
-		str_type = NM_SETTING_GSM_SETTING_NAME;
-
-	treeview = get_treeview_for_type (list, nm_connection_lookup_setting_type (str_type));
-	if (!treeview)
-		return NULL;
-
-	model = gtk_tree_view_get_model (treeview);
-	if (GTK_IS_TREE_MODEL_SORT (model))
-		return GTK_LIST_STORE (gtk_tree_model_sort_get_model (GTK_TREE_MODEL_SORT (model)));
-
-	return GTK_LIST_STORE (model);
-}
-
 static gboolean
-get_iter_for_connection (GtkTreeModel *model,
+get_iter_for_connection (NMConnectionList *list,
                          NMSettingsConnectionInterface *connection,
                          GtkTreeIter *iter)
 {
-	GtkTreeIter temp_iter;
-	gboolean found = FALSE;
+	GtkTreeIter types_iter;
 
-	if (!gtk_tree_model_get_iter_first (model, &temp_iter))
+	if (!gtk_tree_model_get_iter_first (list->model, &types_iter))
 		return FALSE;
 
 	do {
-		NMSettingsConnectionInterface *candidate = NULL;
-
-		gtk_tree_model_get (model, &temp_iter, COL_CONNECTION, &candidate, -1);
-		if (candidate && (candidate == connection)) {
-			*iter = temp_iter;
-			found = TRUE;
-			break;
-		}
-	} while (gtk_tree_model_iter_next (model, &temp_iter));
+		if (!gtk_tree_model_iter_children (list->model, iter, &types_iter))
+			continue;
+
+		do {
+			NMSettingsConnectionInterface *candidate = NULL;
+
+			gtk_tree_model_get (list->model, iter,
+			                    COL_CONNECTION, &candidate,
+			                    -1);
+			if (candidate == connection) {
+				g_object_unref (candidate);
+				return TRUE;
+			}
+			g_object_unref (candidate);
+		} while (gtk_tree_model_iter_next (list->model, iter));
+	} while (gtk_tree_model_iter_next (list->model, &types_iter));
 
-	return found;
+	return FALSE;
 }
 
 static char *
@@ -279,24 +229,28 @@ out:
 }
 
 static void
-update_connection_row (GtkListStore *store,
+update_connection_row (NMConnectionList *self,
                        GtkTreeIter *iter,
                        NMSettingsConnectionInterface *connection)
 {
 	NMSettingConnection *s_con;
-	char *last_used;
+	char *last_used, *id;
 
 	s_con = NM_SETTING_CONNECTION (nm_connection_get_setting (NM_CONNECTION (connection), NM_TYPE_SETTING_CONNECTION));
 	g_assert (s_con);
 
 	last_used = format_last_used (nm_setting_connection_get_timestamp (s_con));
-	gtk_list_store_set (store, iter,
-	                    COL_ID, nm_setting_connection_get_id (s_con),
+	id = g_markup_escape_text (nm_setting_connection_get_id (s_con), -1);
+	gtk_tree_store_set (GTK_TREE_STORE (self->model), iter,
+	                    COL_ID, id,
 	                    COL_LAST_USED, last_used,
 	                    COL_TIMESTAMP, nm_setting_connection_get_timestamp (s_con),
 	                    COL_CONNECTION, connection,
 	                    -1);
 	g_free (last_used);
+	g_free (id);
+
+	gtk_tree_model_filter_refilter (self->filter);
 }
 
 
@@ -601,7 +555,7 @@ add_finished_cb (NMConnectionList *list, GError *error, gpointer user_data)
 static void
 add_response_cb (NMConnectionEditor *editor, gint response, GError *error, gpointer user_data)
 {
-	ActionInfo *info = (ActionInfo *) user_data;
+	NMConnectionList *list = user_data;
 	GError *add_error = NULL;
 
 	/* if the dialog is busy waiting for authorization or something,
@@ -616,7 +570,7 @@ add_response_cb (NMConnectionEditor *editor, gint response, GError *error, gpoin
 			/* Yay we can try to add the connection; it'll get removed from
 			 * list->editors when the add finishes.
 			 */
-			add_connection (info->list, editor, add_finished_cb, editor);
+			add_connection (list, editor, add_finished_cb, editor);
 			return;
 		} else {
 			error_dialog (GTK_WINDOW (editor->window),
@@ -636,7 +590,7 @@ add_response_cb (NMConnectionEditor *editor, gint response, GError *error, gpoin
 		              "%s", message);
 	}
 
-	g_hash_table_remove (info->list->editors, nm_connection_editor_get_connection (editor));
+	g_hash_table_remove (list->editors, nm_connection_editor_get_connection (editor));
 }
 
 static void
@@ -645,29 +599,27 @@ really_add_connection (NMConnection *connection,
                        GError *error,
                        gpointer user_data)
 {
-	ActionInfo *info = user_data;
+	NMConnectionList *list = user_data;
 	NMConnectionEditor *editor;
 	GError *editor_error = NULL;
 	const char *message = _("The connection editor dialog could not be initialized due to an unknown error.");
 
-	g_return_if_fail (info != NULL);
-
 	if (canceled)
 		return;
 
 	if (!connection) {
-		error_dialog (info->list_window,
+		error_dialog (GTK_WINDOW (list->dialog),
 		              _("Could not create new connection"),
 		              "%s",
 		              (error && error->message) ? error->message : message);
 		return;
 	}
 
-	editor = nm_connection_editor_new (connection, info->list->system_settings, &error);
+	editor = nm_connection_editor_new (connection, list->system_settings, &error);
 	if (!editor) {
 		g_object_unref (connection);
 
-		error_dialog (info->list_window,
+		error_dialog (GTK_WINDOW (list->dialog),
 		              _("Could not edit new connection"),
 		              "%s",
 		              (editor_error && editor_error->message) ? editor_error->message : message);
@@ -675,39 +627,23 @@ really_add_connection (NMConnection *connection,
 		return;
 	}
 
-	g_signal_connect (editor, "done", G_CALLBACK (add_response_cb), info);
-	g_hash_table_insert (info->list->editors, connection, editor);
+	g_signal_connect (editor, "done", G_CALLBACK (add_response_cb), list);
+	g_hash_table_insert (list->editors, connection, editor);
 
 	nm_connection_editor_run (editor);
 }
 
-static GSList *
-page_get_connections (gpointer user_data)
-{
-	ActionInfo *info = (ActionInfo *) user_data;
-
-	return g_slist_concat (nm_settings_interface_list_connections (NM_SETTINGS_INTERFACE (info->list->system_settings)),
-	                       nm_settings_interface_list_connections (NM_SETTINGS_INTERFACE (info->list->gconf_settings)));
-}
-
 static void
 add_clicked (GtkButton *button, gpointer user_data)
 {
-	ActionInfo *info = (ActionInfo *) user_data;
-	NMConnectionList *list = info->list;
-	GType ctype;
-
-	if (!info->new_func) {
-		ctype = GPOINTER_TO_SIZE (g_object_get_data (G_OBJECT (info->treeview), TV_TYPE_TAG));
-		g_warning ("No new-connection function registered for type '%s'",
-		           g_type_name (ctype));
-		return;
-	}
-
-	(*(info->new_func)) (GTK_WINDOW (list->dialog),
-	                     really_add_connection,
-	                     page_get_connections,
-	                     info);
+	NMConnectionList *list = user_data;
+
+	new_connection_dialog (GTK_WINDOW (list->dialog),
+	                       list->system_settings,
+	                       list->gconf_settings,
+	                       NULL,
+	                       really_add_connection,
+	                       list);
 }
 
 typedef struct {
@@ -723,17 +659,27 @@ connection_updated_cb (NMConnectionList *list,
                        gpointer user_data)
 {
 	EditInfo *info = user_data;
+	GtkTreeIter iter;
 
-	if (!error) {
-		GtkListStore *store;
-		GtkTreeIter iter;
-
-		store = get_model_for_connection (list, connection);
-		g_assert (store);
-		if (get_iter_for_connection (GTK_TREE_MODEL (store), connection, &iter))
-			update_connection_row (store, &iter, connection);
+	if (error) {
+		/* Log the error and do nothing.  We don't want to destroy the dialog
+		 * because that's not really useful.  If there's a hard error, the user
+		 * will just have to cancel.  This better handles the case where
+		 * PolicyKit authentication is required, but the user accidentally gets
+		 * their password wrong.  Which used to close the dialog, and that's
+		 * completely unhelpful.  Instead just let them hit 'Save' again.
+		 */
+		g_warning ("Error updating connection '%s': (%d) %s",
+		           nm_connection_get_id (NM_CONNECTION (connection)),
+		           error->code,
+		           error->message);
+		return;
 	}
 
+	/* Success */
+	if (get_iter_for_connection (list, connection, &iter))
+		update_connection_row (list, &iter, connection);
+
 	g_hash_table_remove (list->editors, connection);
 	g_free (info);
 }
@@ -794,27 +740,23 @@ edit_done_cb (NMConnectionEditor *editor, gint response, GError *error, gpointer
 }
 
 static void
-do_edit (ActionInfo *info)
+edit_connection (NMConnectionList *list, NMSettingsConnectionInterface *connection)
 {
-	NMSettingsConnectionInterface *connection;
 	NMConnectionEditor *editor;
 	EditInfo *edit_info;
 	GError *error = NULL;
 	const char *message = _("The connection editor dialog could not be initialized due to an unknown error.");
 
-	connection = get_active_connection (info->treeview);
-	g_return_if_fail (connection != NULL);
-
 	/* Don't allow two editors for the same connection */
-	editor = (NMConnectionEditor *) g_hash_table_lookup (info->list->editors, connection);
+	editor = (NMConnectionEditor *) g_hash_table_lookup (list->editors, connection);
 	if (editor) {
 		nm_connection_editor_present (editor);
 		return;
 	}
 
-	editor = nm_connection_editor_new (NM_CONNECTION (connection), info->list->system_settings, &error);
+	editor = nm_connection_editor_new (NM_CONNECTION (connection), list->system_settings, &error);
 	if (!editor) {
-		error_dialog (info->list_window,
+		error_dialog (GTK_WINDOW (list->dialog),
 		              _("Could not edit connection"),
 		              "%s",
 		              (error && error->message) ? error->message : message);
@@ -822,17 +764,23 @@ do_edit (ActionInfo *info)
 	}
 
 	edit_info = g_malloc0 (sizeof (EditInfo));
-	edit_info->list = info->list;
+	edit_info->list = list;
 	edit_info->editor = editor;
 	edit_info->orig_scope = nm_connection_get_scope (NM_CONNECTION (connection));
 
 	g_signal_connect (editor, "done", G_CALLBACK (edit_done_cb), edit_info);
-	g_hash_table_insert (info->list->editors, connection, editor);
+	g_hash_table_insert (list->editors, connection, editor);
 
 	nm_connection_editor_run (editor);
 }
 
 static void
+do_edit (NMConnectionList *list)
+{
+	edit_connection (list, get_active_connection (list->connection_list));
+}
+
+static void
 delete_result_cb (NMConnectionList *list,
                   GError *error,
                   gpointer user_data)
@@ -846,7 +794,7 @@ delete_result_cb (NMConnectionList *list,
 static void
 delete_clicked (GtkButton *button, gpointer user_data)
 {
-	ActionInfo *info = (ActionInfo *) user_data;
+	NMConnectionList *list = user_data;
 	NMSettingsConnectionInterface *connection;
 	NMConnectionEditor *editor;
 	NMSettingConnection *s_con;
@@ -854,10 +802,10 @@ delete_clicked (GtkButton *button, gpointer user_data)
 	const char *id;
 	guint result;
 
-	connection = get_active_connection (info->treeview);
+	connection = get_active_connection (list->connection_list);
 	g_return_if_fail (connection != NULL);
 
-	editor = g_hash_table_lookup (info->list->editors, connection);
+	editor = g_hash_table_lookup (list->editors, connection);
 	if (editor && nm_connection_editor_get_busy (editor)) {
 		/* Editor already has an operation in progress, raise it */
 		nm_connection_editor_present (editor);
@@ -868,7 +816,7 @@ delete_clicked (GtkButton *button, gpointer user_data)
 	g_assert (s_con);
 	id = nm_setting_connection_get_id (s_con);
 
-	dialog = gtk_message_dialog_new (GTK_WINDOW (info->list->dialog),
+	dialog = gtk_message_dialog_new (GTK_WINDOW (list->dialog),
 	                                 GTK_DIALOG_DESTROY_WITH_PARENT,
 	                                 GTK_MESSAGE_QUESTION,
 	                                 GTK_BUTTONS_NONE,
@@ -878,19 +826,24 @@ delete_clicked (GtkButton *button, gpointer user_data)
 	                        GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
 	                        GTK_STOCK_DELETE, GTK_RESPONSE_YES,
 	                        NULL);
-	gtk_window_set_transient_for (GTK_WINDOW (dialog), GTK_WINDOW (info->list->dialog));
+	gtk_window_set_transient_for (GTK_WINDOW (dialog), GTK_WINDOW (list->dialog));
 
 	result = gtk_dialog_run (GTK_DIALOG (dialog));
 	gtk_widget_destroy (dialog);
 
-	if (result == GTK_RESPONSE_YES)
-		delete_connection (info->list, connection, delete_result_cb, GTK_WINDOW (info->list->dialog));
+	if (result == GTK_RESPONSE_YES) {
+		delete_connection (list,
+		                   connection,
+		                   delete_result_cb,
+		                   GTK_WINDOW (list->dialog));
+	}
 }
 
 static void
 pk_button_selection_changed_cb (GtkTreeSelection *selection, gpointer user_data)
 {
-	ActionInfo *info = (ActionInfo *) user_data;
+	CEPolkitButton *button = user_data;
+	NMConnectionList *list = g_object_get_data (G_OBJECT (button), "NMConnectionList");
 	GtkTreeIter iter;
 	GtkTreeModel *model;
 	NMSettingsConnectionInterface *connection;
@@ -902,7 +855,7 @@ pk_button_selection_changed_cb (GtkTreeSelection *selection, gpointer user_data)
 	if (!gtk_tree_selection_get_selected (selection, &model, &iter))
 		goto done;
 
-	connection = get_active_connection (info->treeview);
+	connection = get_active_connection (list->connection_list);
 	if (!connection)
 		goto done;
 
@@ -916,147 +869,8 @@ pk_button_selection_changed_cb (GtkTreeSelection *selection, gpointer user_data)
 	sensitive = !nm_setting_connection_get_read_only (s_con);
 
 done:
-	ce_polkit_button_set_use_polkit (CE_POLKIT_BUTTON (info->button), use_polkit);
-	ce_polkit_button_set_master_sensitive (CE_POLKIT_BUTTON (info->button), sensitive);
-}
-
-static void
-vpn_list_selection_changed_cb (GtkTreeSelection *selection, gpointer user_data)
-{
-	ActionInfo *info = (ActionInfo *) user_data;
-	NMVpnPluginUiInterface *plugin;
-	NMSettingsConnectionInterface *connection;
-	NMSettingVPN *s_vpn;
-	const char *service_type;
-	GtkTreeIter iter;
-	GtkTreeModel *model;
-	guint32 caps;
-	gboolean supported = FALSE;
-
-	if (!gtk_tree_selection_get_selected (selection, &model, &iter))
-		goto done;
-
-	connection = get_active_connection (info->treeview);
-	if (!connection)
-		goto done;
-
-	s_vpn = NM_SETTING_VPN (nm_connection_get_setting (NM_CONNECTION (connection), NM_TYPE_SETTING_VPN));
-	service_type = s_vpn ? nm_setting_vpn_get_service_type (s_vpn) : NULL;
-
-	if (!service_type)
-		goto done;
-
-	plugin = vpn_get_plugin_by_service (service_type);
-	if (!plugin)
-		goto done;
-
-	caps = nm_vpn_plugin_ui_interface_get_capabilities (plugin);
-	if (caps & NM_VPN_PLUGIN_UI_CAPABILITY_EXPORT)
-		supported = TRUE;
-
-done:
-	gtk_widget_set_sensitive (info->button, supported);
-}
-
-static void
-import_success_cb (NMConnection *connection, gpointer user_data)
-{
-	ActionInfo *info = (ActionInfo *) user_data;
-	NMConnectionEditor *editor;
-	NMSettingConnection *s_con;
-	NMSettingVPN *s_vpn;
-	const char *service_type;
-	char *s;
-	GError *error = NULL;
-	const char *message = _("The connection editor dialog could not be initialized due to an unknown error.");
-
-	/* Basic sanity checks of the connection */
-	s_con = NM_SETTING_CONNECTION (nm_connection_get_setting (connection, NM_TYPE_SETTING_CONNECTION));
-	if (!s_con) {
-		s_con = NM_SETTING_CONNECTION (nm_setting_connection_new ());
-		nm_connection_add_setting (connection, NM_SETTING (s_con));
-	}
-
-	s = (char *) nm_setting_connection_get_id (s_con);
-	if (!s) {
-		GSList *connections;
-
-		connections = nm_settings_interface_list_connections (NM_SETTINGS_INTERFACE (info->list->system_settings));
-		connections = g_slist_concat (connections,
-		                              nm_settings_interface_list_connections (NM_SETTINGS_INTERFACE (info->list->gconf_settings)));
-
-		s = utils_next_available_name (connections, _("VPN connection %d"));
-		g_object_set (s_con, NM_SETTING_CONNECTION_ID, s, NULL);
-		g_free (s);
-
-		g_slist_free (connections);
-	}
-
-	s = (char *) nm_setting_connection_get_connection_type (s_con);
-	if (!s || strcmp (s, NM_SETTING_VPN_SETTING_NAME))
-		g_object_set (s_con, NM_SETTING_CONNECTION_TYPE, NM_SETTING_VPN_SETTING_NAME, NULL);
-
-	s = (char *) nm_setting_connection_get_uuid (s_con);
-	if (!s) {
-		s = nm_utils_uuid_generate ();
-		g_object_set (s_con, NM_SETTING_CONNECTION_UUID, s, NULL);
-		g_free (s);
-	}
-
-	s_vpn = NM_SETTING_VPN (nm_connection_get_setting (connection, NM_TYPE_SETTING_VPN));
-	service_type = s_vpn ? nm_setting_vpn_get_service_type (s_vpn) : NULL;
-
-	if (!service_type || !strlen (service_type)) {
-		GtkWidget *dialog;
-
-		g_object_unref (connection);
-
-		dialog = gtk_message_dialog_new (NULL,
-		                                 GTK_DIALOG_DESTROY_WITH_PARENT,
-		                                 GTK_MESSAGE_ERROR,
-		                                 GTK_BUTTONS_OK,
-		                                 _("Cannot import VPN connection"));
-		gtk_message_dialog_format_secondary_text (GTK_MESSAGE_DIALOG (dialog),
-		                                 _("The VPN plugin failed to import the VPN connection correctly\n\nError: no VPN service type."));
-		gtk_window_set_transient_for (GTK_WINDOW (dialog), info->list_window);
-		g_signal_connect (dialog, "delete-event", G_CALLBACK (gtk_widget_destroy), NULL);
-		g_signal_connect (dialog, "response", G_CALLBACK (gtk_widget_destroy), NULL);
-		gtk_widget_show_all (dialog);
-		gtk_window_present (GTK_WINDOW (dialog));
-		return;
-	}
-
-	editor = nm_connection_editor_new (connection, info->list->system_settings, &error);
-	if (!editor) {
-		g_object_unref (connection);
-		error_dialog (info->list_window,
-		              _("Could not edit imported connection"),
-		              "%s",
-		              (error && error->message) ? error->message : message);
-		return;
-	}
-
-	g_signal_connect (editor, "done", G_CALLBACK (add_response_cb), info);
-	g_hash_table_insert (info->list->editors, connection, editor);
-
-	nm_connection_editor_run (editor);
-}
-
-static void
-import_vpn_cb (GtkButton *button, gpointer user_data)
-{
-	vpn_import (import_success_cb, (ActionInfo *) user_data);
-}
-
-static void
-export_vpn_cb (GtkButton *button, gpointer user_data)
-{
-	ActionInfo *info = (ActionInfo *) user_data;
-	NMSettingsConnectionInterface *connection;
-
-	connection = get_active_connection (info->treeview);
-	if (connection)
-		vpn_export (NM_CONNECTION (connection));
+	ce_polkit_button_set_use_polkit (button, use_polkit);
+	ce_polkit_button_set_master_sensitive (button, sensitive);
 }
 
 static void
@@ -1065,10 +879,10 @@ connection_double_clicked_cb (GtkTreeView *tree_view,
                               GtkTreeViewColumn *column,
                               gpointer user_data)
 {
-	ActionInfo *info = user_data;
+	GtkButton *button = user_data;
 
-	if (ce_polkit_button_get_actionable (CE_POLKIT_BUTTON (info->button)))
-		gtk_button_clicked (GTK_BUTTON (info->button));
+	if (ce_polkit_button_get_actionable (CE_POLKIT_BUTTON (button)))
+		gtk_button_clicked (button);
 }
 
 static void
@@ -1093,24 +907,11 @@ dispose (GObject *object)
 	if (list->editors)
 		g_hash_table_destroy (list->editors);
 
-	if (list->wired_icon)
-		g_object_unref (list->wired_icon);
-	if (list->wireless_icon)
-		g_object_unref (list->wireless_icon);
-	if (list->wwan_icon)
-		g_object_unref (list->wwan_icon);
-	if (list->vpn_icon)
-		g_object_unref (list->vpn_icon);
-	if (list->unknown_icon)
-		g_object_unref (list->unknown_icon);
-
 	if (list->gui)
 		g_object_unref (list->gui);
 	if (list->client)
 		g_object_unref (list->client);
 
-	g_slist_free (list->treeviews);
-
 	if (list->gconf_settings)
 		g_object_unref (list->gconf_settings);
 
@@ -1139,150 +940,150 @@ nm_connection_list_class_init (NMConnectionListClass *klass)
 					  G_TYPE_NONE, 1, G_TYPE_INT);
 }
 
-static GtkTreeView *
-add_connection_treeview (NMConnectionList *self, const char *prefix)
+static gint
+sort_connection_types (GtkTreeModel *model, GtkTreeIter *a, GtkTreeIter *b, gpointer user_data)
 {
-	GtkTreeModel *model;
-	GtkTreeModel *sort_model;
-	GtkCellRenderer *renderer;
-	GtkTreeSelection *selection;
-	GValue val = { 0, };
-	char *name;
-	GtkTreeView *treeview;
+	GtkTreeSortable *sortable = user_data;
+	int order_a, order_b;
+	GtkSortType order;
 
-	name = g_strdup_printf ("%s_list", prefix);
-	treeview = GTK_TREE_VIEW (GTK_WIDGET (gtk_builder_get_object (self->gui, name)));
-	g_free (name);
-	gtk_tree_view_set_headers_visible (treeview, TRUE);
+	gtk_tree_model_get (model, a, COL_ORDER, &order_a, -1);
+	gtk_tree_model_get (model, b, COL_ORDER, &order_b, -1);
 
-	/* Model */
-	model = GTK_TREE_MODEL (gtk_list_store_new (4, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_UINT64, G_TYPE_OBJECT));
-	sort_model = gtk_tree_model_sort_new_with_model (model);
-	gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model),
-	                                      COL_TIMESTAMP, GTK_SORT_DESCENDING);
-	gtk_tree_view_set_model (treeview, sort_model);
+	/* The connection types should stay in the same order regardless of whether
+	 * the table is sorted ascending or descending.
+	 */
+	gtk_tree_sortable_get_sort_column_id (sortable, NULL, &order);
+	if (order == GTK_SORT_ASCENDING)
+		return order_a - order_b;
+	else
+		return order_b - order_a;
+}
 
-	/* Name column */
-	gtk_tree_view_insert_column_with_attributes (treeview,
-	                                             -1, _("Name"), gtk_cell_renderer_text_new (),
-	                                             "text", COL_ID,
-	                                             NULL);
-	gtk_tree_view_column_set_expand (gtk_tree_view_get_column (treeview, 0), TRUE);
+static gint
+timestamp_sort_func (GtkTreeModel *model, GtkTreeIter *a, GtkTreeIter *b, gpointer user_data)
+{
+	NMConnection *conn_a, *conn_b;
+	guint64 time_a, time_b;
 
-	/* Last Used column */
-	renderer = gtk_cell_renderer_text_new ();
-	g_value_init (&val, G_TYPE_STRING);
-	g_value_set_string (&val, "SlateGray");
-	g_object_set_property (G_OBJECT (renderer), "foreground", &val);
+	gtk_tree_model_get (model, a,
+	                    COL_CONNECTION, &conn_a,
+	                    COL_TIMESTAMP, &time_a,
+	                    -1);
+	gtk_tree_model_get (model, b,
+	                    COL_CONNECTION, &conn_b,
+	                    COL_TIMESTAMP, &time_b,
+	                    -1);
 
-	gtk_tree_view_insert_column_with_attributes (treeview,
-	                                             -1, _("Last Used"), renderer,
-	                                             "text", COL_LAST_USED,
-	                                             NULL);
+	if (!conn_a || !conn_b) {
+		g_assert (!conn_a && !conn_b);
+		return sort_connection_types (model, a, b, user_data);
+	}
 
-	/* Selection */
-	selection = gtk_tree_view_get_selection (treeview);
-	gtk_tree_selection_set_mode (selection, GTK_SELECTION_SINGLE);
+	g_object_unref (conn_a);
+	g_object_unref (conn_b);
 
-	return treeview;
+	return time_b - time_a;
 }
 
-static void
-action_info_free (ActionInfo *info)
-{
-	g_return_if_fail (info != NULL);
-	g_free (info);
-}
-
-static ActionInfo *
-action_info_new (NMConnectionList *list,
-                 GtkTreeView *treeview,
-                 GtkWindow *list_window,
-                 GtkWidget *button)
+static gboolean
+tree_model_visible_func (GtkTreeModel *model,
+                         GtkTreeIter *iter,
+                         gpointer user_data)
 {
-	ActionInfo *info;
-
-	info = g_malloc0 (sizeof (ActionInfo));
-	g_object_weak_ref (G_OBJECT (list), (GWeakNotify) action_info_free, info);
+	NMConnection *connection;
 
-	info->list = list;
-	info->treeview = treeview;
-	info->list_window = list_window;
-	info->button = button;
-	return info;
+	gtk_tree_model_get (model, iter, COL_CONNECTION, &connection, -1);
+	if (connection) {
+		g_object_unref (connection);
+		return TRUE;
+	} else {
+		/* Top-level type nodes are visible iff they have children */
+		return gtk_tree_model_iter_has_child  (model, iter);
+	}
 }
 
 static void
-action_info_set_button (ActionInfo *info,
-                        GtkWidget *button)
+initialize_treeview (NMConnectionList *self)
 {
-	g_return_if_fail (info != NULL);
+	GtkCellRenderer *renderer;
+	GtkTreeViewColumn *column;
+	GtkTreeSelection *selection;
+	ConnectionTypeData *types;
+	GtkTreeIter iter;
+	char *id;
+	int i;
 
-	info->button = button;
-}
+	/* Model */
+	self->model = GTK_TREE_MODEL (gtk_tree_store_new (6, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_UINT64, G_TYPE_OBJECT, G_TYPE_GTYPE, G_TYPE_INT));
 
-static void
-action_info_set_new_func (ActionInfo *info,
-                          PageNewConnectionFunc func)
-{
-	g_return_if_fail (info != NULL);
+	/* Filter */
+	self->filter = GTK_TREE_MODEL_FILTER (gtk_tree_model_filter_new (self->model, NULL));
+	gtk_tree_model_filter_set_visible_func (self->filter,
+	                                        tree_model_visible_func,
+	                                        self, NULL);
 
-	info->new_func = func;
-}
+	/* Sortable */
+	self->sortable = GTK_TREE_SORTABLE (gtk_tree_model_sort_new_with_model (GTK_TREE_MODEL (self->filter)));
+	gtk_tree_sortable_set_default_sort_func (self->sortable, NULL, NULL, NULL);
+	gtk_tree_sortable_set_sort_func (self->sortable, COL_TIMESTAMP, timestamp_sort_func,
+	                                 self->sortable, NULL);
+	gtk_tree_sortable_set_sort_column_id (self->sortable, COL_TIMESTAMP, GTK_SORT_ASCENDING);
 
-static void
-check_vpn_import_supported (gpointer key, gpointer data, gpointer user_data)
-{
-	NMVpnPluginUiInterface *plugin = NM_VPN_PLUGIN_UI_INTERFACE (data);
-	gboolean *import_supported = user_data;
+	gtk_tree_view_set_model (self->connection_list, GTK_TREE_MODEL (self->sortable));
 
-	if (*import_supported)
-		return;
+	/* Name column */
+	renderer = gtk_cell_renderer_text_new ();
+	column = gtk_tree_view_column_new_with_attributes (_("Name"),
+	                                                   renderer,
+	                                                   "markup", COL_ID,
+	                                                   NULL);
+	gtk_tree_view_column_set_expand (column, TRUE);
+	gtk_tree_view_append_column (self->connection_list, column);
+
+	/* Last Used column */
+	renderer = g_object_new (GTK_TYPE_CELL_RENDERER_TEXT,
+	                         "foreground", "SlateGray",
+	                         NULL);
+	column = gtk_tree_view_column_new_with_attributes (_("Last Used"),
+	                                                   renderer,
+	                                                   "text", COL_LAST_USED,
+	                                                   NULL);
+	gtk_tree_view_append_column (self->connection_list, column);
+
+	/* Selection */
+	selection = gtk_tree_view_get_selection (self->connection_list);
+	gtk_tree_selection_set_mode (selection, GTK_SELECTION_SINGLE);
 
-	if (nm_vpn_plugin_ui_interface_get_capabilities (plugin) & NM_VPN_PLUGIN_UI_CAPABILITY_IMPORT)
-		*import_supported = TRUE;
+	/* Fill in connection types */
+	types = get_connection_type_list ();
+	for (i = 0; types[i].name; i++) {
+		id = g_strdup_printf ("<b>%s</b>", types[i].name);
+		gtk_tree_store_append (GTK_TREE_STORE (self->model), &iter, NULL);
+		gtk_tree_store_set (GTK_TREE_STORE (self->model), &iter,
+		                    COL_ID, id,
+		                    COL_GTYPE, types[i].setting_type,
+		                    COL_ORDER, i,
+		                    -1);
+		g_free (id);
+	}
 }
 
 static void
-add_connection_buttons (NMConnectionList *self,
-                        const char *prefix,
-                        GtkTreeView *treeview,
-                        GType ctype,
-                        PageNewConnectionFunc new_func)
+add_connection_buttons (NMConnectionList *self)
 {
-	char *name;
-	GtkWidget *button, *hbox;
-	ActionInfo *info;
+	GtkWidget *button, *box;
 	GtkTreeSelection *selection;
 
-	selection = gtk_tree_view_get_selection (treeview);
+	selection = gtk_tree_view_get_selection (self->connection_list);
 
 	/* Add */
-	name = g_strdup_printf ("%s_add", prefix);
-	button = GTK_WIDGET (gtk_builder_get_object (self->gui, name));
-	g_free (name);
-	info = action_info_new (self, treeview, GTK_WINDOW (self->dialog), NULL);
-	g_signal_connect (button, "clicked", G_CALLBACK (add_clicked), info);
-	if (ctype == NM_TYPE_SETTING_VPN) {
-		GHashTable *plugins;
-		gboolean have_plugins;
-
-		/* disable the "Add..." button if there aren't any VPN plugins */
-		plugins = vpn_get_plugins (NULL);
-		have_plugins = plugins && g_hash_table_size (plugins);
-		gtk_widget_set_sensitive (button, have_plugins);
-		if (!have_plugins)
-			gtk_widget_set_tooltip_text (button, _("No VPN plugin available. Please install one in order to enable this button."));
-	}
-	if (new_func)
-		action_info_set_new_func (info, new_func);
+	button = GTK_WIDGET (gtk_builder_get_object (self->gui, "connection_add"));
+	g_signal_connect (button, "clicked", G_CALLBACK (add_clicked), self);
 
-	name = g_strdup_printf ("%s_button_box", prefix);
-	hbox = GTK_WIDGET (gtk_builder_get_object (self->gui, name));
-	g_free (name);
+	box = GTK_WIDGET (gtk_builder_get_object (self->gui, "connection_button_box"));
 
 	/* Edit */
-	info = action_info_new (self, treeview, GTK_WINDOW (self->dialog), NULL);
 	button = ce_polkit_button_new (_("Edit"),
 	                               _("Edit the selected connection"),
 	                               _("Edit..."),
@@ -1290,16 +1091,15 @@ add_connection_buttons (NMConnectionList *self,
 	                               GTK_STOCK_EDIT,
 	                               self->system_settings,
 	                               NM_SETTINGS_SYSTEM_PERMISSION_CONNECTION_MODIFY);
-	gtk_box_pack_end (GTK_BOX (hbox), button, TRUE, TRUE, 0);
+	g_object_set_data (G_OBJECT (button), "NMConnectionList", self);
+	gtk_box_pack_end (GTK_BOX (box), button, TRUE, TRUE, 0);
 
-	action_info_set_button (info, button);
-	g_signal_connect_swapped (button, "clicked", G_CALLBACK (do_edit), info);
-	g_signal_connect (treeview, "row-activated", G_CALLBACK (connection_double_clicked_cb), info);
-	g_signal_connect (selection, "changed", G_CALLBACK (pk_button_selection_changed_cb), info);
-	pk_button_selection_changed_cb (selection, info);
+	g_signal_connect_swapped (button, "clicked", G_CALLBACK (do_edit), self);
+	g_signal_connect (self->connection_list, "row-activated", G_CALLBACK (connection_double_clicked_cb), button);
+	g_signal_connect (selection, "changed", G_CALLBACK (pk_button_selection_changed_cb), button);
+	pk_button_selection_changed_cb (selection, button);
 
 	/* Delete */
-	info = action_info_new (self, treeview, GTK_WINDOW (self->dialog), NULL);
 	button = ce_polkit_button_new (_("Delete"),
 	                               _("Delete the selected connection"),
 	                               _("Delete..."),
@@ -1307,131 +1107,74 @@ add_connection_buttons (NMConnectionList *self,
 	                               GTK_STOCK_DELETE,
 	                               self->system_settings,
 	                               NM_SETTINGS_SYSTEM_PERMISSION_CONNECTION_MODIFY);
-	gtk_box_pack_end (GTK_BOX (hbox), button, TRUE, TRUE, 0);
-
-	action_info_set_button (info, button);
-	g_signal_connect (button, "clicked", G_CALLBACK (delete_clicked), info);
-	g_signal_connect (selection, "changed", G_CALLBACK (pk_button_selection_changed_cb), info);
-	pk_button_selection_changed_cb (selection, info);
-
-	/* Import */
-	name = g_strdup_printf ("%s_import", prefix);
-	button = GTK_WIDGET (gtk_builder_get_object (self->gui, name));
-	g_free (name);
-	if (button) {
-		gboolean import_supported = FALSE;
-		GHashTable *plugins;
-
-		info = action_info_new (self, treeview, GTK_WINDOW (self->dialog), button);
-		g_signal_connect (button, "clicked", G_CALLBACK (import_vpn_cb), info);
-
-		plugins = vpn_get_plugins (NULL);
-		if (plugins)
-			g_hash_table_foreach (plugins, check_vpn_import_supported, &import_supported);
-		gtk_widget_set_sensitive (button, import_supported);
-	}
+	g_object_set_data (G_OBJECT (button), "NMConnectionList", self);
+	gtk_box_pack_end (GTK_BOX (box), button, TRUE, TRUE, 0);
 
-	/* Export */
-	name = g_strdup_printf ("%s_export", prefix);
-	button = GTK_WIDGET (gtk_builder_get_object (self->gui, name));
-	g_free (name);
-	if (button) {
-		info = action_info_new (self, treeview, GTK_WINDOW (self->dialog), button);
-		g_signal_connect (button, "clicked", G_CALLBACK (export_vpn_cb), info);
-		g_signal_connect (selection, "changed", G_CALLBACK (vpn_list_selection_changed_cb), info);
-		gtk_widget_set_sensitive (button, FALSE);
-	}
+	g_signal_connect (button, "clicked", G_CALLBACK (delete_clicked), self);
+	g_signal_connect (selection, "changed", G_CALLBACK (pk_button_selection_changed_cb), button);
+	pk_button_selection_changed_cb (selection, button);
+
+	gtk_widget_show_all (box);
 }
 
 static void
-add_connection_tab (NMConnectionList *self,
-                    GType def_type,
-                    GType ctype,
-                    GdkPixbuf *pixbuf,
-                    const char *prefix,
-                    const char *label_text,
-                    PageNewConnectionFunc new_func)
+connection_removed (NMSettingsConnectionInterface *connection, gpointer user_data)
 {
-	char *name;
-	GtkWidget *child, *hbox, *notebook;
-	GtkTreeView *treeview;
-	int pnum;
-
-	name = g_strdup_printf ("%s_child", prefix);
-	child = GTK_WIDGET (gtk_builder_get_object (self->gui, name));
-	g_free (name);
-
-	/* Notebook tab */
-	hbox = gtk_hbox_new (FALSE, 6);
-	if (pixbuf) {
-		GtkWidget *image;
-
-		image = gtk_image_new_from_pixbuf (pixbuf);
-		gtk_box_pack_start (GTK_BOX (hbox), image, FALSE, FALSE, 0);
-	}
-	gtk_box_pack_start (GTK_BOX (hbox), gtk_label_new (label_text), FALSE, FALSE, 0);
-	gtk_widget_show_all (hbox);
-
-	notebook = GTK_WIDGET (gtk_builder_get_object (self->gui, "list_notebook"));
-	gtk_notebook_set_tab_label (GTK_NOTEBOOK (notebook), child, hbox);
-
-	treeview = add_connection_treeview (self, prefix);
-	add_connection_buttons (self, prefix, treeview, ctype, new_func);
-	gtk_widget_show_all (GTK_WIDGET (notebook));
-
-	g_object_set_data (G_OBJECT (treeview), TV_TYPE_TAG, GSIZE_TO_POINTER (ctype));
-	self->treeviews = g_slist_prepend (self->treeviews, treeview);
+	NMConnectionList *self = NM_CONNECTION_LIST (user_data);
+	GtkTreeIter iter, parent_iter;
 
-	if (def_type == ctype) {
-		pnum = gtk_notebook_page_num (GTK_NOTEBOOK (notebook), child);
-		gtk_notebook_set_current_page (GTK_NOTEBOOK (notebook), pnum);
+	if (get_iter_for_connection (self, connection, &iter)) {
+		gtk_tree_model_iter_parent (self->model, &parent_iter, &iter);
+		gtk_tree_store_remove (GTK_TREE_STORE (self->model), &iter);
 	}
+	gtk_tree_model_filter_refilter (self->filter);
 }
 
 static void
-add_connection_tabs (NMConnectionList *self, GType def_type)
+connection_updated (NMSettingsConnectionInterface *connection,
+                    GHashTable *settings,
+                    gpointer user_data)
 {
-	add_connection_tab (self, def_type, NM_TYPE_SETTING_WIRED,
-	                    self->wired_icon, "wired", _("Wired"),
-	                    wired_connection_new);
-
-	add_connection_tab (self, def_type, NM_TYPE_SETTING_WIRELESS,
-	                    self->wireless_icon, "wireless", _("Wireless"),
-	                    wifi_connection_new);
-
-	add_connection_tab (self, def_type, NM_TYPE_SETTING_GSM,
-	                    self->wwan_icon, "wwan", _("Mobile Broadband"),
-	                    mobile_connection_new);
-
-	add_connection_tab (self, def_type, NM_TYPE_SETTING_VPN,
-	                    self->vpn_icon, "vpn", _("VPN"),
-	                    vpn_connection_new);
+	NMConnectionList *self = NM_CONNECTION_LIST (user_data);
+	GtkTreeIter iter;
 
-	add_connection_tab (self, def_type, NM_TYPE_SETTING_PPPOE,
-	                    self->wired_icon, "dsl", _("DSL"),
-	                    dsl_connection_new);
+	if (get_iter_for_connection (self, connection, &iter))
+		update_connection_row (self, &iter, connection);
 }
 
-static void
-connection_removed (NMSettingsConnectionInterface *connection, gpointer user_data)
+static gboolean
+get_parent_iter_for_connection (NMConnectionList *list,
+                                NMSettingsConnectionInterface *connection,
+                                GtkTreeIter *iter)
 {
-	GtkListStore *store = GTK_LIST_STORE (user_data);
-	GtkTreeIter iter;
+	NMSettingConnection *s_con;
+	const char *str_type;
+	GType type, row_type;
 
-	if (get_iter_for_connection (GTK_TREE_MODEL (store), connection, &iter))
-		gtk_list_store_remove (store, &iter);
-}
+	s_con = (NMSettingConnection *) nm_connection_get_setting (NM_CONNECTION (connection), NM_TYPE_SETTING_CONNECTION);
+	g_assert (s_con);
+	str_type = nm_setting_connection_get_connection_type (s_con);
+	if (!str_type) {
+		g_warning ("Ignoring incomplete connection");
+		return FALSE;
+	}
 
-static void
-connection_updated (NMSettingsConnectionInterface *connection,
-                    GHashTable *settings,
-                    gpointer user_data)
-{
-	GtkListStore *store = GTK_LIST_STORE (user_data);
-	GtkTreeIter iter;
+	if (!strcmp (str_type, NM_SETTING_CDMA_SETTING_NAME))
+		str_type = NM_SETTING_GSM_SETTING_NAME;
+	type = nm_connection_lookup_setting_type (str_type);
+
+	if (gtk_tree_model_get_iter_first (list->model, iter)) {
+		do {
+			gtk_tree_model_get (list->model, iter,
+			                    COL_GTYPE, &row_type,
+			                    -1);
+			if (row_type == type)
+				return TRUE;
+		} while (gtk_tree_model_iter_next (list->model, iter));
+	}
 
-	if (get_iter_for_connection (GTK_TREE_MODEL (store), connection, &iter))
-		update_connection_row (store, &iter, connection);
+	g_warning ("Unsupported connection type '%s'", str_type);
+	return FALSE;
 }
 
 static void
@@ -1440,21 +1183,20 @@ connection_added (NMSettingsInterface *settings,
                   gpointer user_data)
 {
 	NMConnectionList *self = NM_CONNECTION_LIST (user_data);
-	GtkListStore *store;
-	GtkTreeIter iter;
+	GtkTreeIter parent_iter, iter;
 	NMSettingConnection *s_con;
 	char *last_used;
+	gboolean expand = TRUE;
 
-	store = get_model_for_connection (self, connection);
-	if (!store)
+	if (!get_parent_iter_for_connection (self, connection, &parent_iter))
 		return;
 
 	s_con = NM_SETTING_CONNECTION (nm_connection_get_setting (NM_CONNECTION (connection), NM_TYPE_SETTING_CONNECTION));
 
 	last_used = format_last_used (nm_setting_connection_get_timestamp (s_con));
 
-	gtk_list_store_append (store, &iter);
-	gtk_list_store_set (store, &iter,
+	gtk_tree_store_append (GTK_TREE_STORE (self->model), &iter, &parent_iter);
+	gtk_tree_store_set (GTK_TREE_STORE (self->model), &iter,
 	                    COL_ID, nm_setting_connection_get_id (s_con),
 	                    COL_LAST_USED, last_used,
 	                    COL_TIMESTAMP, nm_setting_connection_get_timestamp (s_con),
@@ -1463,20 +1205,31 @@ connection_added (NMSettingsInterface *settings,
 
 	g_free (last_used);
 
-	g_signal_connect (connection, "removed", G_CALLBACK (connection_removed), store);
-	g_signal_connect (connection, "updated", G_CALLBACK (connection_updated), store);
-}
+	if (self->displayed_type) {
+		GType added_type;
 
-#define ICON_LOAD(x, y)	\
-	{ \
-		x = gtk_icon_theme_load_icon (list->icon_theme, y, 16, 0, &error); \
-		if (x == NULL) { \
-			g_warning ("Icon %s missing: %s", y, error->message); \
-			g_error_free (error); \
-			goto error; \
-		} \
+		gtk_tree_model_get (self->model, &parent_iter,
+		                    COL_GTYPE, &added_type,
+		                    -1);
+		if (added_type != self->displayed_type)
+			expand = FALSE;
 	}
 
+	if (expand) {
+		GtkTreePath *path, *filtered_path;
+
+		path = gtk_tree_model_get_path (self->model, &parent_iter);
+		filtered_path = gtk_tree_model_filter_convert_child_path_to_path (self->filter, path);
+		gtk_tree_view_expand_row (self->connection_list, filtered_path, FALSE);
+		gtk_tree_path_free (filtered_path);
+		gtk_tree_path_free (path);
+	}
+
+	g_signal_connect (connection, "removed", G_CALLBACK (connection_removed), self);
+	g_signal_connect (connection, "updated", G_CALLBACK (connection_updated), self);
+	gtk_tree_model_filter_refilter (self->filter);
+}
+
 NMConnectionList *
 nm_connection_list_new (GType def_type)
 {
@@ -1499,15 +1252,6 @@ nm_connection_list_new (GType def_type)
 
 	gtk_window_set_default_icon_name ("preferences-system-network");
 
-	list->icon_theme = gtk_icon_theme_get_for_screen (gdk_screen_get_default ());
-
-	/* Load icons */
-	ICON_LOAD(list->wired_icon, "nm-device-wired");
-	ICON_LOAD(list->wireless_icon, "nm-device-wireless");
-	ICON_LOAD(list->wwan_icon, "nm-device-wwan");
-	ICON_LOAD(list->vpn_icon, "nm-vpn-standalone-lock");
-	ICON_LOAD(list->unknown_icon, "nm-no-connection");
-
 	list->client = gconf_client_get_default ();
 	if (!list->client)
 		goto error;
@@ -1532,10 +1276,12 @@ nm_connection_list_new (GType def_type)
 	                  G_CALLBACK (connection_added),
 	                  list);
 
-	add_connection_tabs (list, def_type);
-
 	list->editors = g_hash_table_new_full (g_direct_hash, g_direct_equal, NULL, g_object_unref);
 
+	list->connection_list = GTK_TREE_VIEW (gtk_builder_get_object (list->gui, "connection_list"));
+	initialize_treeview (list);
+	add_connection_buttons (list);
+
 	list->dialog = GTK_WIDGET (gtk_builder_get_object (list->gui, "NMConnectionList"));
 	if (!list->dialog)
 		goto error;
@@ -1564,29 +1310,9 @@ nm_connection_list_present (NMConnectionList *list)
 void
 nm_connection_list_set_type (NMConnectionList *self, GType ctype)
 {
-	GtkNotebook *notebook;
-	int i;
-
 	g_return_if_fail (NM_IS_CONNECTION_LIST (self));
 
-	/* If a notebook page is found that owns the requested type, set it
-	 * as the current page.
-	 */
-	notebook = GTK_NOTEBOOK (GTK_WIDGET (gtk_builder_get_object (self->gui, "list_notebook")));
-	for (i = 0; i < gtk_notebook_get_n_pages (notebook); i++) {
-		GtkWidget *child;
-		GType child_type;
-
-		child = gtk_notebook_get_nth_page (notebook, i);
-		child_type = GPOINTER_TO_SIZE (g_object_get_data (G_OBJECT (child), TV_TYPE_TAG));
-		if (child_type == ctype) {
-			gtk_notebook_set_current_page (notebook, i);
-			break;
-		}
-	}
-
-	/* Bring the connection list to the front */
-	nm_connection_list_present (self);
+	self->displayed_type = ctype;
 }
 
 static void
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/nm-connection-list.h NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/nm-connection-list.h
index 52954a2..c554a86 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/nm-connection-list.h
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/nm-connection-list.h
@@ -39,7 +39,12 @@ typedef struct {
 
 	/* private data */
 	GHashTable *editors;
-	GSList *treeviews;
+
+	GtkTreeView *connection_list;
+	GtkTreeModel *model;
+	GtkTreeModelFilter *filter;
+	GtkTreeSortable *sortable;
+	GType displayed_type;
 
 	GConfClient *client;
 	NMAGConfSettings *gconf_settings;
@@ -47,13 +52,6 @@ typedef struct {
 
 	GtkBuilder *gui;
 	GtkWidget *dialog;
-
-	GdkPixbuf *wired_icon;
-	GdkPixbuf *wireless_icon;
-	GdkPixbuf *wwan_icon;
-	GdkPixbuf *vpn_icon;
-	GdkPixbuf *unknown_icon;
-	GtkIconTheme *icon_theme;
 } NMConnectionList;
 
 typedef struct {
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-dsl.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-dsl.c
index d21f1ad..e05bdb7 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-dsl.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-dsl.c
@@ -139,14 +139,14 @@ ce_page_dsl_new (NMConnection *connection,
 
 	if (!gtk_builder_add_from_file (parent->builder, UIDIR "/ce-page-dsl.ui", error)) {
 		g_warning ("Couldn't load builder file: %s", (*error)->message);
-		g_set_error (error, 0, 0, "%s", _("Could not load DSL user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load DSL user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
 
 	parent->page = GTK_WIDGET (gtk_builder_get_object (parent->builder, "DslPage"));
 	if (!parent->page) {
-		g_set_error (error, 0, 0, "%s", _("Could not load DSL user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load DSL user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
@@ -234,8 +234,10 @@ ce_page_dsl_class_init (CEPageDslClass *dsl_class)
 
 void
 dsl_connection_new (GtkWindow *parent,
+                    const char *detail,
+                    NMRemoteSettingsSystem *system_settings,
+                    NMAGConfSettings *gconf_settings,
                     PageNewConnectionResultFunc result_func,
-                    PageGetConnectionsFunc get_connections_func,
                     gpointer user_data)
 {
 	NMConnection *connection;
@@ -243,7 +245,8 @@ dsl_connection_new (GtkWindow *parent,
 	connection = ce_page_new_connection (_("DSL connection %d"),
 	                                     NM_SETTING_PPPOE_SETTING_NAME,
 	                                     FALSE,
-	                                     get_connections_func,
+	                                     system_settings,
+	                                     gconf_settings,
 	                                     user_data);
 	nm_connection_add_setting (connection, nm_setting_pppoe_new ());
 	nm_connection_add_setting (connection, nm_setting_wired_new ());
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-dsl.h NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-dsl.h
index e373645..a43b5b4 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-dsl.h
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-dsl.h
@@ -53,8 +53,10 @@ CEPage *ce_page_dsl_new (NMConnection *connection,
                          GError **error);
 
 void dsl_connection_new (GtkWindow *parent,
+                         const char *detail,
+                         NMRemoteSettingsSystem *system_settings,
+                         NMAGConfSettings *gconf_settings,
                          PageNewConnectionResultFunc callback,
-                         PageGetConnectionsFunc get_connections_func,
                          gpointer user_data);
 
 #endif  /* __PAGE_DSL_H__ */
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-ip4.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-ip4.c
index c758459..3875ae9 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-ip4.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-ip4.c
@@ -818,14 +818,14 @@ ce_page_ip4_new (NMConnection *connection,
 
 	if (!gtk_builder_add_from_file (parent->builder, UIDIR "/ce-page-ip4.ui", error)) {
 		g_warning ("Couldn't load builder file: %s", (*error)->message);
-		g_set_error (error, 0, 0, "%s", _("Could not load IPv4 user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load IPv4 user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
 
 	parent->page = GTK_WIDGET (gtk_builder_get_object (parent->builder, "IP4Page"));
 	if (!parent->page) {
-		g_set_error (error, 0, 0, "%s", _("Could not load IPv4 user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load IPv4 user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-ip6.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-ip6.c
index a2f769b..2765300 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-ip6.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-ip6.c
@@ -801,14 +801,14 @@ ce_page_ip6_new (NMConnection *connection,
 
 	if (!gtk_builder_add_from_file (parent->builder, UIDIR "/ce-page-ip6.ui", error)) {
 		g_warning ("Couldn't load builder file: %s", (*error)->message);
-		g_set_error (error, 0, 0, "%s", _("Could not load IPv6 user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load IPv6 user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
 
 	parent->page = GTK_WIDGET (gtk_builder_get_object (parent->builder, "IP6Page"));
 	if (!parent->page) {
-		g_set_error (error, 0, 0, "%s", _("Could not load IPv6 user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load IPv6 user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-mobile.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-mobile.c
index ccf2e59..398ca02 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-mobile.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-mobile.c
@@ -304,14 +304,14 @@ ce_page_mobile_new (NMConnection *connection,
 
 	if (!gtk_builder_add_from_file (parent->builder, UIDIR "/ce-page-mobile.ui", error)) {
 		g_warning ("Couldn't load builder file: %s", (*error)->message);
-		g_set_error (error, 0, 0, "%s", _("Could not load mobile broadband user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load mobile broadband user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
 
 	parent->page = GTK_WIDGET (gtk_builder_get_object (parent->builder, "MobilePage"));
 	if (!parent->page) {
-		g_set_error (error, 0, 0, "%s", _("Could not load mobile broadband user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load mobile broadband user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
@@ -332,7 +332,7 @@ ce_page_mobile_new (NMConnection *connection,
 	}
 
 	if (!priv->setting) {
-		g_set_error (error, 0, 0, "%s", _("Unsupported mobile broadband connection type."));
+		g_set_error (error, NMA_ERROR, NMA_ERROR_GENERIC, "%s", _("Unsupported mobile broadband connection type."));
 		g_object_unref (self);
 		return NULL;
 	}
@@ -476,8 +476,9 @@ add_default_serial_setting (NMConnection *connection)
 }
 
 typedef struct {
+    NMRemoteSettingsSystem *system_settings;
+    NMAGConfSettings *gconf_settings;
     PageNewConnectionResultFunc result_func;
-    PageGetConnectionsFunc get_connections_func;
     gpointer user_data;
 } WizardInfo;
 
@@ -526,7 +527,9 @@ new_connection_mobile_wizard_done (MobileWizard *wizard,
 			detail = g_strdup_printf ("%s %s %%d", method->provider_name, method->plan_name);
 		else
 			detail = g_strdup_printf ("%s connection %%d", method->provider_name);
-		connection = ce_page_new_connection (detail, ctype, FALSE, info->get_connections_func, info->user_data);
+		connection = ce_page_new_connection (detail, ctype, FALSE,
+		                                     info->system_settings, info->gconf_settings,
+		                                     info->user_data);
 		g_free (detail);
 
 		nm_connection_add_setting (connection, type_setting);
@@ -538,6 +541,9 @@ new_connection_mobile_wizard_done (MobileWizard *wizard,
 
 	if (wizard)
 		mobile_wizard_destroy (wizard);
+
+	g_object_unref (info->system_settings);
+	g_object_unref (info->gconf_settings);
 	g_free (info);
 }
 
@@ -549,8 +555,10 @@ cancel_dialog (GtkDialog *dialog)
 
 void
 mobile_connection_new (GtkWindow *parent,
+                       const char *detail,
+                       NMRemoteSettingsSystem *system_settings,
+                       NMAGConfSettings *gconf_settings,
                        PageNewConnectionResultFunc result_func,
-                       PageGetConnectionsFunc get_connections_func,
                        gpointer user_data)
 {
 	MobileWizard *wizard;
@@ -562,7 +570,8 @@ mobile_connection_new (GtkWindow *parent,
 
 	info = g_malloc0 (sizeof (WizardInfo));
 	info->result_func = result_func;
-	info->get_connections_func = get_connections_func;
+	info->system_settings = g_object_ref (system_settings);
+	info->gconf_settings = g_object_ref (gconf_settings);
 	info->user_data = user_data;
 
 	wizard = mobile_wizard_new (parent, NULL, NM_DEVICE_TYPE_UNKNOWN, FALSE,
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-mobile.h NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-mobile.h
index 5db4b67..495f403 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-mobile.h
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-mobile.h
@@ -53,8 +53,10 @@ CEPage *ce_page_mobile_new (NMConnection *connection,
                             GError **error);
 
 void mobile_connection_new (GtkWindow *parent,
+                            const char *detail,
+                            NMRemoteSettingsSystem *system_settings,
+                            NMAGConfSettings *gconf_settings,
                             PageNewConnectionResultFunc result_func,
-                            PageGetConnectionsFunc get_connections_func,
                             gpointer user_data);
 
 #endif  /* __PAGE_MOBILE_H__ */
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-ppp.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-ppp.c
index 91f3523..281a54f 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-ppp.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-ppp.c
@@ -282,14 +282,14 @@ ce_page_ppp_new (NMConnection *connection,
 
 	if (!gtk_builder_add_from_file (parent->builder, UIDIR "/ce-page-ppp.ui", error)) {
 		g_warning ("Couldn't load builder file: %s", (*error)->message);
-		g_set_error (error, 0, 0, "%s", _("Could not load PPP user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load PPP user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
 
 	parent->page = GTK_WIDGET (gtk_builder_get_object (parent->builder, "PppPage"));
 	if (!parent->page) {
-		g_set_error (error, 0, 0, "%s", _("Could not load PPP user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load PPP user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-vpn.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-vpn.c
index dd26758..50b66b7 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-vpn.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-vpn.c
@@ -27,11 +27,13 @@
 
 #include <nm-setting-connection.h>
 #include <nm-setting-vpn.h>
+#include <nm-utils.h>
 
 #define NM_VPN_API_SUBJECT_TO_CHANGE
 #include <nm-vpn-plugin-ui-interface.h>
 
 #include "page-vpn.h"
+#include "new-connection.h"
 #include "nm-connection-editor.h"
 #include "vpn-helpers.h"
 
@@ -116,7 +118,7 @@ ce_page_vpn_new (NMConnection *connection,
 
 	priv->plugin = vpn_get_plugin_by_service (service_type);
 	if (!priv->plugin) {
-		g_set_error (error, 0, 0, _("Could not find VPN plugin service for '%s'."), service_type);
+		g_set_error (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not find VPN plugin service for '%s'."), service_type);
 		g_object_unref (self);
 		return NULL;
 	}
@@ -147,6 +149,14 @@ ce_page_vpn_save_secrets (CEPage *page, NMConnection *connection)
 	return success;
 }
 
+gboolean
+ce_page_vpn_can_export (CEPageVpn *page)
+{
+	CEPageVpnPrivate *priv = CE_PAGE_VPN_GET_PRIVATE (page);
+
+	return 	(nm_vpn_plugin_ui_interface_get_capabilities (priv->plugin) & NM_VPN_PLUGIN_UI_CAPABILITY_EXPORT) != 0;
+}
+
 static gboolean
 validate (CEPage *page, NMConnection *connection, GError **error)
 {
@@ -193,31 +203,111 @@ ce_page_vpn_class_init (CEPageVpnClass *vpn_class)
 	parent_class->validate = validate;
 }
 
+typedef struct {
+	NMRemoteSettingsSystem *system_settings;
+	NMAGConfSettings *gconf_settings;
+	PageNewConnectionResultFunc result_func;
+	gpointer user_data;
+} NewVpnInfo;
+
+static void
+import_cb (NMConnection *connection, gpointer user_data)
+{
+	NewVpnInfo *info = (NewVpnInfo *) user_data;
+	NMSettingConnection *s_con;
+	NMSettingVPN *s_vpn;
+	const char *service_type;
+	char *s;
+	GError *error = NULL;
+
+	/* Basic sanity checks of the connection */
+	s_con = NM_SETTING_CONNECTION (nm_connection_get_setting (connection, NM_TYPE_SETTING_CONNECTION));
+	if (!s_con) {
+		s_con = NM_SETTING_CONNECTION (nm_setting_connection_new ());
+		nm_connection_add_setting (connection, NM_SETTING (s_con));
+	}
+
+	s = (char *) nm_setting_connection_get_id (s_con);
+	if (!s) {
+		GSList *connections;
+
+		connections = ce_page_list_connections (info->system_settings,
+		                                        info->gconf_settings);
+		s = utils_next_available_name (connections, _("VPN connection %d"));
+		g_object_set (s_con, NM_SETTING_CONNECTION_ID, s, NULL);
+		g_free (s);
+
+		g_slist_free (connections);
+	}
+
+	s = (char *) nm_setting_connection_get_connection_type (s_con);
+	if (!s || strcmp (s, NM_SETTING_VPN_SETTING_NAME))
+		g_object_set (s_con, NM_SETTING_CONNECTION_TYPE, NM_SETTING_VPN_SETTING_NAME, NULL);
+
+	s = (char *) nm_setting_connection_get_uuid (s_con);
+	if (!s) {
+		s = nm_utils_uuid_generate ();
+		g_object_set (s_con, NM_SETTING_CONNECTION_UUID, s, NULL);
+		g_free (s);
+	}
+
+	s_vpn = NM_SETTING_VPN (nm_connection_get_setting (connection, NM_TYPE_SETTING_VPN));
+	service_type = s_vpn ? nm_setting_vpn_get_service_type (s_vpn) : NULL;
+
+	if (!service_type || !strlen (service_type)) {
+		g_object_unref (connection);
+		connection = NULL;
+
+		error = g_error_new_literal (NMA_ERROR, NMA_ERROR_GENERIC,
+		                             _("The VPN plugin failed to import the VPN connection correctly\n\nError: no VPN service type."));
+	}
+
+	info->result_func (connection, FALSE, error, info->user_data);
+	g_clear_error (&error);
+	g_object_unref (info->system_settings);
+	g_object_unref (info->gconf_settings);
+	g_slice_free (NewVpnInfo, info);
+}
+
+void
+vpn_connection_import (GtkWindow *parent,
+                       const char *detail,
+                       NMRemoteSettingsSystem *system_settings,
+                       NMAGConfSettings *gconf_settings,
+                       PageNewConnectionResultFunc result_func,
+                       gpointer user_data)
+{
+	NewVpnInfo *info;
+
+	info = g_slice_new (NewVpnInfo);
+	info->result_func = result_func;
+	info->system_settings = g_object_ref (system_settings);
+	info->gconf_settings = g_object_ref (gconf_settings);
+	info->user_data = user_data;
+	vpn_import (import_cb, info);
+}
 
 void
 vpn_connection_new (GtkWindow *parent,
+                    const char *detail,
+                    NMRemoteSettingsSystem *system_settings,
+                    NMAGConfSettings *gconf_settings,
                     PageNewConnectionResultFunc result_func,
-                    PageGetConnectionsFunc get_connections_func,
                     gpointer user_data)
 {
-	char *service = NULL;
 	NMConnection *connection;
 	NMSetting *s_vpn;
 
-	service = vpn_ask_connection_type (parent);
-	if (!service) {
-		(*result_func) (NULL, TRUE, NULL, user_data);
-		return;
-	}
+	g_return_if_fail (detail != NULL);
 
 	connection = ce_page_new_connection (_("VPN connection %d"),
 	                                     NM_SETTING_VPN_SETTING_NAME,
 	                                     FALSE,
-	                                     get_connections_func,
+	                                     system_settings,
+	                                     gconf_settings,
 	                                     user_data);
 	s_vpn = nm_setting_vpn_new ();
-	g_object_set (s_vpn, NM_SETTING_VPN_SERVICE_TYPE, service, NULL);
-	g_free (service);
+	g_object_set (s_vpn, NM_SETTING_VPN_SERVICE_TYPE, detail, NULL);
 	nm_connection_add_setting (connection, s_vpn);
 
 	(*result_func) (connection, FALSE, NULL, user_data);
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-vpn.h NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-vpn.h
index c198125..3a95f13 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-vpn.h
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-vpn.h
@@ -53,10 +53,20 @@ CEPage *ce_page_vpn_new (NMConnection *connection,
                          GError **error);
 
 gboolean ce_page_vpn_save_secrets (CEPage *page, NMConnection *connection);
+gboolean ce_page_vpn_can_export (CEPageVpn *page);
 
 void vpn_connection_new (GtkWindow *parent,
+                         const char *detail,
+                         NMRemoteSettingsSystem *system_settings,
+                         NMAGConfSettings *gconf_settings,
                          PageNewConnectionResultFunc result_func,
-                         PageGetConnectionsFunc get_connections_func,
                          gpointer user_data);
 
+void vpn_connection_import (GtkWindow *parent,
+                            const char *detail,
+                            NMRemoteSettingsSystem *system_settings,
+                            NMAGConfSettings *gconf_settings,
+                            PageNewConnectionResultFunc result_func,
+                            gpointer user_data);
+
 #endif  /* __PAGE_VPN_H__ */
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wired-security.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wired-security.c
index 68d34df..9f72d07 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wired-security.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wired-security.c
@@ -166,7 +166,7 @@ validate (CEPage *page, NMConnection *connection, GError **error)
 
 			g_object_unref (tmp_connection);
 		} else
-			g_set_error (error, 0, 0, "Invalid 802.1x security");
+			g_set_error (error, NMA_ERROR, NMA_ERROR_GENERIC, "Invalid 802.1x security");
 	} else {
 		nm_connection_remove_setting (connection, NM_TYPE_SETTING_802_1X);
 		valid = TRUE;
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wired.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wired.c
index 31d83fd..221cc2c 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wired.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wired.c
@@ -212,14 +212,14 @@ ce_page_wired_new (NMConnection *connection,
 
 	if (!gtk_builder_add_from_file (parent->builder, UIDIR "/ce-page-wired.ui", error)) {
 		g_warning ("Couldn't load builder file: %s", (*error)->message);
-		g_set_error (error, 0, 0, "%s", _("Could not load wired user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load wired user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
 
 	parent->page = GTK_WIDGET (gtk_builder_get_object (parent->builder, "WiredPage"));
 	if (!parent->page) {
-		g_set_error (error, 0, 0, "%s", _("Could not load wired user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load wired user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
@@ -352,8 +352,10 @@ ce_page_wired_class_init (CEPageWiredClass *wired_class)
 
 void
 wired_connection_new (GtkWindow *parent,
+                      const char *detail,
+                      NMRemoteSettingsSystem *system_settings,
+                      NMAGConfSettings *gconf_settings,
                       PageNewConnectionResultFunc result_func,
-                      PageGetConnectionsFunc get_connections_func,
                       gpointer user_data)
 {
 	NMConnection *connection;
@@ -361,7 +363,8 @@ wired_connection_new (GtkWindow *parent,
 	connection = ce_page_new_connection (_("Wired connection %d"),
 	                                     NM_SETTING_WIRED_SETTING_NAME,
 	                                     TRUE,
-	                                     get_connections_func,
+	                                     system_settings,
+	                                     gconf_settings,
 	                                     user_data);
 	nm_connection_add_setting (connection, nm_setting_wired_new ());
 
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wired.h NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wired.h
index 6a6fd57..1708c3c 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wired.h
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wired.h
@@ -53,8 +53,10 @@ CEPage *ce_page_wired_new (NMConnection *connection,
                            GError **error);
 
 void wired_connection_new (GtkWindow *parent,
+                           const char *detail,
+                           NMRemoteSettingsSystem *system_settings,
+                           NMAGConfSettings *gconf_settings,
                            PageNewConnectionResultFunc result_func,
-                           PageGetConnectionsFunc get_connections_func,
                            gpointer user_data);
 
 #endif  /* __PAGE_WIRED_H__ */
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wireless-security.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wireless-security.c
index ce9519e..b56dde5 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wireless-security.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wireless-security.c
@@ -365,7 +365,7 @@ ce_page_wireless_security_new (NMConnection *connection,
 
 	s_wireless = NM_SETTING_WIRELESS (nm_connection_get_setting (connection, NM_TYPE_SETTING_WIRELESS));
 	if (!s_wireless) {
-		g_set_error (error, 0, 0, "%s", _("Could not load WiFi security user interface; missing WiFi setting."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load WiFi security user interface; missing WiFi setting."));
 		g_object_unref (self);
 		return NULL;
 	}
@@ -374,14 +374,14 @@ ce_page_wireless_security_new (NMConnection *connection,
 
 	if (!gtk_builder_add_from_file (parent->builder, UIDIR "/ce-page-wireless-security.ui", error)) {
 		g_warning ("Couldn't load builder file: %s", (*error)->message);
-		g_set_error (error, 0, 0, "%s", _("Could not load WiFi security user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load WiFi security user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
 
 	parent->page = GTK_WIDGET (gtk_builder_get_object (parent->builder, "WirelessSecurityPage"));
 	if (!parent->page) {
-		g_set_error (error, 0, 0, "%s", _("Could not load WiFi security user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load WiFi security user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
@@ -463,9 +463,9 @@ validate (CEPage *page, NMConnection *connection, GError **error)
 			if (valid)
 				wireless_security_fill_connection (sec, connection);
 			else
-				g_set_error (error, 0, 0, "Invalid wireless security");
+				g_set_error (error, NMA_ERROR, NMA_ERROR_GENERIC, "Invalid wireless security");
 		} else
-			g_set_error (error, 0, 0, "Missing SSID");
+			g_set_error (error, NMA_ERROR, NMA_ERROR_GENERIC, "Missing SSID");
 	} else {
 		/* No security, unencrypted */
 		g_object_set (s_wireless, NM_SETTING_WIRELESS_SEC, NULL, NULL);
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wireless.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wireless.c
index 3ba41c0..21fc2be 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wireless.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wireless.c
@@ -398,14 +398,14 @@ ce_page_wireless_new (NMConnection *connection,
 
     if (!gtk_builder_add_from_file (parent->builder, UIDIR "/ce-page-wireless.ui", error)) {
         g_warning ("Couldn't load builder file: %s", (*error)->message);
-		g_set_error (error, 0, 0, "%s", _("Could not load WiFi user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load WiFi user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
 
 	parent->page = GTK_WIDGET (gtk_builder_get_object (parent->builder, "WirelessPage"));
 	if (!parent->page) {
-		g_set_error (error, 0, 0, "%s", _("Could not load WiFi user interface."));
+		g_set_error_literal (error, NMA_ERROR, NMA_ERROR_GENERIC, _("Could not load WiFi user interface."));
 		g_object_unref (self);
 		return NULL;
 	}
@@ -566,8 +566,10 @@ ce_page_wireless_class_init (CEPageWirelessClass *wireless_class)
 
 void
 wifi_connection_new (GtkWindow *parent,
+                     const char *detail,
+                     NMRemoteSettingsSystem *system_settings,
+                     NMAGConfSettings *gconf_settings,
                      PageNewConnectionResultFunc result_func,
-                     PageGetConnectionsFunc get_connections_func,
                      gpointer user_data)
 {
 	NMConnection *connection;
@@ -576,7 +578,8 @@ wifi_connection_new (GtkWindow *parent,
 	connection = ce_page_new_connection (_("Wireless connection %d"),
 	                                     NM_SETTING_WIRELESS_SETTING_NAME,
 	                                     TRUE,
-	                                     get_connections_func,
+	                                     system_settings,
+	                                     gconf_settings,
 	                                     user_data);
 	s_wifi = nm_setting_wireless_new ();
 	g_object_set (s_wifi, NM_SETTING_WIRELESS_MODE, "infrastructure", NULL);
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wireless.h NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wireless.h
index 9010161..5fb2830 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/page-wireless.h
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/page-wireless.h
@@ -57,8 +57,10 @@ GByteArray *ce_page_wireless_get_ssid (CEPageWireless *self);
 
 
 void wifi_connection_new (GtkWindow *parent,
+                          const char *detail,
+                          NMRemoteSettingsSystem *system_settings,
+                          NMAGConfSettings *gconf_settings,
                           PageNewConnectionResultFunc result_func,
-                          PageGetConnectionsFunc get_connections_func,
                           gpointer user_data);
 
 #endif  /* __PAGE_WIRELESS_H__ */
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/vpn-helpers.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/vpn-helpers.c
index bde55a0..908c94e 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/vpn-helpers.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/vpn-helpers.c
@@ -31,6 +31,7 @@
 #include <nm-setting-vpn.h>
 
 #include "vpn-helpers.h"
+#include "utils.h"
 
 #define NM_VPN_API_SUBJECT_TO_CHANGE
 #include "nm-vpn-plugin-ui-interface.h"
@@ -61,7 +62,7 @@ vpn_get_plugins (GError **error)
 
 	dir = g_dir_open (VPN_NAME_FILES_DIR, 0, NULL);
 	if (!dir) {
-		g_set_error (error, 0, 0, "Couldn't read VPN .name files directory " VPN_NAME_FILES_DIR ".");
+		g_set_error (error, NMA_ERROR, NMA_ERROR_GENERIC, "Couldn't read VPN .name files directory " VPN_NAME_FILES_DIR ".");
 		return NULL;
 	}
 
@@ -102,7 +103,7 @@ vpn_get_plugins (GError **error)
 
 		module = g_module_open (so_path, G_MODULE_BIND_LAZY | G_MODULE_BIND_LOCAL);
 		if (!module) {
-			g_set_error (error, 0, 0, "Cannot load the VPN plugin which provides the "
+			g_set_error (error, NMA_ERROR, NMA_ERROR_GENERIC, "Cannot load the VPN plugin which provides the "
 			             "service '%s'.", service);
 			goto next;
 		}
@@ -122,10 +123,10 @@ vpn_get_plugins (GError **error)
 				              NM_VPN_PLUGIN_UI_INTERFACE_SERVICE, &plug_service,
 				              NULL);
 				if (!plug_name || !strlen (plug_name)) {
-					g_set_error (error, 0, 0, "cannot load VPN plugin in '%s': missing plugin name", 
+					g_set_error (error, NMA_ERROR, NMA_ERROR_GENERIC, "cannot load VPN plugin in '%s': missing plugin name", 
 					             g_module_name (module));
 				} else if (!plug_service || strcmp (plug_service, service)) {
-					g_set_error (error, 0, 0, "cannot load VPN plugin in '%s': invalid service name", 
+					g_set_error (error, NMA_ERROR, NMA_ERROR_GENERIC, "cannot load VPN plugin in '%s': invalid service name", 
 					             g_module_name (module));
 				} else {
 					/* Success! */
@@ -137,14 +138,14 @@ vpn_get_plugins (GError **error)
 				g_free (plug_name);
 				g_free (plug_service);
 			} else {
-				g_set_error (error, 0, 0, "cannot load VPN plugin in '%s': %s", 
+				g_set_error (error, NMA_ERROR, NMA_ERROR_GENERIC, "cannot load VPN plugin in '%s': %s", 
 				             g_module_name (module), g_module_error ());
 			}
 
 			if (!success)
 				g_module_close (module);
 		} else {
-			g_set_error (error, 0, 0, "cannot locate nm_vpn_plugin_ui_factory() in '%s': %s", 
+			g_set_error (error, NMA_ERROR, NMA_ERROR_GENERIC, "cannot locate nm_vpn_plugin_ui_factory() in '%s': %s", 
 			             g_module_name (module), g_module_error ());
 			g_module_close (module);
 		}
@@ -160,30 +161,6 @@ vpn_get_plugins (GError **error)
 	return plugins;
 }
 
-
-typedef struct {
-	char *filename;
-	NMConnection *connection;
-	GError *error;
-} VpnImportInfo;
-
-static void
-try_import (gpointer key, gpointer value, gpointer user_data)
-{
-	VpnImportInfo *info = user_data;
-	NMVpnPluginUiInterface *plugin = NM_VPN_PLUGIN_UI_INTERFACE (value);
-
-	if (info->connection)
-		return;
-
-	if (info->error) {
-		g_error_free (info->error);
-		info->error = NULL;
-	}
-
-	info->connection = nm_vpn_plugin_ui_interface_import (plugin, info->filename, &(info->error));
-}
-
 typedef struct {
 	VpnImportSuccessCallback callback;
 	gpointer user_data;
@@ -194,8 +171,11 @@ import_vpn_from_file_cb (GtkWidget *dialog, gint response, gpointer user_data)
 {
 	char *filename = NULL;
 	ActionInfo *info = (ActionInfo *) user_data;
-	VpnImportInfo import_info;
-	NMConnection *connection;
+	GHashTableIter iter;
+	gpointer key;
+	NMVpnPluginUiInterface *plugin;
+	NMConnection *connection = NULL;
+	GError *error = NULL;
 
 	if (response != GTK_RESPONSE_ACCEPT)
 		goto out;
@@ -206,12 +186,12 @@ import_vpn_from_file_cb (GtkWidget *dialog, gint response, gpointer user_data)
 		goto out;
 	}
 
-	import_info.filename = filename;
-	import_info.connection = NULL;
-	import_info.error = NULL;
-	g_hash_table_foreach (plugins, try_import, (gpointer) &import_info);
+	g_hash_table_iter_init (&iter, plugins);
+	while (!connection && g_hash_table_iter_next (&iter, &key, (gpointer *)&plugin)) {
+		g_clear_error (&error);
+		connection = nm_vpn_plugin_ui_interface_import (plugin, filename, &error);
+	}
 
-	connection = import_info.connection;
 	if (connection) {
 		if (nm_connection_get_scope (connection) == NM_CONNECTION_SCOPE_UNKNOWN)
 			nm_connection_set_scope (connection, NM_CONNECTION_SCOPE_USER);
@@ -227,7 +207,7 @@ import_vpn_from_file_cb (GtkWidget *dialog, gint response, gpointer user_data)
 		                                     _("Cannot import VPN connection"));
 		gtk_message_dialog_format_secondary_text (GTK_MESSAGE_DIALOG (err_dialog),
 		                                 _("The file '%s' could not be read or does not contain recognized VPN connection information\n\nError: %s."),
-		                                 basename, import_info.error ? import_info.error->message : "unknown error");
+		                                 basename, error ? error->message : "unknown error");
 		g_free (basename);
 		g_signal_connect (err_dialog, "delete-event", G_CALLBACK (gtk_widget_destroy), NULL);
 		g_signal_connect (err_dialog, "response", G_CALLBACK (gtk_widget_destroy), NULL);
@@ -235,8 +215,7 @@ import_vpn_from_file_cb (GtkWidget *dialog, gint response, gpointer user_data)
 		gtk_window_present (GTK_WINDOW (err_dialog));
 	}
 
-	if (import_info.error)
-		g_error_free (import_info.error);
+	g_clear_error (&error);
 	g_free (filename);
 
 out:
@@ -292,7 +271,7 @@ export_vpn_to_file_cb (GtkWidget *dialog, gint response, gpointer user_data)
 
 	filename = gtk_file_chooser_get_filename (GTK_FILE_CHOOSER (dialog));
 	if (!filename) {
-		g_set_error (&error, 0, 0, "no filename");
+		g_set_error (&error, NMA_ERROR, NMA_ERROR_GENERIC, "no filename");
 		goto done;
 	}
 
@@ -321,7 +300,7 @@ export_vpn_to_file_cb (GtkWidget *dialog, gint response, gpointer user_data)
 	s_con = NM_SETTING_CONNECTION (nm_connection_get_setting (connection, NM_TYPE_SETTING_CONNECTION));
 	id = s_con ? nm_setting_connection_get_id (s_con) : NULL;
 	if (!id) {
-		g_set_error (&error, 0, 0, "connection setting invalid");
+		g_set_error (&error, NMA_ERROR, NMA_ERROR_GENERIC, "connection setting invalid");
 		goto done;
 	}
 
@@ -329,7 +308,7 @@ export_vpn_to_file_cb (GtkWidget *dialog, gint response, gpointer user_data)
 	service_type = s_vpn ? nm_setting_vpn_get_service_type (s_vpn) : NULL;
 
 	if (!service_type) {
-		g_set_error (&error, 0, 0, "VPN setting invalid");
+		g_set_error (&error, NMA_ERROR, NMA_ERROR_GENERIC, "VPN setting invalid");
 		goto done;
 	}
 
@@ -405,142 +384,3 @@ vpn_export (NMConnection *connection)
 	gtk_widget_show_all (dialog);
 	gtk_window_present (GTK_WINDOW (dialog));
 }
-
-static void
-add_plugins_to_list (gpointer key, gpointer data, gpointer user_data)
-{
-	GSList **list = (GSList **) user_data;
-
-	*list = g_slist_append (*list, NM_VPN_PLUGIN_UI_INTERFACE (data));
-}
-
-static gint
-sort_plugins (gconstpointer a, gconstpointer b)
-{
-	NMVpnPluginUiInterface *aa = NM_VPN_PLUGIN_UI_INTERFACE (a);
-	NMVpnPluginUiInterface *bb = NM_VPN_PLUGIN_UI_INTERFACE (b);
-	const char *aa_desc = NULL, *bb_desc = NULL;
-
-	g_object_get (aa, NM_VPN_PLUGIN_UI_INTERFACE_NAME, &aa_desc, NULL);
-	g_object_get (bb, NM_VPN_PLUGIN_UI_INTERFACE_NAME, &bb_desc, NULL);
-
-	if (!aa_desc)
-		return -1;
-	if (!bb_desc)
-		return 1;
-
-	return strcmp (aa_desc, bb_desc);
-}
-
-#define COL_PLUGIN_DESC 0
-#define COL_PLUGIN_OBJ  1
-
-static void
-combo_changed_cb (GtkComboBox *combo, gpointer user_data)
-{
-	GtkLabel *label = GTK_LABEL (user_data);
-	GtkTreeModel *model;
-	GtkTreeIter iter;
-	NMVpnPluginUiInterface *plugin = NULL;
-	const char *desc = NULL;
-	char *tmp;
-
-	if (!gtk_combo_box_get_active_iter (combo, &iter))
-		goto error;
-
-	model = gtk_combo_box_get_model (combo);
-	if (!model)
-		goto error;
-
-	gtk_tree_model_get (model, &iter, COL_PLUGIN_OBJ, &plugin, -1);
-	if (!plugin)
-		goto error;
-
-	g_object_get (G_OBJECT (plugin), NM_VPN_PLUGIN_UI_INTERFACE_DESC, &desc, NULL);
-	if (!desc)
-		goto error;
-
-	tmp = g_strdup_printf ("<i>%s</i>", desc);
-	gtk_label_set_markup (label, tmp);
-	g_free (tmp);
-	return;
-
-error:
-	gtk_label_set_text (label, "");
-}
-
-char *
-vpn_ask_connection_type (GtkWindow *parent)
-{
-	GtkBuilder *builder;
-	GtkWidget *dialog, *combo, *widget;
-	GtkTreeModel *model;
-	GSList *plugin_list = NULL, *iter;
-	gint response;
-	GtkTreeIter tree_iter;
-	char *service_type = NULL;
-	GError *error = NULL;
-
-	if (!plugins || !g_hash_table_size (plugins)) {
-		g_warning ("%s: no VPN plugins could be found!", __func__);
-		return NULL;
-	}
-
-	builder = gtk_builder_new();
-
-	if (!gtk_builder_add_from_file (builder, UIDIR "/ce-vpn-wizard.ui", &error)) {
-		g_warning ("Couldn't load builder file: %s", error->message);
-		g_error_free (error);
-		return NULL;
-	}
-
-	dialog = GTK_WIDGET (gtk_builder_get_object (builder, "vpn_type_dialog"));
-	if (!dialog) {
-		g_warning ("%s: couldn't load VPN wizard dialog!", __func__);
-		g_object_unref (builder);
-		return NULL;
-	}
-
-	model = GTK_TREE_MODEL (gtk_list_store_new (2, G_TYPE_STRING, G_TYPE_OBJECT));
-	g_hash_table_foreach (plugins, add_plugins_to_list, &plugin_list);
-
-	plugin_list = g_slist_sort (plugin_list, sort_plugins);
-	for (iter = plugin_list; iter; iter = g_slist_next (iter)) {
-		NMVpnPluginUiInterface *plugin = NM_VPN_PLUGIN_UI_INTERFACE (iter->data);
-		const char *desc;
-
-		gtk_list_store_append (GTK_LIST_STORE (model), &tree_iter);
-		g_object_get (plugin, NM_VPN_PLUGIN_UI_INTERFACE_NAME, &desc, NULL);
-		gtk_list_store_set (GTK_LIST_STORE (model), &tree_iter,
-		                    COL_PLUGIN_DESC, desc,
-		                    COL_PLUGIN_OBJ, plugin, -1);
-	}
-
-	combo = GTK_WIDGET (gtk_builder_get_object (builder, "vpn_type_combo"));
-	widget = GTK_WIDGET (gtk_builder_get_object (builder, "vpn_desc_label"));
-	g_signal_connect (G_OBJECT (combo), "changed", G_CALLBACK (combo_changed_cb), widget);
-	gtk_combo_box_set_model (GTK_COMBO_BOX (combo), model);
-	gtk_combo_box_set_active (GTK_COMBO_BOX (combo), 0);
-
-	gtk_window_set_transient_for (GTK_WINDOW (dialog), parent);
-	gtk_widget_show_all (dialog);
-	response = gtk_dialog_run (GTK_DIALOG (dialog));
-	if (response != GTK_RESPONSE_OK)
-		goto out;
-
-	if (gtk_combo_box_get_active_iter (GTK_COMBO_BOX (combo), &tree_iter)) {
-		NMVpnPluginUiInterface *plugin = NULL;
-
-		gtk_tree_model_get (model, &tree_iter, COL_PLUGIN_OBJ, &plugin, -1);
-		if (plugin)
-			g_object_get (G_OBJECT (plugin), NM_VPN_PLUGIN_UI_INTERFACE_SERVICE, &service_type, NULL);
-	}
-
-out:
-	gtk_widget_destroy (dialog);
-	g_object_unref (builder);
-	if (service_type)
-		return g_strdup (service_type);
-	return NULL;
-}
-
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/vpn-helpers.h NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/vpn-helpers.h
index f7cd1cb..41fe3df 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/connection-editor/vpn-helpers.h
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/connection-editor/vpn-helpers.h
@@ -39,6 +39,4 @@ void vpn_import (VpnImportSuccessCallback callback, gpointer user_data);
 
 void vpn_export (NMConnection *connection);
 
-char *vpn_ask_connection_type (GtkWindow *parent);
-
 #endif  /* _VPN_HELPERS_H_ */
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/utils/utils.c NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/utils/utils.c
index fc51583..51bc9ac 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/utils/utils.c
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/utils/utils.c
@@ -759,4 +759,3 @@ utils_escape_notify_message (const char *src)
 
 	return g_string_free (escaped, FALSE);
 }
-
diff --git NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/utils/utils.h NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/utils/utils.h
index 07d29d8..a36d9e8 100644
--- NetworkManager-0.8.1-a/network-manager-applet-0.8.1/src/utils/utils.h
+++ NetworkManager-0.8.1-b/network-manager-applet-0.8.1/src/utils/utils.h
@@ -57,5 +57,11 @@ char *utils_hash_ap (const GByteArray *ssid,
 
 char *utils_escape_notify_message (const char *src);
 
+#define NMA_ERROR (g_quark_from_static_string ("nma-error-quark"))
+
+typedef enum  {
+	NMA_ERROR_GENERIC
+} NMAError;
+
 #endif /* UTILS_H */
 
