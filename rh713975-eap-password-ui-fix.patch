diff --git a/network-manager-applet-0.8.1/src/applet.glade b/network-manager-applet-0.8.1/src/applet.glade
index b15ead7..13e2eda 100644
--- a/network-manager-applet-0.8.1/src/applet.glade
+++ b/network-manager-applet-0.8.1/src/applet.glade
@@ -638,7 +638,15 @@ Shared Key</property>
               </packing>
             </child>
             <child>
-              <placeholder/>
+              <widget class="GtkLabel" id="label">
+                <property name="visible">True</property>
+              </widget>
+              <packing>
+                <property name="top_attach">2</property>
+                <property name="bottom_attach">3</property>
+                <property name="x_options">GTK_FILL</property>
+                <property name="y_options">GTK_FILL</property>
+              </packing>
             </child>
           </widget>
         </child>
@@ -1194,7 +1202,15 @@ Both</property>
               </packing>
             </child>
             <child>
-              <placeholder/>
+              <widget class="GtkLabel" id="label1">
+                <property name="visible">True</property>
+              </widget>
+              <packing>
+                <property name="top_attach">5</property>
+                <property name="bottom_attach">6</property>
+                <property name="x_options">GTK_FILL</property>
+                <property name="y_options">GTK_FILL</property>
+              </packing>
             </child>
           </widget>
         </child>
@@ -1298,7 +1314,15 @@ Both</property>
               </packing>
             </child>
             <child>
-              <placeholder/>
+              <widget class="GtkLabel" id="label1">
+                <property name="visible">True</property>
+              </widget>
+              <packing>
+                <property name="top_attach">2</property>
+                <property name="bottom_attach">3</property>
+                <property name="x_options">GTK_FILL</property>
+                <property name="y_options">GTK_FILL</property>
+              </packing>
             </child>
           </widget>
         </child>
@@ -1555,10 +1579,19 @@ Both</property>
                 <property name="right_attach">2</property>
                 <property name="top_attach">2</property>
                 <property name="bottom_attach">3</property>
+                <property name="y_options">GTK_FILL</property>
               </packing>
             </child>
             <child>
-              <placeholder/>
+              <widget class="GtkLabel" id="label1">
+		<property name="visible">True</property>
+              </widget>
+              <packing>
+		<property name="top_attach">2</property>
+		<property name="bottom_attach">3</property>
+		<property name="x_options">GTK_FILL</property>
+		<property name="y_options">GTK_FILL</property>
+              </packing>
             </child>
           </widget>
         </child>
diff --git a/network-manager-applet-0.8.1/src/wireless-security/eap-method-leap.c b/network-manager-applet-0.8.1/src/wireless-security/eap-method-leap.c
index 8314647..4814d3e 100644
--- a/network-manager-applet-0.8.1/src/wireless-security/eap-method-leap.c
+++ b/network-manager-applet-0.8.1/src/wireless-security/eap-method-leap.c
@@ -31,16 +31,12 @@
 #include "helpers.h"
 
 static void
-show_toggled_cb (GtkCheckButton *button, EAPMethod *method)
+show_toggled_cb (GtkToggleButton *button, EAPMethodLEAP *method)
 {
-	GtkWidget *widget;
 	gboolean visible;
 
-	widget = glade_xml_get_widget (method->xml, "eap_leap_password_entry");
-	g_assert (widget);
-
-	visible = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (button));
-	gtk_entry_set_visibility (GTK_ENTRY (widget), visible);
+	visible = gtk_toggle_button_get_active (button);
+	gtk_entry_set_visibility (method->password_entry, visible);
 }
 
 static void
@@ -54,18 +50,14 @@ destroy (EAPMethod *parent)
 static gboolean
 validate (EAPMethod *parent)
 {
-	GtkWidget *widget;
+	EAPMethodLEAP *method = (EAPMethodLEAP *)parent;
 	const char *text;
 
-	widget = glade_xml_get_widget (parent->xml, "eap_leap_username_entry");
-	g_assert (widget);
-	text = gtk_entry_get_text (GTK_ENTRY (widget));
+	text = gtk_entry_get_text (method->username_entry);
 	if (!text || !strlen (text))
 		return FALSE;
 
-	widget = glade_xml_get_widget (parent->xml, "eap_leap_password_entry");
-	g_assert (widget);
-	text = gtk_entry_get_text (GTK_ENTRY (widget));
+	text = gtk_entry_get_text (method->password_entry);
 	if (!text || !strlen (text))
 		return FALSE;
 
@@ -89,21 +81,16 @@ add_to_size_group (EAPMethod *parent, GtkSizeGroup *group)
 static void
 fill_connection (EAPMethod *parent, NMConnection *connection)
 {
+	EAPMethodLEAP *method = (EAPMethodLEAP *)parent;
 	NMSetting8021x *s_8021x;
-	GtkWidget *widget;
 
 	s_8021x = NM_SETTING_802_1X (nm_connection_get_setting (connection, NM_TYPE_SETTING_802_1X));
 	g_assert (s_8021x);
 
 	nm_setting_802_1x_add_eap_method (s_8021x, "leap");
 
-	widget = glade_xml_get_widget (parent->xml, "eap_leap_username_entry");
-	g_assert (widget);
-	g_object_set (s_8021x, NM_SETTING_802_1X_IDENTITY, gtk_entry_get_text (GTK_ENTRY (widget)), NULL);
-
-	widget = glade_xml_get_widget (parent->xml, "eap_leap_password_entry");
-	g_assert (widget);
-	g_object_set (s_8021x, NM_SETTING_802_1X_PASSWORD, gtk_entry_get_text (GTK_ENTRY (widget)), NULL);
+	g_object_set (s_8021x, NM_SETTING_802_1X_IDENTITY, gtk_entry_get_text (method->username_entry), NULL);
+	g_object_set (s_8021x, NM_SETTING_802_1X_PASSWORD, gtk_entry_get_text (method->password_entry), NULL);
 }
 
 static void
@@ -116,6 +103,32 @@ update_secrets (EAPMethod *parent, NMConnection *connection)
 	                          (HelperSecretFunc) nm_setting_802_1x_get_password);
 }
 
+static void
+widgets_realized (GtkWidget *widget, EAPMethodLEAP *method)
+{
+	if (method->ws_parent->username)
+		gtk_entry_set_text (method->username_entry, method->ws_parent->username);
+	else
+		gtk_entry_set_text (method->username_entry, "");
+
+	if (method->ws_parent->password && !method->ws_parent->always_ask)
+		gtk_entry_set_text (method->password_entry, method->ws_parent->password);
+	else
+		gtk_entry_set_text (method->password_entry, "");
+
+	gtk_toggle_button_set_active (method->show_password, method->ws_parent->show_password);
+}
+
+static void
+widgets_unrealized (GtkWidget *widget, EAPMethodLEAP *method)
+{
+	wireless_security_set_userpass (method->ws_parent,
+	                                gtk_entry_get_text (method->username_entry),
+	                                gtk_entry_get_text (method->password_entry),
+	                                (gboolean) -1,
+	                                gtk_toggle_button_get_active (method->show_password));
+}
+
 EAPMethodLEAP *
 eap_method_leap_new (const char *glade_file,
                      WirelessSecurity *parent,
@@ -154,8 +167,17 @@ eap_method_leap_new (const char *glade_file,
 	                 widget,
 	                 "eap_leap_username_entry");
 
+	method->ws_parent = parent;
+	g_signal_connect (G_OBJECT (widget), "realize",
+	                  (GCallback) widgets_realized,
+	                  method);
+	g_signal_connect (G_OBJECT (widget), "unrealize",
+	                  (GCallback) widgets_unrealized,
+	                  method);
+
 	widget = glade_xml_get_widget (xml, "eap_leap_username_entry");
 	g_assert (widget);
+	method->username_entry = GTK_ENTRY (widget);
 	g_signal_connect (G_OBJECT (widget), "changed",
 	                  (GCallback) wireless_security_changed_cb,
 	                  parent);
@@ -164,11 +186,12 @@ eap_method_leap_new (const char *glade_file,
 
 		s_8021x = NM_SETTING_802_1X (nm_connection_get_setting (connection, NM_TYPE_SETTING_802_1X));
 		if (s_8021x && nm_setting_802_1x_get_identity (s_8021x))
-			gtk_entry_set_text (GTK_ENTRY (widget), nm_setting_802_1x_get_identity (s_8021x));
+			gtk_entry_set_text (method->username_entry, nm_setting_802_1x_get_identity (s_8021x));
 	}
 
 	widget = glade_xml_get_widget (xml, "eap_leap_password_entry");
 	g_assert (widget);
+	method->password_entry = GTK_ENTRY (widget);
 	g_signal_connect (G_OBJECT (widget), "changed",
 	                  (GCallback) wireless_security_changed_cb,
 	                  parent);
@@ -179,6 +202,7 @@ eap_method_leap_new (const char *glade_file,
 
 	widget = glade_xml_get_widget (xml, "show_checkbutton");
 	g_assert (widget);
+	method->show_password = GTK_TOGGLE_BUTTON (widget);
 	g_signal_connect (G_OBJECT (widget), "toggled",
 	                  (GCallback) show_toggled_cb,
 	                  method);
diff --git a/network-manager-applet-0.8.1/src/wireless-security/eap-method-leap.h b/network-manager-applet-0.8.1/src/wireless-security/eap-method-leap.h
index dc6de16..96872b1 100644
--- a/network-manager-applet-0.8.1/src/wireless-security/eap-method-leap.h
+++ b/network-manager-applet-0.8.1/src/wireless-security/eap-method-leap.h
@@ -28,6 +28,11 @@
 typedef struct {
 	struct _EAPMethod parent;
 
+	WirelessSecurity *ws_parent;
+
+	GtkEntry *username_entry;
+	GtkEntry *password_entry;
+	GtkToggleButton *show_password;
 } EAPMethodLEAP;
 
 EAPMethodLEAP * eap_method_leap_new (const char *glade_file,
diff --git a/network-manager-applet-0.8.1/src/wireless-security/eap-method-simple.c b/network-manager-applet-0.8.1/src/wireless-security/eap-method-simple.c
index adf3e5e..c67305e 100644
--- a/network-manager-applet-0.8.1/src/wireless-security/eap-method-simple.c
+++ b/network-manager-applet-0.8.1/src/wireless-security/eap-method-simple.c
@@ -32,16 +32,12 @@
 #include "helpers.h"
 
 static void
-show_toggled_cb (GtkCheckButton *button, EAPMethod *method)
+show_toggled_cb (GtkToggleButton *button, EAPMethodSimple *method)
 {
-	GtkWidget *widget;
 	gboolean visible;
 
-	widget = glade_xml_get_widget (method->xml, "eap_simple_password_entry");
-	g_assert (widget);
-
-	visible = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (button));
-	gtk_entry_set_visibility (GTK_ENTRY (widget), visible);
+	visible = gtk_toggle_button_get_active (button);
+	gtk_entry_set_visibility (method->password_entry, visible);
 }
 
 static void
@@ -55,24 +51,18 @@ destroy (EAPMethod *parent)
 static gboolean
 validate (EAPMethod *parent)
 {
-	GtkWidget *widget;
+	EAPMethodSimple *method = (EAPMethodSimple *)parent;
 	const char *text;
 
-	widget = glade_xml_get_widget (parent->xml, "eap_simple_username_entry");
-	g_assert (widget);
-	text = gtk_entry_get_text (GTK_ENTRY (widget));
+	text = gtk_entry_get_text (method->username_entry);
 	if (!text || !strlen (text))
 		return FALSE;
 
 	/* Check if the password should always be requested */
-	widget = glade_xml_get_widget (parent->xml, "eap_password_always_ask");
-	g_assert (widget);
-	if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (widget)))
+	if (gtk_toggle_button_get_active (method->always_ask))
 		return TRUE;
 
-	widget = glade_xml_get_widget (parent->xml, "eap_simple_password_entry");
-	g_assert (widget);
-	text = gtk_entry_get_text (GTK_ENTRY (widget));
+	text = gtk_entry_get_text (method->password_entry);
 	if (!text || !strlen (text))
 		return FALSE;
 
@@ -98,7 +88,6 @@ fill_connection (EAPMethod *parent, NMConnection *connection)
 {
 	EAPMethodSimple *method = (EAPMethodSimple *) parent;
 	NMSetting8021x *s_8021x;
-	GtkWidget *widget;
 	NMSettingConnection *s_con;
 	gboolean always_ask;
 
@@ -129,14 +118,10 @@ fill_connection (EAPMethod *parent, NMConnection *connection)
 			break;
 	}
 
-	widget = glade_xml_get_widget (parent->xml, "eap_simple_username_entry");
-	g_assert (widget);
-	g_object_set (s_8021x, NM_SETTING_802_1X_IDENTITY, gtk_entry_get_text (GTK_ENTRY (widget)), NULL);
+	g_object_set (s_8021x, NM_SETTING_802_1X_IDENTITY, gtk_entry_get_text (method->username_entry), NULL);
 
 	/* Save the password always ask setting */
-	widget = glade_xml_get_widget (parent->xml, "eap_password_always_ask");
-	g_assert (widget);
-	always_ask = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (widget));
+	always_ask = gtk_toggle_button_get_active (method->always_ask);
 
 	s_con = (NMSettingConnection *) nm_connection_get_setting (connection, NM_TYPE_SETTING_CONNECTION);
 	g_assert (s_con);
@@ -147,11 +132,8 @@ fill_connection (EAPMethod *parent, NMConnection *connection)
 	 * back to NM in response to a GetSecrets() call, we don't save it if the
 	 * user checked "Always Ask".
 	 */
-	if (method->is_editor == FALSE || always_ask == FALSE) {
-		widget = glade_xml_get_widget (parent->xml, "eap_simple_password_entry");
-		g_assert (widget);
-		g_object_set (s_8021x, NM_SETTING_802_1X_PASSWORD, gtk_entry_get_text (GTK_ENTRY (widget)), NULL);
-	}
+	if (method->is_editor == FALSE || always_ask == FALSE)
+		g_object_set (s_8021x, NM_SETTING_802_1X_PASSWORD, gtk_entry_get_text (method->password_entry), NULL);
 }
 
 static void
@@ -179,28 +161,46 @@ update_secrets (EAPMethod *parent, NMConnection *connection)
 }
 
 static void
-password_always_ask_changed (GtkButton *button, EAPMethodSimple *method)
+password_always_ask_changed (GtkToggleButton *button, EAPMethodSimple *method)
 {
-	EAPMethod *parent = (EAPMethod *) method;
-	GtkWidget *password_entry;
-	GtkWidget *show_checkbox;
 	gboolean always_ask;
 
-	always_ask = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (button));
-
-	password_entry = glade_xml_get_widget (parent->xml, "eap_simple_password_entry");
-	g_assert (password_entry);
-
-	show_checkbox = glade_xml_get_widget (parent->xml, "show_checkbutton");
-	g_assert (show_checkbox);
+	always_ask = gtk_toggle_button_get_active (button);
 
 	if (always_ask) {
-		gtk_entry_set_text (GTK_ENTRY (password_entry), "");
-		gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (show_checkbox), FALSE);
+		gtk_entry_set_text (method->password_entry, "");
+		gtk_toggle_button_set_active (method->show_password, FALSE);
 	}
 
-	gtk_widget_set_sensitive (password_entry, !always_ask);
-	gtk_widget_set_sensitive (show_checkbox, !always_ask);
+	gtk_widget_set_sensitive (GTK_WIDGET (method->password_entry), !always_ask);
+	gtk_widget_set_sensitive (GTK_WIDGET (method->show_password), !always_ask);
+}
+
+static void
+widgets_realized (GtkWidget *widget, EAPMethodSimple *method)
+{
+	if (method->ws_parent->username)
+		gtk_entry_set_text (method->username_entry, method->ws_parent->username);
+	else
+		gtk_entry_set_text (method->username_entry, "");
+
+	if (method->ws_parent->password && !method->ws_parent->always_ask)
+		gtk_entry_set_text (method->password_entry, method->ws_parent->password);
+	else
+		gtk_entry_set_text (method->password_entry, "");
+
+	gtk_toggle_button_set_active (method->always_ask, method->ws_parent->always_ask);
+	gtk_toggle_button_set_active (method->show_password, method->ws_parent->show_password);
+}
+
+static void
+widgets_unrealized (GtkWidget *widget, EAPMethodSimple *method)
+{
+	wireless_security_set_userpass (method->ws_parent,
+	                                gtk_entry_get_text (method->username_entry),
+	                                gtk_entry_get_text (method->password_entry),
+	                                gtk_toggle_button_get_active (method->always_ask),
+	                                gtk_toggle_button_get_active (method->show_password));
 }
 
 EAPMethodSimple *
@@ -246,9 +246,18 @@ eap_method_simple_new (const char *glade_file,
 
 	method->type = type;
 	method->is_editor = is_editor;
+	method->ws_parent = parent;
+
+	g_signal_connect (G_OBJECT (widget), "realize",
+	                  (GCallback) widgets_realized,
+	                  method);
+	g_signal_connect (G_OBJECT (widget), "unrealize",
+	                  (GCallback) widgets_unrealized,
+	                  method);
 
 	widget = glade_xml_get_widget (xml, "eap_simple_username_entry");
 	g_assert (widget);
+	method->username_entry = GTK_ENTRY (widget);
 	g_signal_connect (G_OBJECT (widget), "changed",
 	                  (GCallback) wireless_security_changed_cb,
 	                  parent);
@@ -257,17 +266,19 @@ eap_method_simple_new (const char *glade_file,
 
 		s_8021x = NM_SETTING_802_1X (nm_connection_get_setting (connection, NM_TYPE_SETTING_802_1X));
 		if (s_8021x && nm_setting_802_1x_get_identity (s_8021x))
-			gtk_entry_set_text (GTK_ENTRY (widget), nm_setting_802_1x_get_identity (s_8021x));
+			gtk_entry_set_text (method->username_entry, nm_setting_802_1x_get_identity (s_8021x));
 	}
 
 	widget = glade_xml_get_widget (xml, "eap_simple_password_entry");
 	g_assert (widget);
+	method->password_entry = GTK_ENTRY (widget);
 	g_signal_connect (G_OBJECT (widget), "changed",
 	                  (GCallback) wireless_security_changed_cb,
 	                  parent);
 
 	widget = glade_xml_get_widget (xml, "eap_password_always_ask");
 	g_assert (widget);
+	method->always_ask = GTK_TOGGLE_BUTTON (widget);
 	g_signal_connect (G_OBJECT (widget), "toggled",
 	                  (GCallback) wireless_security_changed_cb,
 	                  parent);
@@ -294,7 +305,7 @@ eap_method_simple_new (const char *glade_file,
 		always_ask = nm_gconf_get_8021x_password_always_ask (uuid);
 	}
 
-	gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (widget), always_ask);
+	gtk_toggle_button_set_active (method->always_ask, always_ask);
 
 	/* Fill secrets if there's a static (ie, not OTP) password */
 	if (connection && !always_ask)
@@ -302,6 +313,7 @@ eap_method_simple_new (const char *glade_file,
 
 	widget = glade_xml_get_widget (xml, "show_checkbutton");
 	g_assert (widget);
+	method->show_password = GTK_TOGGLE_BUTTON (widget);
 	g_signal_connect (G_OBJECT (widget), "toggled",
 	                  (GCallback) show_toggled_cb,
 	                  method);
diff --git a/network-manager-applet-0.8.1/src/wireless-security/eap-method-simple.h b/network-manager-applet-0.8.1/src/wireless-security/eap-method-simple.h
index 7395a4d..38792b4 100644
--- a/network-manager-applet-0.8.1/src/wireless-security/eap-method-simple.h
+++ b/network-manager-applet-0.8.1/src/wireless-security/eap-method-simple.h
@@ -37,8 +37,15 @@ typedef enum {
 typedef struct {
 	struct _EAPMethod parent;
 
+	WirelessSecurity *ws_parent;
+
 	EAPMethodSimpleType type;
 	gboolean is_editor;
+
+	GtkEntry *username_entry;
+	GtkEntry *password_entry;
+	GtkToggleButton *always_ask;
+	GtkToggleButton *show_password;
 } EAPMethodSimple;
 
 EAPMethodSimple * eap_method_simple_new (const char *glade_file,
diff --git a/network-manager-applet-0.8.1/src/wireless-security/wireless-security.c b/network-manager-applet-0.8.1/src/wireless-security/wireless-security.c
index 476708f..acef441 100644
--- a/network-manager-applet-0.8.1/src/wireless-security/wireless-security.c
+++ b/network-manager-applet-0.8.1/src/wireless-security/wireless-security.c
@@ -141,6 +141,12 @@ wireless_security_unref (WirelessSecurity *sec)
 		g_object_unref (sec->xml);
 		g_object_unref (sec->ui_widget);
 		(*(sec->destroy)) (sec);
+
+		g_free (sec->username);
+		if (sec->password) {
+			memset (sec->password, 0, strlen (sec->password));
+			g_free (sec->password);
+		}
 	}
 }
 
@@ -179,6 +185,27 @@ wireless_security_nag_user (WirelessSecurity *sec)
 }
 
 void
+wireless_security_set_userpass (WirelessSecurity *sec,
+                                const char *user,
+                                const char *password,
+                                gboolean always_ask,
+                                gboolean show_password)
+{
+	g_free (sec->username);
+	sec->username = g_strdup (user);
+
+	if (sec->password) {
+		memset (sec->password, 0, strlen (sec->password));
+		g_free (sec->password);
+	}
+	sec->password = g_strdup (password);
+
+	if (always_ask != (gboolean) -1)
+		sec->always_ask = always_ask;
+	sec->show_password = show_password;
+}
+
+void
 wireless_security_clear_ciphers (NMConnection *connection)
 {
 	NMSettingWirelessSecurity *s_wireless_sec;
diff --git a/network-manager-applet-0.8.1/src/wireless-security/wireless-security.h b/network-manager-applet-0.8.1/src/wireless-security/wireless-security.h
index 98483ae..3eaae2a 100644
--- a/network-manager-applet-0.8.1/src/wireless-security/wireless-security.h
+++ b/network-manager-applet-0.8.1/src/wireless-security/wireless-security.h
@@ -49,6 +49,9 @@ struct _WirelessSecurity {
 	gpointer changed_notify_data;
 	const char *default_field;
 
+	char *username, *password;
+	gboolean always_ask, show_password;
+
 	WSAddToSizeGroupFunc add_to_size_group;
 	WSFillConnectionFunc fill_connection;
 	WSUpdateSecretsFunc update_secrets;
@@ -79,6 +82,12 @@ void wireless_security_update_secrets (WirelessSecurity *sec,
 
 GtkWidget * wireless_security_nag_user (WirelessSecurity *sec);
 
+void wireless_security_set_userpass (WirelessSecurity *sec,
+                                     const char *user,
+                                     const char *password,
+                                     gboolean always_ask,
+                                     gboolean show_password);
+
 WirelessSecurity *wireless_security_ref (WirelessSecurity *sec);
 
 void wireless_security_unref (WirelessSecurity *sec);
