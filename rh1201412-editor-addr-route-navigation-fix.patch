From fcaac800f462d034a1e8a44f19959876a5256d02 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ji=C5=99=C3=AD=20Klime=C5=A1?= <jklimes@redhat.com>
Date: Tue, 17 Mar 2015 17:56:41 +0100
Subject: [PATCH] editor: improve navigation in address/route treeview (rh
 #1201412)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The commit makes these changes:
* Shift-Tab allows moving backwards (instead of messing up the cells)
* Up arrow key moves backwards as well
* Pressing Enter key in the last cell closes the row without cycling to
  the first column

https://bugzilla.redhat.com/show_bug.cgi?id=1201412

(based on upstream commit b988a2e1c65c05e4b4ce9ae8b71a78609f7f06b5)

Signed-off-by: Jiří Klimeš <jklimes@redhat.com>
---
 .../src/connection-editor/ip4-routes-dialog.c      | 60 +++++++++++++--------
 .../src/connection-editor/ip6-routes-dialog.c      | 59 ++++++++++++++-------
 .../src/connection-editor/page-ip4.c               | 61 +++++++++++++++-------
 .../src/connection-editor/page-ip6.c               | 61 +++++++++++++++-------
 network-manager-applet-0.8.1/src/utils/utils.c     | 19 +++++++
 network-manager-applet-0.8.1/src/utils/utils.h     |  2 +
 6 files changed, 181 insertions(+), 81 deletions(-)

diff --git a/network-manager-applet-0.8.1/src/connection-editor/ip4-routes-dialog.c b/network-manager-applet-0.8.1/src/connection-editor/ip4-routes-dialog.c
index b4e8f12..240d851 100644
--- a/network-manager-applet-0.8.1/src/connection-editor/ip4-routes-dialog.c
+++ b/network-manager-applet-0.8.1/src/connection-editor/ip4-routes-dialog.c
@@ -327,6 +327,9 @@ cell_editing_canceled (GtkCellRenderer *renderer, gpointer user_data)
 	validate (GTK_WIDGET (gtk_builder_get_object (builder, "ip4_routes_dialog")));
 }
 
+#define DO_NOT_CYCLE_TAG "do-not-cycle"
+#define DIRECTION_TAG    "direction"
+
 static void
 cell_edited (GtkCellRendererText *cell,
              const gchar *path_string,
@@ -341,6 +344,8 @@ cell_edited (GtkCellRendererText *cell,
 	guint32 column;
 	GtkTreeViewColumn *next_col;
 	GtkCellRenderer *next_cell;
+	gboolean can_cycle;
+	int direction, tmp;
 
 	/* Free auxiliary stuff */
 	g_free (last_edited);
@@ -357,12 +362,22 @@ cell_edited (GtkCellRendererText *cell,
 	gtk_tree_model_get_iter (GTK_TREE_MODEL (store), &iter, path);
 	gtk_list_store_set (store, &iter, column, new_text, -1);
 
-	/* Move focus to the next column */
-	column = (column >= COL_LAST) ? 0 : column + 1;
+	/* Move focus to the next/previous column */
+	can_cycle = g_object_get_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG) == NULL;
+	direction = GPOINTER_TO_INT (g_object_get_data (G_OBJECT (cell), DIRECTION_TAG));
+	g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, NULL);
+	g_object_set_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG, NULL);
+	if (direction == 0)  /* Move forward by default */
+		direction = 1;
+
+	tmp = column + direction;
+	if (can_cycle)
+		column = tmp < 0 ? COL_LAST : tmp > COL_LAST ? 0 : tmp;
+	else
+		column = tmp;
 	next_col = gtk_tree_view_get_column (GTK_TREE_VIEW (widget), column);
 	dialog = GTK_WIDGET (gtk_builder_get_object (builder, "ip4_routes_dialog"));
 	next_cell = g_slist_nth_data (g_object_get_data (G_OBJECT (dialog), "renderers"), column);
-
 	gtk_tree_view_set_cursor_on_cell (GTK_TREE_VIEW (widget), path, next_col, next_cell, TRUE);
 
 	gtk_tree_path_free (path);
@@ -496,16 +511,16 @@ cell_changed_cb (GtkEditable *editable,
 }
 
 static gboolean
-key_pressed_cb (GtkWidget *widget,
-                GdkEvent *event,
-                gpointer user_data)
+key_pressed_cb (GtkWidget *widget, GdkEventKey *event, gpointer user_data)
 {
 #if !GDK_KEY_Tab
 	#define GDK_KEY_Tab GDK_Tab
 #endif
 
-	GdkKeymapKey *keys = NULL;
-	gint n_keys;
+	GdkModifierType modifiers;
+	GtkCellRenderer *cell = (GtkCellRenderer *) user_data;
+
+	modifiers = event->state & gtk_accelerator_get_default_mod_mask ();
 
 	/*
 	 * Tab should behave the same way as Enter (cycling on cells).
@@ -515,17 +530,20 @@ key_pressed_cb (GtkWidget *widget,
 	 * But unfortunately, it showed up crash occurred with XIM input (GTK_IM_MODULE=xim).
 	 * https://bugzilla.redhat.com/show_bug.cgi?id=747368
 	 */
-	if (event->type == GDK_KEY_PRESS && event->key.keyval == GDK_KEY_Tab) {
-		/* Get hardware keycode for GDK_KEY_Return */
-		if (gdk_keymap_get_entries_for_keyval (gdk_keymap_get_default (), GDK_KEY_Return, &keys, &n_keys)) {
-			/* Change 'Tab' to 'Enter' key */
-			event->key.keyval = GDK_KEY_Return;
-			event->key.hardware_keycode = keys[0].keycode;
-		}
-		g_free (keys);
-	}
-
-	return FALSE;
+	if (event->keyval == GDK_KEY_Tab && modifiers == 0) {
+		/* Tab */
+		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (1));
+		utils_fake_return_key (event);
+	} else if (event->keyval == GDK_KEY_ISO_Left_Tab && modifiers == GDK_SHIFT_MASK) {
+		/* Shift-Tab */
+		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
+		utils_fake_return_key (event);
+	} else if (event->keyval == GDK_KEY_Up)
+		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
+	else if (event->keyval == GDK_KEY_Return || event->keyval == GDK_KEY_ISO_Enter)
+		g_object_set_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG, GUINT_TO_POINTER (TRUE));
+
+	return FALSE; /* Allow default handler to be called */
 }
 
 static void
@@ -563,7 +581,7 @@ ip4_cell_editing_started (GtkCellRenderer *cell,
 	/* Set up key pressed handler - need to handle Tab key */
 	g_signal_connect (G_OBJECT (editable), "key-press-event",
 	                  (GCallback) key_pressed_cb,
-	                  user_data);
+	                  cell);
 }
 
 static void
@@ -640,7 +658,7 @@ uint_cell_editing_started (GtkCellRenderer *cell,
 	/* Set up key pressed handler - need to handle Tab key */
 	g_signal_connect (G_OBJECT (editable), "key-press-event",
 	                  (GCallback) key_pressed_cb,
-	                  user_data);
+	                  cell);
 }
 
 static gboolean
diff --git a/network-manager-applet-0.8.1/src/connection-editor/ip6-routes-dialog.c b/network-manager-applet-0.8.1/src/connection-editor/ip6-routes-dialog.c
index 16fbe60..e482eb9 100644
--- a/network-manager-applet-0.8.1/src/connection-editor/ip6-routes-dialog.c
+++ b/network-manager-applet-0.8.1/src/connection-editor/ip6-routes-dialog.c
@@ -273,6 +273,9 @@ cell_editing_canceled (GtkCellRenderer *renderer, gpointer user_data)
 	validate (GTK_WIDGET (gtk_builder_get_object (builder, "ip6_routes_dialog")));
 }
 
+#define DO_NOT_CYCLE_TAG "do-not-cycle"
+#define DIRECTION_TAG    "direction"
+
 static void
 cell_edited (GtkCellRendererText *cell,
              const gchar *path_string,
@@ -287,6 +290,8 @@ cell_edited (GtkCellRendererText *cell,
 	guint32 column;
 	GtkTreeViewColumn *next_col;
 	GtkCellRenderer *next_cell;
+	gboolean can_cycle;
+	int direction, tmp;
 
 	/* Free auxiliary stuff */
 	g_free (last_edited);
@@ -303,8 +308,19 @@ cell_edited (GtkCellRendererText *cell,
 	gtk_tree_model_get_iter (GTK_TREE_MODEL (store), &iter, path);
 	gtk_list_store_set (store, &iter, column, new_text, -1);
 
-	/* Move focus to the next column */
-	column = (column >= COL_LAST) ? 0 : column + 1;
+	/* Move focus to the next/previous column */
+	can_cycle = g_object_get_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG) == NULL;
+	direction = GPOINTER_TO_INT (g_object_get_data (G_OBJECT (cell), DIRECTION_TAG));
+	g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, NULL);
+	g_object_set_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG, NULL);
+	if (direction == 0)  /* Move forward by default */
+		direction = 1;
+
+	tmp = column + direction;
+	if (can_cycle)
+		column = tmp < 0 ? COL_LAST : tmp > COL_LAST ? 0 : tmp;
+	else
+		column = tmp;
 	next_col = gtk_tree_view_get_column (GTK_TREE_VIEW (widget), column);
 	dialog = GTK_WIDGET (gtk_builder_get_object (builder, "ip6_routes_dialog"));
 	next_cell = g_slist_nth_data (g_object_get_data (G_OBJECT (dialog), "renderers"), column);
@@ -432,16 +448,16 @@ cell_changed_cb (GtkEditable *editable,
 }
 
 static gboolean
-key_pressed_cb (GtkWidget *widget,
-                GdkEvent *event,
-                gpointer user_data)
+key_pressed_cb (GtkWidget *widget, GdkEventKey *event, gpointer user_data)
 {
 #if !GDK_KEY_Tab
 	#define GDK_KEY_Tab GDK_Tab
 #endif
 
-	GdkKeymapKey *keys = NULL;
-	gint n_keys;
+	GdkModifierType modifiers;
+	GtkCellRenderer *cell = (GtkCellRenderer *) user_data;
+
+	modifiers = event->state & gtk_accelerator_get_default_mod_mask ();
 
 	/*
 	 * Tab should behave the same way as Enter (cycling on cells).
@@ -451,17 +467,20 @@ key_pressed_cb (GtkWidget *widget,
 	 * But unfortunately, it showed up crash occurred with XIM input (GTK_IM_MODULE=xim).
 	 * https://bugzilla.redhat.com/show_bug.cgi?id=747368
 	 */
-	if (event->type == GDK_KEY_PRESS && event->key.keyval == GDK_KEY_Tab) {
-		/* Get hardware keycode for GDK_KEY_Return */
-		if (gdk_keymap_get_entries_for_keyval (gdk_keymap_get_default (), GDK_KEY_Return, &keys, &n_keys)) {
-			/* Change 'Tab' to 'Enter' key */
-			event->key.keyval = GDK_KEY_Return;
-			event->key.hardware_keycode = keys[0].keycode;
-		}
-		g_free (keys);
-	}
-
-	return FALSE;
+	if (event->keyval == GDK_KEY_Tab && modifiers == 0) {
+		/* Tab */
+		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (1));
+		utils_fake_return_key (event);
+	} else if (event->keyval == GDK_KEY_ISO_Left_Tab && modifiers == GDK_SHIFT_MASK) {
+		/* Shift-Tab */
+		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
+		utils_fake_return_key (event);
+	} else if (event->keyval == GDK_KEY_Up)
+		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
+	else if (event->keyval == GDK_KEY_Return || event->keyval == GDK_KEY_ISO_Enter)
+		g_object_set_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG, GUINT_TO_POINTER (TRUE));
+
+	return FALSE; /* Allow default handler to be called */
 }
 
 static void
@@ -499,7 +518,7 @@ ip6_cell_editing_started (GtkCellRenderer *cell,
 	/* Set up key pressed handler - need to handle Tab key */
 	g_signal_connect (G_OBJECT (editable), "key-press-event",
 	                  (GCallback) key_pressed_cb,
-	                  user_data);
+	                  cell);
 }
 
 static void
@@ -576,7 +595,7 @@ uint_cell_editing_started (GtkCellRenderer *cell,
 	/* Set up key pressed handler - need to handle Tab key */
 	g_signal_connect (G_OBJECT (editable), "key-press-event",
 	                  (GCallback) key_pressed_cb,
-	                  user_data);
+	                  cell);
 }
 
 static gboolean
diff --git a/network-manager-applet-0.8.1/src/connection-editor/page-ip4.c b/network-manager-applet-0.8.1/src/connection-editor/page-ip4.c
index f6a315f..b204baa 100644
--- a/network-manager-applet-0.8.1/src/connection-editor/page-ip4.c
+++ b/network-manager-applet-0.8.1/src/connection-editor/page-ip4.c
@@ -549,6 +549,9 @@ cell_editing_canceled (GtkCellRenderer *renderer, gpointer user_data)
 	priv->last_column = -1;
 }
 
+#define DO_NOT_CYCLE_TAG "do-not-cycle"
+#define DIRECTION_TAG    "direction"
+
 static void
 cell_edited (GtkCellRendererText *cell,
              const gchar *path_string,
@@ -562,6 +565,9 @@ cell_edited (GtkCellRendererText *cell,
 	GtkTreeIter iter;
 	guint32 column;
 	GtkTreeViewColumn *next_col;
+	GtkCellRenderer *next_cell;
+	gboolean can_cycle;
+	int direction, tmp;
 
 	/* Free auxiliary stuff */
 	g_free (priv->last_edited);
@@ -595,10 +601,22 @@ cell_edited (GtkCellRendererText *cell,
 		g_free (prefix);
 	}
 
-	/* Move focus to the next column */
-	column = (column >= COL_LAST) ? 0 : column + 1;
+	/* Move focus to the next/previous column */
+	can_cycle = g_object_get_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG) == NULL;
+	direction = GPOINTER_TO_INT (g_object_get_data (G_OBJECT (cell), DIRECTION_TAG));
+	g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, NULL);
+	g_object_set_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG, NULL);
+	if (direction == 0)  /* Move forward by default */
+		direction = 1;
+
+	tmp = column + direction;
+	if (can_cycle)
+		column = tmp < 0 ? COL_LAST : tmp > COL_LAST ? 0 : tmp;
+	else
+		column = tmp;
 	next_col = gtk_tree_view_get_column (priv->addr_list, column);
-	gtk_tree_view_set_cursor_on_cell (priv->addr_list, path, next_col, priv->addr_cells[column], TRUE);
+	next_cell = column <= COL_LAST ? priv->addr_cells[column] : NULL;
+	gtk_tree_view_set_cursor_on_cell (priv->addr_list, path, next_col, next_cell, TRUE);
 
 	gtk_tree_path_free (path);
 	ce_page_changed (CE_PAGE (self));
@@ -721,16 +739,16 @@ cell_changed_cb (GtkEditable *editable,
 }
 
 static gboolean
-key_pressed_cb (GtkWidget *widget,
-                GdkEvent *event,
-                gpointer user_data)
+key_pressed_cb (GtkWidget *widget, GdkEventKey *event, gpointer user_data)
 {
 #if !GDK_KEY_Tab
 	#define GDK_KEY_Tab GDK_Tab
 #endif
 
-	GdkKeymapKey *keys = NULL;
-	gint n_keys;
+	GdkModifierType modifiers;
+	GtkCellRenderer *cell = (GtkCellRenderer *) user_data;
+
+	modifiers = event->state & gtk_accelerator_get_default_mod_mask ();
 
 	/*
 	 * Tab should behave the same way as Enter (cycling on cells).
@@ -740,17 +758,20 @@ key_pressed_cb (GtkWidget *widget,
 	 * But unfortunately, it showed up crash occurred with XIM input (GTK_IM_MODULE=xim).
 	 * https://bugzilla.redhat.com/show_bug.cgi?id=747368
 	 */
-	if (event->type == GDK_KEY_PRESS && event->key.keyval == GDK_KEY_Tab) {
-		/* Get hardware keycode for GDK_KEY_Return */
-		if (gdk_keymap_get_entries_for_keyval (gdk_keymap_get_default (), GDK_KEY_Return, &keys, &n_keys)) {
-			/* Change 'Tab' to 'Enter' key */
-			event->key.keyval = GDK_KEY_Return;
-			event->key.hardware_keycode = keys[0].keycode;
-		}
-		g_free (keys);
-	}
-
-	return FALSE;
+	if (event->keyval == GDK_KEY_Tab && modifiers == 0) {
+		/* Tab */
+		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (1));
+		utils_fake_return_key (event);
+	} else if (event->keyval == GDK_KEY_ISO_Left_Tab && modifiers == GDK_SHIFT_MASK) {
+		/* Shift-Tab */
+		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
+		utils_fake_return_key (event);
+	} else if (event->keyval == GDK_KEY_Up)
+		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
+	else if (event->keyval == GDK_KEY_Return || event->keyval == GDK_KEY_ISO_Enter)
+		g_object_set_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG, GUINT_TO_POINTER (TRUE));
+
+	return FALSE; /* Allow default handler to be called */
 }
 
 static void
@@ -791,7 +812,7 @@ cell_editing_started (GtkCellRenderer *cell,
 	/* Set up key pressed handler - need to handle Tab key */
 	g_signal_connect (G_OBJECT (editable), "key-press-event",
 	                  (GCallback) key_pressed_cb,
-	                  user_data);
+	                  cell);
 }
 
 static void
diff --git a/network-manager-applet-0.8.1/src/connection-editor/page-ip6.c b/network-manager-applet-0.8.1/src/connection-editor/page-ip6.c
index 788416c..575f6e9 100644
--- a/network-manager-applet-0.8.1/src/connection-editor/page-ip6.c
+++ b/network-manager-applet-0.8.1/src/connection-editor/page-ip6.c
@@ -561,6 +561,9 @@ cell_editing_canceled (GtkCellRenderer *renderer, gpointer user_data)
 	priv->last_column = -1;
 }
 
+#define DO_NOT_CYCLE_TAG "do-not-cycle"
+#define DIRECTION_TAG    "direction"
+
 static void
 cell_edited (GtkCellRendererText *cell,
              const gchar *path_string,
@@ -574,6 +577,9 @@ cell_edited (GtkCellRendererText *cell,
 	GtkTreeIter iter;
 	guint32 column;
 	GtkTreeViewColumn *next_col;
+	GtkCellRenderer *next_cell;
+	gboolean can_cycle;
+	int direction, tmp;
 
 	/* Free auxiliary stuff */
 	g_free (priv->last_edited);
@@ -586,10 +592,22 @@ cell_edited (GtkCellRendererText *cell,
 	gtk_tree_model_get_iter (GTK_TREE_MODEL (store), &iter, path);
 	gtk_list_store_set (store, &iter, column, new_text, -1);
 
-	/* Move focus to the next column */
-	column = (column >= COL_LAST) ? 0 : column + 1;
+	/* Move focus to the next/previous column */
+	can_cycle = g_object_get_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG) == NULL;
+	direction = GPOINTER_TO_INT (g_object_get_data (G_OBJECT (cell), DIRECTION_TAG));
+	g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, NULL);
+	g_object_set_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG, NULL);
+	if (direction == 0)  /* Move forward by default */
+		direction = 1;
+
+	tmp = column + direction;
+	if (can_cycle)
+		column = tmp < 0 ? COL_LAST : tmp > COL_LAST ? 0 : tmp;
+	else
+		column = tmp;
 	next_col = gtk_tree_view_get_column (priv->addr_list, column);
-	gtk_tree_view_set_cursor_on_cell (priv->addr_list, path, next_col, priv->addr_cells[column], TRUE);
+	next_cell = column <= COL_LAST ? priv->addr_cells[column] : NULL;
+	gtk_tree_view_set_cursor_on_cell (priv->addr_list, path, next_col, next_cell, TRUE);
 
 	gtk_tree_path_free (path);
 	ce_page_changed (CE_PAGE (self));
@@ -689,16 +707,16 @@ cell_changed_cb (GtkEditable *editable,
 }
 
 static gboolean
-key_pressed_cb (GtkWidget *widget,
-                GdkEvent *event,
-                gpointer user_data)
+key_pressed_cb (GtkWidget *widget, GdkEventKey *event, gpointer user_data)
 {
 #if !GDK_KEY_Tab
 	#define GDK_KEY_Tab GDK_Tab
 #endif
 
-	GdkKeymapKey *keys = NULL;
-	gint n_keys;
+	GdkModifierType modifiers;
+	GtkCellRenderer *cell = (GtkCellRenderer *) user_data;
+
+	modifiers = event->state & gtk_accelerator_get_default_mod_mask ();
 
 	/*
 	 * Tab should behave the same way as Enter (cycling on cells).
@@ -708,17 +726,20 @@ key_pressed_cb (GtkWidget *widget,
 	 * But unfortunately, it showed up crash occurred with XIM input (GTK_IM_MODULE=xim).
 	 * https://bugzilla.redhat.com/show_bug.cgi?id=747368
 	 */
-	if (event->type == GDK_KEY_PRESS && event->key.keyval == GDK_KEY_Tab) {
-		/* Get hardware keycode for GDK_KEY_Return */
-		if (gdk_keymap_get_entries_for_keyval (gdk_keymap_get_default (), GDK_KEY_Return, &keys, &n_keys)) {
-			/* Change 'Tab' to 'Enter' key */
-			event->key.keyval = GDK_KEY_Return;
-			event->key.hardware_keycode = keys[0].keycode;
-		}
-		g_free (keys);
-	}
-
-	return FALSE;
+	if (event->keyval == GDK_KEY_Tab && modifiers == 0) {
+		/* Tab */
+		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (1));
+		utils_fake_return_key (event);
+	} else if (event->keyval == GDK_KEY_ISO_Left_Tab && modifiers == GDK_SHIFT_MASK) {
+		/* Shift-Tab */
+		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
+		utils_fake_return_key (event);
+	} else if (event->keyval == GDK_KEY_Up)
+		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
+	else if (event->keyval == GDK_KEY_Return || event->keyval == GDK_KEY_ISO_Enter)
+		g_object_set_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG, GUINT_TO_POINTER (TRUE));
+
+	return FALSE; /* Allow default handler to be called */
 }
 
 static void
@@ -764,7 +785,7 @@ cell_editing_started (GtkCellRenderer *cell,
 	/* Set up key pressed handler - need to handle Tab key */
 	g_signal_connect (G_OBJECT (editable), "key-press-event",
 	                  (GCallback) key_pressed_cb,
-	                  user_data);
+	                  cell);
 }
 
 static void
diff --git a/network-manager-applet-0.8.1/src/utils/utils.c b/network-manager-applet-0.8.1/src/utils/utils.c
index 2d9381a..33703b3 100644
--- a/network-manager-applet-0.8.1/src/utils/utils.c
+++ b/network-manager-applet-0.8.1/src/utils/utils.c
@@ -25,6 +25,8 @@
 #include <netinet/ether.h>
 #include <glib.h>
 #include <glib/gi18n.h>
+#include <gtk/gtk.h>
+#include <gdk/gdkkeysyms.h>
 
 #include <nm-device-ethernet.h>
 #include <nm-device-wifi.h>
@@ -850,3 +852,19 @@ utils_set_cell_background (GtkCellRenderer *cell,
 	return count > 0;
 }
 
+/* Change key in @event to 'Enter' key. */
+void
+utils_fake_return_key (GdkEventKey *event)
+{
+	GdkKeymapKey *keys = NULL;
+	gint n_keys;
+
+	/* Get hardware keycode for GDK_KEY_Return */
+	if (gdk_keymap_get_entries_for_keyval (gdk_keymap_get_default (), GDK_KEY_Return, &keys, &n_keys)) {
+		event->keyval = GDK_KEY_Return;
+		event->hardware_keycode = keys[0].keycode;
+		event->state = 0;
+	}
+	g_free (keys);
+}
+
diff --git a/network-manager-applet-0.8.1/src/utils/utils.h b/network-manager-applet-0.8.1/src/utils/utils.h
index 750d139..d903d7a 100644
--- a/network-manager-applet-0.8.1/src/utils/utils.h
+++ b/network-manager-applet-0.8.1/src/utils/utils.h
@@ -69,5 +69,7 @@ void utils_set_cell_background (GtkCellRenderer *cell,
                                                UtilsFilterGtkEditableFunc validate_character,
                                                gpointer block_func);
 
+void utils_fake_return_key (GdkEventKey *event);
+
 #endif /* UTILS_H */
 
-- 
2.1.0

From 077cabbc52f01317913eb8fe138ee5336c52d758 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ji=C5=99=C3=AD=20Klime=C5=A1?= <jklimes@redhat.com>
Date: Mon, 30 Mar 2015 15:34:44 +0200
Subject: [PATCH] editor: additional fix for navigation in address/route
 treeview (rh #1201412)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Make keypad keys (Enter, UpArrow, DownArrow) work properly.

https://bugzilla.redhat.com/show_bug.cgi?id=1201412

(based on upstream commit 0bc3e5a226822b82440e0691385fdce015012b02)

Signed-off-by: Jiří Klimeš <jklimes@redhat.com>
---
 .../src/connection-editor/ip4-routes-dialog.c      | 25 ++++++++++++++++------
 .../src/connection-editor/ip6-routes-dialog.c      | 25 ++++++++++++++++------
 .../src/connection-editor/page-ip4.c               | 25 ++++++++++++++++------
 .../src/connection-editor/page-ip6.c               | 25 ++++++++++++++++------
 4 files changed, 76 insertions(+), 24 deletions(-)

diff --git a/network-manager-applet-0.8.1/src/connection-editor/ip4-routes-dialog.c b/network-manager-applet-0.8.1/src/connection-editor/ip4-routes-dialog.c
index c6f7490..6e306fb 100644
--- a/network-manager-applet-0.8.1/src/connection-editor/ip4-routes-dialog.c
+++ b/network-manager-applet-0.8.1/src/connection-editor/ip4-routes-dialog.c
@@ -528,13 +528,21 @@ key_pressed_cb (GtkWidget *widget, GdkEventKey *event, gpointer user_data)
 	modifiers = event->state & gtk_accelerator_get_default_mod_mask ();
 
 	/*
-	 * Tab should behave the same way as Enter (cycling on cells).
+	 * Change some keys so that they work properly:
+	 * We want:
+	 *   - Tab should behave the same way as Enter (cycling on cells),
+	 *   - Shift-Tab should move in backwards direction.
+	 *   - Down arrow moves as Enter, but we have to handle Down arrow on
+	 *     key pad.
+	 *   - Up arrow should move backwards and we also have to handle Up arrow
+	 *     on key pad.
+	 *   - Enter should end editing when pressed on last column.
 	 *
-	 * Previously, we had finished cell editing, which appeared to work:
-	 *   gtk_cell_editable_editing_done (GTK_CELL_EDITABLE (widget));
-	 * But unfortunately, it showed up crash occurred with XIM input (GTK_IM_MODULE=xim).
+	 * Note: gtk_cell_editable_editing_done (GTK_CELL_EDITABLE (widget)) cannot be called
+	 * in this function, because it would crash with XIM input (GTK_IM_MODULE=xim), see
 	 * https://bugzilla.redhat.com/show_bug.cgi?id=747368
 	 */
+
 	if (event->keyval == GDK_KEY_Tab && modifiers == 0) {
 		/* Tab */
 		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (1));
@@ -543,9 +551,14 @@ key_pressed_cb (GtkWidget *widget, GdkEventKey *event, gpointer user_data)
 		/* Shift-Tab */
 		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
 		utils_fake_return_key (event);
-	} else if (event->keyval == GDK_KEY_Up)
+	} else if (event->keyval == GDK_KEY_KP_Down)
+		event->keyval = GDK_KEY_Down;
+	else if (event->keyval == GDK_KEY_Up || event->keyval == GDK_KEY_KP_Up) {
+		event->keyval = GDK_KEY_Up;
 		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
-	else if (event->keyval == GDK_KEY_Return || event->keyval == GDK_KEY_ISO_Enter)
+	} else if (   event->keyval == GDK_KEY_Return
+	           || event->keyval == GDK_KEY_ISO_Enter
+	           || event->keyval == GDK_KEY_KP_Enter)
 		g_object_set_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG, GUINT_TO_POINTER (TRUE));
 
 	return FALSE; /* Allow default handler to be called */
diff --git a/network-manager-applet-0.8.1/src/connection-editor/ip6-routes-dialog.c b/network-manager-applet-0.8.1/src/connection-editor/ip6-routes-dialog.c
index d96ea5d..4a2bf5e 100644
--- a/network-manager-applet-0.8.1/src/connection-editor/ip6-routes-dialog.c
+++ b/network-manager-applet-0.8.1/src/connection-editor/ip6-routes-dialog.c
@@ -466,13 +466,21 @@ key_pressed_cb (GtkWidget *widget, GdkEventKey *event, gpointer user_data)
 	modifiers = event->state & gtk_accelerator_get_default_mod_mask ();
 
 	/*
-	 * Tab should behave the same way as Enter (cycling on cells).
+	 * Change some keys so that they work properly:
+	 * We want:
+	 *   - Tab should behave the same way as Enter (cycling on cells),
+	 *   - Shift-Tab should move in backwards direction.
+	 *   - Down arrow moves as Enter, but we have to handle Down arrow on
+	 *     key pad.
+	 *   - Up arrow should move backwards and we also have to handle Up arrow
+	 *     on key pad.
+	 *   - Enter should end editing when pressed on last column.
 	 *
-	 * Previously, we had finished cell editing, which appeared to work:
-	 *   gtk_cell_editable_editing_done (GTK_CELL_EDITABLE (widget));
-	 * But unfortunately, it showed up crash occurred with XIM input (GTK_IM_MODULE=xim).
+	 * Note: gtk_cell_editable_editing_done (GTK_CELL_EDITABLE (widget)) cannot be called
+	 * in this function, because it would crash with XIM input (GTK_IM_MODULE=xim), see
 	 * https://bugzilla.redhat.com/show_bug.cgi?id=747368
 	 */
+
 	if (event->keyval == GDK_KEY_Tab && modifiers == 0) {
 		/* Tab */
 		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (1));
@@ -481,9 +489,14 @@ key_pressed_cb (GtkWidget *widget, GdkEventKey *event, gpointer user_data)
 		/* Shift-Tab */
 		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
 		utils_fake_return_key (event);
-	} else if (event->keyval == GDK_KEY_Up)
+	} else if (event->keyval == GDK_KEY_KP_Down)
+		event->keyval = GDK_KEY_Down;
+	else if (event->keyval == GDK_KEY_Up || event->keyval == GDK_KEY_KP_Up) {
+		event->keyval = GDK_KEY_Up;
 		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
-	else if (event->keyval == GDK_KEY_Return || event->keyval == GDK_KEY_ISO_Enter)
+	} else if (   event->keyval == GDK_KEY_Return
+	           || event->keyval == GDK_KEY_ISO_Enter
+	           || event->keyval == GDK_KEY_KP_Enter)
 		g_object_set_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG, GUINT_TO_POINTER (TRUE));
 
 	return FALSE; /* Allow default handler to be called */
diff --git a/network-manager-applet-0.8.1/src/connection-editor/page-ip4.c b/network-manager-applet-0.8.1/src/connection-editor/page-ip4.c
index b501a75..0a3f741 100644
--- a/network-manager-applet-0.8.1/src/connection-editor/page-ip4.c
+++ b/network-manager-applet-0.8.1/src/connection-editor/page-ip4.c
@@ -758,13 +758,21 @@ key_pressed_cb (GtkWidget *widget, GdkEventKey *event, gpointer user_data)
 	modifiers = event->state & gtk_accelerator_get_default_mod_mask ();
 
 	/*
-	 * Tab should behave the same way as Enter (cycling on cells).
+	 * Change some keys so that they work properly:
+	 * We want:
+	 *   - Tab should behave the same way as Enter (cycling on cells),
+	 *   - Shift-Tab should move in backwards direction.
+	 *   - Down arrow moves as Enter, but we have to handle Down arrow on
+	 *     key pad.
+	 *   - Up arrow should move backwards and we also have to handle Up arrow
+	 *     on key pad.
+	 *   - Enter should end editing when pressed on last column.
 	 *
-	 * Previously, we had finished cell editing, which appeared to work:
-	 *   gtk_cell_editable_editing_done (GTK_CELL_EDITABLE (widget));
-	 * But unfortunately, it showed up crash occurred with XIM input (GTK_IM_MODULE=xim).
+	 * Note: gtk_cell_editable_editing_done (GTK_CELL_EDITABLE (widget)) cannot be called
+	 * in this function, because it would crash with XIM input (GTK_IM_MODULE=xim), see
 	 * https://bugzilla.redhat.com/show_bug.cgi?id=747368
 	 */
+
 	if (event->keyval == GDK_KEY_Tab && modifiers == 0) {
 		/* Tab */
 		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (1));
@@ -773,9 +781,14 @@ key_pressed_cb (GtkWidget *widget, GdkEventKey *event, gpointer user_data)
 		/* Shift-Tab */
 		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
 		utils_fake_return_key (event);
-	} else if (event->keyval == GDK_KEY_Up)
+	} else if (event->keyval == GDK_KEY_KP_Down)
+		event->keyval = GDK_KEY_Down;
+	else if (event->keyval == GDK_KEY_Up || event->keyval == GDK_KEY_KP_Up) {
+		event->keyval = GDK_KEY_Up;
 		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
-	else if (event->keyval == GDK_KEY_Return || event->keyval == GDK_KEY_ISO_Enter)
+	} else if (   event->keyval == GDK_KEY_Return
+	           || event->keyval == GDK_KEY_ISO_Enter
+	           || event->keyval == GDK_KEY_KP_Enter)
 		g_object_set_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG, GUINT_TO_POINTER (TRUE));
 
 	return FALSE; /* Allow default handler to be called */
diff --git a/network-manager-applet-0.8.1/src/connection-editor/page-ip6.c b/network-manager-applet-0.8.1/src/connection-editor/page-ip6.c
index 3bfb681..cb80e08 100644
--- a/network-manager-applet-0.8.1/src/connection-editor/page-ip6.c
+++ b/network-manager-applet-0.8.1/src/connection-editor/page-ip6.c
@@ -726,13 +726,21 @@ key_pressed_cb (GtkWidget *widget, GdkEventKey *event, gpointer user_data)
 	modifiers = event->state & gtk_accelerator_get_default_mod_mask ();
 
 	/*
-	 * Tab should behave the same way as Enter (cycling on cells).
+	 * Change some keys so that they work properly:
+	 * We want:
+	 *   - Tab should behave the same way as Enter (cycling on cells),
+	 *   - Shift-Tab should move in backwards direction.
+	 *   - Down arrow moves as Enter, but we have to handle Down arrow on
+	 *     key pad.
+	 *   - Up arrow should move backwards and we also have to handle Up arrow
+	 *     on key pad.
+	 *   - Enter should end editing when pressed on last column.
 	 *
-	 * Previously, we had finished cell editing, which appeared to work:
-	 *   gtk_cell_editable_editing_done (GTK_CELL_EDITABLE (widget));
-	 * But unfortunately, it showed up crash occurred with XIM input (GTK_IM_MODULE=xim).
+	 * Note: gtk_cell_editable_editing_done (GTK_CELL_EDITABLE (widget)) cannot be called
+	 * in this function, because it would crash with XIM input (GTK_IM_MODULE=xim), see
 	 * https://bugzilla.redhat.com/show_bug.cgi?id=747368
 	 */
+
 	if (event->keyval == GDK_KEY_Tab && modifiers == 0) {
 		/* Tab */
 		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (1));
@@ -741,9 +749,14 @@ key_pressed_cb (GtkWidget *widget, GdkEventKey *event, gpointer user_data)
 		/* Shift-Tab */
 		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
 		utils_fake_return_key (event);
-	} else if (event->keyval == GDK_KEY_Up)
+	} else if (event->keyval == GDK_KEY_KP_Down)
+		event->keyval = GDK_KEY_Down;
+	else if (event->keyval == GDK_KEY_Up || event->keyval == GDK_KEY_KP_Up) {
+		event->keyval = GDK_KEY_Up;
 		g_object_set_data (G_OBJECT (cell), DIRECTION_TAG, GINT_TO_POINTER (-1));
-	else if (event->keyval == GDK_KEY_Return || event->keyval == GDK_KEY_ISO_Enter)
+	} else if (   event->keyval == GDK_KEY_Return
+	           || event->keyval == GDK_KEY_ISO_Enter
+	           || event->keyval == GDK_KEY_KP_Enter)
 		g_object_set_data (G_OBJECT (cell), DO_NOT_CYCLE_TAG, GUINT_TO_POINTER (TRUE));
 
 	return FALSE; /* Allow default handler to be called */
-- 
2.1.0

