- core: fix double-request of new 802.1x connection secrets (rh #837056),
    caused by (rh #717475)

diff -up NetworkManager-0.8.1/src/nm-manager.c.8021x-credentials-once NetworkManager-0.8.1/src/nm-manager.c
--- NetworkManager-0.8.1/src/nm-manager.c.8021x-credentials-once	2012-09-07 08:50:38.797332892 -0500
+++ NetworkManager-0.8.1/src/nm-manager.c	2012-09-07 08:50:38.914348187 -0500
@@ -156,6 +156,11 @@ typedef struct PendingActivation Pending
 typedef void (*PendingActivationFunc) (PendingActivation *pending,
                                        GError *error);
 
+static PendingActivation *nm_manager_pending_activation_find (NMManager *self,
+                                                              const char *path,
+                                                              NMConnectionScope scope,
+                                                              const char *device_path);
+
 struct PendingActivation {
 	NMManager *manager;
 
@@ -3683,6 +3688,22 @@ nm_manager_activate_connection (NMManage
 	s_con = NM_SETTING_CONNECTION (nm_connection_get_setting (connection, NM_TYPE_SETTING_CONNECTION));
 	g_assert (s_con);
 
+	/* Don't auto-activate a connection if there's already a user-requested
+	 * activation request that's waiting for a user connection to show up or
+	 * for PolicyKit authorization.
+	 */
+	if (   !user_requested
+	    && nm_manager_pending_activation_find (manager,
+	                                           NULL,
+	                                           NM_CONNECTION_SCOPE_UNKNOWN,
+	                                           device_path)) {
+		g_set_error_literal (error,
+		                     NM_DEVICE_INTERFACE_ERROR,
+		                     NM_DEVICE_INTERFACE_ERROR_CONNECTION_ACTIVATING,
+		                     "A user-requested connection is already activating.");
+		return NULL;
+	}
+
 	if (!strcmp (nm_setting_connection_get_connection_type (s_con), NM_SETTING_VPN_SETTING_NAME))
 		return activate_vpn_connection (manager, connection, specific_object, device_path, error);
 
@@ -3821,7 +3842,8 @@ nm_manager_activate_connection (NMManage
 static PendingActivation *
 nm_manager_pending_activation_find (NMManager *self,
                                     const char *path,
-                                    NMConnectionScope scope)
+                                    NMConnectionScope scope,
+                                    const char *device_path)
 {
 	NMManagerPrivate *priv = NM_MANAGER_GET_PRIVATE (self);
 	GSList *iter;
@@ -3829,7 +3851,9 @@ nm_manager_pending_activation_find (NMMa
 	for (iter = priv->pending_activations; iter; iter = g_slist_next (iter)) {
 		PendingActivation *pending = iter->data;
 
-		if (!strcmp (pending->connection_path, path) && (pending->scope == scope))
+		if (!g_strcmp0 (pending->connection_path, path) && (pending->scope == scope))
+			return pending;
+		if (device_path && g_strcmp0 (pending->device_path, device_path) == 0)
 			return pending;
 	}
 	return NULL;
@@ -3883,6 +3907,10 @@ pending_activation_have_connection (NMMa
 	if (pending->have_connection == FALSE) {
 		/* Kick off authorization checks when the connection becomes available */
 		pending->have_connection = TRUE;
+		if (pending->timeout_id) {
+			g_source_remove (pending->timeout_id);
+			pending->timeout_id = 0;
+		}
 		pending_activation_check_authorized (pending, priv->dbus_mgr, priv->user_proxy);
 	}
 }
@@ -3896,7 +3924,8 @@ connection_added_default_handler (NMMana
 
 	pending = nm_manager_pending_activation_find (self,
 	                                              nm_connection_get_path (connection),
-	                                              scope);
+	                                              scope,
+	                                              NULL);
 	if (pending)
 		pending_activation_have_connection (self, pending);
 }
diff -up NetworkManager-0.8.1/src/nm-policy.c.8021x-credentials-once NetworkManager-0.8.1/src/nm-policy.c
--- NetworkManager-0.8.1/src/nm-policy.c.8021x-credentials-once	2012-09-07 08:51:16.475354854 -0500
+++ NetworkManager-0.8.1/src/nm-policy.c	2012-09-07 08:53:15.838334226 -0500
@@ -725,8 +725,15 @@ auto_activate_device (gpointer user_data
 			s_con = NM_SETTING_CONNECTION (nm_connection_get_setting (best_connection, NM_TYPE_SETTING_CONNECTION));
 			g_assert (s_con);
 
-			nm_log_info (LOGD_DEVICE, "Connection '%s' auto-activation failed: (%d) %s",
-			             nm_setting_connection_get_id (s_con), error->code, error->message);
+			/* Don't warn when auto-activation failed because a user-requested
+			 * activation is already in progress.
+			 */
+			if (!g_error_matches (error,
+			                      NM_DEVICE_INTERFACE_ERROR,
+			                      NM_DEVICE_INTERFACE_ERROR_CONNECTION_ACTIVATING)) {
+				nm_log_info (LOGD_DEVICE, "Connection '%s' auto-activation failed: (%d) %s",
+				             nm_setting_connection_get_id (s_con), error->code, error->message);
+			}
 			g_error_free (error);
 		}
 	}
